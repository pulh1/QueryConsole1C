
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем МодельЗапроса; // см. ЭлементыМоделиЗапроса.НовыйПакетЗапросов
Перем ИндексЗапроса; // Число
Перем ИндексОператора; // Число
Перем СписокДоступныхВТ; // Массив из Произвольный
Перем ЭтоВложенныйЗапрос;
Перем УдаленныеКолонкиВременныхТаблиц;
Перем КолонкиВременныхТаблицСИзмененнымТипом;


#КонецОбласти

Функция Инициализировать(МодельЗапросаПараметр, ИндексЗапросаПараметр = Неопределено, ИндексОператораПараметр = 0, СписокДоступныхВТПараметр = Неопределено) Экспорт
	МодельЗапроса = МодельЗапросаПараметр;
	ИндексЗапроса = ИндексЗапросаПараметр;
	ИндексОператора = ИндексОператораПараметр;
	СписокДоступныхВТ = СписокДоступныхВТПараметр;
	
	ЭтоВложенныйЗапрос = МодельЗапроса.Тип = "ЗапросВыбора";
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолучитьМодель() Экспорт
	ОбработатьПакетЗапросовПриИзмененииКолонокВТ();
	Возврат МодельЗапроса;
КонецФункции

Функция ДобавитьЗапросВыбора() Экспорт 
	ЗапросВыбора = ЭлементыМоделиЗапроса.НовыйЗапросВыбора(); 
	
	МодельЗапроса.Элементы.Добавить(ЗапросВыбора);
	ИндексЗапроса = МодельЗапроса.Элементы.ВГраница();
	
	Возврат ДобавитьОператорЗапроса();
КонецФункции

Функция ДобавитьЗапросУничтожения(ИмяВТ = "") Экспорт 
	Если Не ЗначениеЗаполнено(ИмяВТ) Тогда
		ИмяВТ = "ВременнаяТаблица";
	КонецЕсли;	
	
	ЗапросУничтожения = ЭлементыМоделиЗапроса.НовыйЗапросУничтожения(); 
	
	МодельЗапроса.Элементы.Добавить(ЗапросУничтожения);
	ИндексЗапроса = ИндексЗапроса + 1;
	
	ЗапросУничтожения.ИмяТаблицы = ИмяВТ;
	ЗапросУничтожения.ОписаниеВТ = МодельЗапросаУтилиты.НайтиОписаниеДоступнойВТ(СписокДоступныхВТ(), ИмяВТ, ИндексЗапроса);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьЗапрос(ИндексЗапроса) Экспорт
	Если МодельЗапроса.Элементы[ИндексЗапроса].ОписаниеВТ <> Неопределено Тогда
		Если МодельЗапроса.Элементы[ИндексЗапроса].Тип = "ЗапросВыбора" Тогда	
			МодельЗапроса.Элементы[ИндексЗапроса].ОписаниеВТ.ИндексЗапросаСоздания = -1;
		Иначе
			МодельЗапроса.Элементы[ИндексЗапроса].ОписаниеВТ.ИндексЗапросаУничтожения = -1;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = ИндексЗапроса + 1 По МодельЗапроса.Элементы.ВГраница() Цикл
		Если МодельЗапроса.Элементы[Индекс].ОписаниеВТ = Неопределено Тогда
			Продолжить;
		ИначеЕсли МодельЗапроса.Элементы[Индекс].Тип = "ЗапросВыбора" Тогда
			МодельЗапроса.Элементы[Индекс].ОписаниеВТ.ИндексЗапросаСоздания
				= Макс(МодельЗапроса.Элементы[Индекс].ОписаниеВТ.ИндексЗапросаСоздания - 1, -1);	
		Иначе
			МодельЗапроса.Элементы[Индекс].ОписаниеВТ.ИндексЗапросаУничтожения 
				= Макс(МодельЗапроса.Элементы[Индекс].ОписаниеВТ.ИндексЗапросаУничтожения - 1, -1);
		КонецЕсли;
	КонецЦикла;
	
	МодельЗапроса.Элементы.Удалить(ИндексЗапроса);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция СдвинутьЗапрос(ТекушийИндекс, Направление) Экспорт
	НовыйИндекс = ТекушийИндекс + Направление;
	
	Если НовыйИндекс < 0 Или НовыйИндекс > МодельЗапроса.Элементы.ВГраница() Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	ТекущийЗапрос = МодельЗапроса.Элементы[ТекушийИндекс];
	НовыйЗапрос = МодельЗапроса.Элементы[НовыйИндекс];
	
	Если ТекущийЗапрос.ОписаниеВТ <> Неопределено Тогда
		Если ТекущийЗапрос.Тип = "ЗапросВыбора" Тогда	
			ТекущийЗапрос.ОписаниеВТ.ИндексЗапросаСоздания = НовыйИндекс;
		Иначе
			ТекущийЗапрос.ОписаниеВТ.ИндексЗапросаУничтожения = НовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйЗапрос.ОписаниеВТ <> Неопределено Тогда
		Если НовыйЗапрос.Тип = "ЗапросВыбора" Тогда	
			НовыйЗапрос.ОписаниеВТ.ИндексЗапросаСоздания = ТекушийИндекс;
		Иначе
			НовыйЗапрос.ОписаниеВТ.ИндексЗапросаУничтожения = ТекушийИндекс;
		КонецЕсли;
	КонецЕсли;
	
	МодельЗапроса.Элементы[ТекушийИндекс] = НовыйЗапрос;
	МодельЗапроса.Элементы[НовыйИндекс] = ТекущийЗапрос;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьОператорЗапроса() Экспорт
	Оператор = ЭлементыМоделиЗапроса.НовыйОператорЗапроса();   
	Оператор.Источники = ЭлементыМоделиЗапроса.НовыйИсточникиЗапроса();
	Оператор.Отбор = Новый Массив();
	Оператор.ОтборСгруппированных = Новый Массив();
	
	ЗапросВыбора = ТекущийЗапрос();
	
	ЗапросВыбора.Операторы.Добавить(Оператор);
	
	ИндексОператора = ИндексОператора + 1;
	
	Если ЗапросВыбора.Операторы.Количество() > 1 Тогда
		УдалитьЭлементыПорядкаТипаВыражения(ЗапросВыбора);	
		УдалитьКотнтольныеТочкиИтоговТипаВыражения(ЗапросВыбора);
		ОбновитьТипыКолонокЗапроса(ЗапросВыбора);	
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции	

Функция УстановитьТипОбъединения(ИндексОператора, ОбъединитьВсе) Экспорт
	Запрос = ТекущийЗапрос();
	
	Если ОбъединитьВсе Тогда
		Запрос.Операторы[ИндексОператора].ТипОбъединения = ЭлементыМоделиЗапроса.НовыйТипОбъединениеВсе();	
	Иначе
		Запрос.Операторы[ИндексОператора].ТипОбъединения = ЭлементыМоделиЗапроса.НовыйТипОбъединение();
	КонецЕсли;	
	
	Возврат ЭтотОбъект;	
КонецФункции

Функция УстановитьИмяВременнойТаблицы(ИмяВТ = Неопределено) Экспорт
	Если ЭтоВложенныйЗапрос И ЗначениеЗаполнено(ИмяВТ) Тогда
		ВызватьИсключение "Вложенный запрос не может создавать временную таблицу";
	КонецЕсли;
	
	Запрос = ТекущийЗапрос();
	Если Запрос.Тип = "ЗапросВыбора" Тогда
		Если ЗначениеЗаполнено(Запрос.ТаблицаДляПомещения) Тогда
			Если ЗначениеЗаполнено(ИмяВТ) Тогда
				Запрос.ОписаниеВТ.Имя = ИмяВТ;
				Запрос.ТаблицаДляПомещения = ИмяВТ;
			Иначе
				Запрос.ОписаниеВТ.ИндексЗапросаСоздания = -1;
				Запрос.ОписаниеВТ = Неопределено;
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(ИмяВТ) Тогда 
			Запрос.ТаблицаДляПомещения = ИмяВТ;
			ОписаниеВТ = МодельЗапросаУтилиты.ОписаниеВременнойТаблицы(Запрос, ИндексЗапроса);
			Запрос.ОписаниеВТ = ОписаниеВТ;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ИмяВТ) Тогда
			ВызватьИсключение "Не задано имя уничтожаемой временной таблицы";
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Запрос.ОписаниеВТ) Тогда
			Запрос.ОписаниеВТ.ИндексЗапросаУничтожения = -1;
		КонецЕсли;	
		
		Запрос.ИмяТаблицы = ИмяВТ;
		Запрос.ОписаниеВТ = МодельЗапросаУтилиты.НайтиОписаниеДоступнойВТ(СписокДоступныхВТ(), ИмяВТ, ИндексЗапроса);
		Если Запрос.ОписаниеВТ <> Неопределено Тогда
			Запрос.ОписаниеВТ.ИндексЗапросаУничтожения = ИндексЗапроса;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат ЭтотОбъект;	
КонецФункции

Функция УстановитьПолучениеРазрешенныхЗаспией(ВыбиратьРазрешенные) Экспорт
	ТекущийЗапрос().ВыбиратьРазрешенные = ВыбиратьРазрешенные;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьПолучениеУникальныхЗаписей(ПолучатьУникальныеЗаписи) Экспорт 
	ТекущийОператор().ВыбиратьРазличные = ПолучатьУникальныеЗаписи;	
	
	Возврат ЭтотОбъект;
КонецФункции	

Функция УстановитьПолучениеПервыхЗаписей(КоличествоЗаписей) Экспорт
	ТекущийОператор().КоличествоПолучаемыхЗаписей = КоличествоЗаписей;	
	
	Возврат ЭтотОбъект;	
КонецФункции

Функция ДобавитьИсточник(ИмяИсточника, Псевдоним = Неопределено, ПараметрыПредставления = Неопределено) Экспорт 
	ОператорЗапроса = ТекущийОператор();
	  	
	Если ЗначениеЗаполнено(Псевдоним) Тогда
		ПроверитьУникальностьПсевдонимаИсточника(ОператорЗапроса, Псевдоним);		
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(ИмяИсточника, ".");
	Если ЧастиИмени.Количество() = 1 Тогда
		Если СтрНачинаетсяС(ЧастиИмени[0], "&") Тогда
			Источник = ЭлементыМоделиЗапроса.НовыйИсточникДанныхТаблицаЗначений();   
			Источник.ИмяТаблицы = ЧастиИмени[0];
			
			ПсевдонимБезПостфикса = Сред(ЧастиИмени[0], 2);
		Иначе
			Источник = ЭлементыМоделиЗапроса.НовыйИсточникДанныхВременнаяТаблица(); 
			Источник.ИмяТаблицы = ЧастиИмени[0];
			Источник.ОписаниеВТ = МодельЗапросаУтилиты.НайтиОписаниеДоступнойВТ(СписокДоступныхВТ(), Источник.ИмяТаблицы, ИндексЗапроса);
	
			ПсевдонимБезПостфикса = ЧастиИмени[0]; 
		КонецЕсли;
	Иначе 		
		Схема = Новый СхемаЗапроса;
		ДоступныеТаблицы = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы;
		Если ДоступныеТаблицы.Найти(ИмяИсточника) = Неопределено Тогда 
			ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ИмяИсточника);
			Если ОписаниеПредставления = Неопределено Тогда
				ВызватьИсключение "Таблица " + ИмяИсточника + " не найдена";	
			КонецЕсли;
			
			Источник = ОбработкаПредставлениеЗапросов.ИсполняемоеПредставлениеПоОписанию(ОписаниеПредставления);	
		Иначе
			Источник = ЭлементыМоделиЗапроса.НовыйИсточникДанныхТаблица();
			Источник.ИмяТаблицы = ИмяИсточника; 
		КонецЕсли;
		Если ЧастиИмени.Количество() >= 3 Тогда
			ПсевдонимБезПостфикса = ЧастиИмени[ЧастиИмени.ВГраница()-1] + ЧастиИмени[ЧастиИмени.ВГраница()];	
		Иначе	
			ПсевдонимБезПостфикса = ЧастиИмени[ЧастиИмени.ВГраница()];
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Псевдоним) Тогда
		Источник.Псевдоним = Псевдоним;	
	Иначе
		Источник.Псевдоним = МодельЗапросаУтилиты.СгенерироватьПсевдонимИсточника(ПсевдонимБезПостфикса, ОператорЗапроса);
	КонецЕсли;
	Если ПараметрыПредставления <> Неопределено Тогда
		ОбработкаПредставлениеЗапросов.УстановитьПараметрыИсполняемогоПредставления(
			Источник, 
			ОписаниеПредставления, 
			ПараметрыПредставления);
	КонецЕсли;	
	
	ИсточникОператора = ЭлементыМоделиЗапроса.НовыйИсточник();
	ИсточникОператора.Источник = Источник;  
	ОператорЗапроса.Источники.Элементы.Добавить(ИсточникОператора);      
	
	Возврат ЭтотОбъект;
КонецФункции	

Функция УдалитьИсточник(ИндексИсточника) Экспорт
	ЗапросВыбора = ТекущийЗапрос();
	Оператор = ТекущийОператор();
	ИдентификаторИсточника = Оператор.Источники.Элементы[ИндексИсточника].ИдентификаторИсточника;
	Контекст = КонтекстОбработкиВыражения();
	
	ПсевдонимыУдаленныхПолей = Новый Массив();
	
	ОбработатьВыраемыеПоляПриУдаленииИсточника(Оператор, ИдентификаторИсточника, ПсевдонимыУдаленныхПолей, Контекст);
	ОбработатьГруппировкуПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст);
	ОбработатьОтборПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст);
	ОбработатьОтборСгруппированныхПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст);
	ОбработатьСоединенияПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст);
	
	Если ЗапросВыбора.Операторы.Количество() = 1 Тогда
		ОбработатьЭлементыПорядкаПриУдаленииИсточника(ЗапросВыбора, ИдентификаторИсточника, Контекст);	
		ОбработатьКонтрольныеТочкиИтоговПриУдаленииИсточника(ЗапросВыбора, ИдентификаторИсточника, Контекст);
	КонецЕсли; 
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	
	Для Каждого ИмяПоля Из ПсевдонимыУдаленныхПолей Цикл
		Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		Если Не ЕстьПоляСвязанныеСКолоной(Колонка, ПоляОператоров) Тогда
			УдалитьКолонкуЗапросаСлужебный(ЗапросВыбора, ЗапросВыбора.Колонки.Найти(Колонка));
		Иначе
			ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ЗапросВыбора.ОписаниеВТ);	
		КонецЕсли;
	КонецЦикла;
	
	УдалитьСоединенияСИсточником(ИдентификаторИсточника);
	Оператор.Источники.Элементы.Удалить(ИндексИсточника);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьВложенныйЗапрос(МодельВложенногоЗапрос) Экспорт 
	ОператорЗапроса = ТекущийОператор();
	
	Источник = ЭлементыМоделиЗапроса.НовыйИсточник();
	Источник.Источник = ЭлементыМоделиЗапроса.НовыйИсточникДанныхВложенныйЗапрос();
	Источник.Источник.ЗапросВыбора = МодельВложенногоЗапрос;
  	
	Источник.Источник.Псевдоним = МодельЗапросаУтилиты.СгенерироватьПсевдонимИсточника("ВложенныйЗапрос", ОператорЗапроса);
	ОператорЗапроса.Источники.Элементы.Добавить(Источник);    
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзменитьВложенныйЗапрос(ИдентификаторИсточника, МодельВложенногоЗапрос) Экспорт 
	ТекушийЗапрос = ТекущийЗапрос();
	Оператор = ТекущийОператор();
	
	ИсточникиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(Оператор.Источники.Элементы, "ИдентификаторИсточника");
	Источник = ИсточникиПоИдентификаторам.Получить(ИдентификаторИсточника);
	
	СтарыйЗапрос = Источник.Источник.ЗапросВыбора;
	Источник.Источник.ЗапросВыбора = МодельВложенногоЗапрос;
	
	УдаленныеПоля = УдаленныеПоляВложенногоЗапроса(
		СтарыйЗапрос.КолонкиПоПсевдонимам, 
		МодельВложенногоЗапрос.КолонкиПоПсевдонимам, 
		Источник.ИдентификаторИсточника);
	
	ТипыКолонокСтарогоЗапроса = Новый Соответствие();
	Для Каждого Колонка Из СтарыйЗапрос.Колонки Цикл
		ТипыКолонокСтарогоЗапроса.Вставить(ВРег(Колонка.Имя), Колонка.ТипЗначения);
	КонецЦикла;
	
	ТипыКолонокНовогоЗапроса = Новый Соответствие();
	Для Каждого Колонка Из МодельВложенногоЗапрос.Колонки Цикл
		ТипыКолонокНовогоЗапроса.Вставить(ВРег(Колонка.Имя), Колонка.ТипЗначения);
	КонецЦикла;	
	
	ПоляСИзмененнымТипом = ПоляВложенногоЗапросаСИзмененнымТипом(
		ТипыКолонокСтарогоЗапроса, ТипыКолонокНовогоЗапроса, 
		Источник.ИдентификаторИсточника);
	
	ОбработатьИзменениеПолейИсточника(ТекушийЗапрос, Оператор, УдаленныеПоля, ПоляСИзмененнымТипом);
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавить описание временной таблицы.
// 
// Параметры:
//  ОписаниеВТ - см. ЭлементыМоделиЗапроса.НовыйОписаниеВременнойТаблицы
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ПостроительМоделиЗапроса - Изменить описание временной таблицы
Функция ДобавитьОписаниеВременнойТаблицы(ОписаниеВТ) Экспорт
	ДобавитьИсточник(ОписаниеВТ.Имя);
	ИзменитьОписаниеВременнойТаблицы(ТекущийОператор().Источники.Элементы.ВГраница(), ОписаниеВТ);
	Возврат ЭтотОбъект;
КонецФункции

// Изменить описание временной таблицы.
// 
// Параметры:
//  ИндексИсточника - Число
//  НовоеОписание - см. ЭлементыМоделиЗапроса.НовыйОписаниеВременнойТаблицы
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ПостроительМоделиЗапроса - Изменить описание временной таблицы
Функция ИзменитьОписаниеВременнойТаблицы(ИндексИсточника, НовоеОписание) Экспорт
	Оператор = ТекущийОператор();
	Источник = Оператор.Источники.Элементы[ИндексИсточника].Источник;
	ИдентификаторИсточникаСтрокой = Строка(Оператор.Источники.Элементы[ИндексИсточника].ИдентификаторИсточника);
	Если Источник.Тип <> "ИсточникДанныхВременнаяТаблица" Тогда
		ВызватьИсключение "Установить описание временной можно только для временной таблицы.";
	КонецЕсли;
	Источник.ИмяТаблицы = НовоеОписание.Имя;
		
	ТекущееОписаниеВТ = Источник.ОписаниеВТ;
	Источник.ОписаниеВТ = НовоеОписание;
		
	Если ТекущееОписаниеВТ = Неопределено Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
		
	УдаленныеПоля = Новый Массив();
	ПоляСИзмененнымТипом = Новый Массив();
	Для Каждого Поле Из ТекущееОписаниеВТ.Колонки Цикл
		Если НовоеОписание.Колонки.Получить(Поле.Ключ) = Неопределено Тогда
			УдаленныеПоля.Добавить(ИдентификаторИсточникаСтрокой + "." + Поле.Ключ);		
		ИначеЕсли Не МодельЗапросаТипы.ТипыРавны(НовоеОписание.Колонки.Получить(Поле.Ключ), Поле.Значение) Тогда
			ПоляСИзмененнымТипом.Добавить(ИдентификаторИсточникаСтрокой + "." + Поле.Ключ);	
		КонецЕсли;
	КонецЦикла;	
	
	ОбработатьИзменениеПолейИсточника(ТекущийЗапрос(), Оператор, УдаленныеПоля, ПоляСИзмененнымТипом);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьПолеВЗапрос(Знач Выражение, Знач Псевдоним = Неопределено) Экспорт 
	// TODO проверка группировки (т.к. мы дополняем группировку при генерации текста, то вроде как не нужна проверка)
	
	ЗапросВыбора = ТекущийЗапрос(); 
	ТекущийОператор = ТекущийОператор();
	
	Если ТипЗнч(Выражение) = Тип("Строка") Тогда
		Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов(); 
		ТекстВыражения = Выражение;         
		Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
		Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения); 
	КонецЕсли; 
	
	Контекст = КонтекстОбработкиВыражения(); 		
	
	Если ЗначениеЗаполнено(Псевдоним) Тогда
		ПроверитьУникальностьПсевдонимаПоля(ЗапросВыбора, Псевдоним);
	Иначе
		Псевдоним = МодельЗапросаУтилиты.СгенерироватьПсевдонимВыбираемогоПоля(Выражение, ТекущийОператор); 
	КонецЕсли;  
	 
	ОбработкаМоделиЗапроса.ОбработатьВыражениеВыбираемогоПоля(Выражение, Псевдоним, Контекст);	
	
	Поле = ЭлементыМоделиЗапроса.НовыйПолеЗапроса();
	Поле.Выражение = Выражение;
	Поле.Псевдоним = Псевдоним;   
	Поле.ТипЗначения = Выражение.ТипЗначения;
	
	ТекущийОператор.ВыбираемыеПоля.Добавить(Поле);
	
	ОписаниеВТ = ТекущийЗапрос().ОписаниеВТ;
	
	Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Псевдоним));
	Если Колонка = Неопределено Тогда
		Колонка = ЭлементыМоделиЗапроса.НовыйКолонкаЗапроса();
		Колонка.Имя = Псевдоним;
		ЗапросВыбора.Колонки.Добавить(Колонка);
		ЗапросВыбора.КолонкиПоПсевдонимам.Вставить(ВРег(Псевдоним), Колонка);
		
		Если ОписаниеВТ <> Неопределено Тогда
			МодельЗапросаУтилиты.ДобавитьПолеВОписаниеВТ(ОписаниеВТ, Колонка);	
		КонецЕсли;
	КонецЕсли;
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ОписаниеВТ);
	
	// если это первый оператор, земенить порядок, и контрольные точик итогов ссылокй на колонку (если выражения совпадают)
	// проверить делается ли так в стандартном конструкторе
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьПолеОператора(ИндексПоля) Экспорт
	Запрос = ТекущийЗапрос();
	Оператор = ТекущийОператор();
	
	Псевдоним = Оператор.ВыбираемыеПоля[ИндексПоля].Псевдоним;
	Оператор.ВыбираемыеПоля.Удалить(ИндексПоля);	
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(Запрос);
	Колонка = Запрос.КолонкиПоПсевдонимам.Получить(ВРег(Псевдоним));
	Если ЕстьПоляСвязанныеСКолоной(Колонка, ПоляОператоров) Тогда
		ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, Запрос.ОписаниеВТ);
	Иначе
		УдалитьКолонкуЗапросаСлужебный(Запрос, Запрос.Колонки.Найти(Колонка));
	КонецЕсли;
КонецФункции

Функция ДобавитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимВладельцаСвязи, Знач ТипСоединения) Экспорт 
	Если Не ЗначениеЗаполнено(ТипСоединения) Тогда
		ТипСоединения = ЭлементыМоделиЗапроса.НовыйТипСоединенияЛевое();
	КонецЕсли;
	 
	ОператорЗапроса = ТекущийОператор(); 
	Источник = МодельЗапросаУтилиты.ИсточникЗапросаПоПсевдонику(ТекущийОператор(), ПсевдонимВладельцаСвязи); 	 
	
	Соединение = ЭлементыМоделиЗапроса.НовыйСоединениеИсточника();	
	Источник.Соединения.Добавить(Соединение);
	
	Соединение.Источник = МодельЗапросаУтилиты.ИсточникЗапросаПоПсевдонику(
		ОператорЗапроса, 
		ПсевдонимПрисоединяемойТаблицы).ИдентификаторИсточника;   
	
	Условие = ЭлементыМоделиЗапроса.НовыйКонстанта(); 
	Условие.Значение = Истина;	 
	
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = Условие;
	Соединение.Условие = Выражение;  
	
	Контекст = КонтекстОбработкиВыражения();
	
	ОбработкаМоделиЗапроса.ОбработатьУсловие(Выражение, Контекст);
	
	Соединение.ТипСоединения = ТипСоединения;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьОтбор(Знач ТекстВыражения) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  
	
	Контекст = КонтекстОбработкиВыражения(); 		
	ОператорЗапроса = ТекущийОператор(); 
	
	ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(Выражение, Контекст, Истина);
	
	Если Выражение.ИспользуетсяАгрегатнаяФункция Тогда
		// TODO проверить корректность выражения из блока имеющие
		ОператорЗапроса.ОтборСгруппированных.Добавить(Выражение);
	Иначе
		ОператорЗапроса.Отбор.Добавить(Выражение);	
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьГруппировку(Знач ТекстВыражения) Экспорт 
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  
	
	Контекст = КонтекстОбработкиВыражения();	
	Оператор = ТекущийОператор(); 
	
	ОбработкаМоделиЗапроса.ОбработатьВыражениеГруппировки(Выражение, Контекст);  
	Оператор.Группировка.Элементы.Добавить(Выражение);
	
	Возврат ЭтотОбъект;
КонецФункции  

Функция ДобавитьАгрегируемоеПоле(Знач ТекстВыражения) Экспорт   
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  

	Контекст = КонтекстОбработкиВыражения();	
	
	АгрегатнаяФункция = МодельЗапросаУтилиты.АгрегатнаяФункцияДляВыражения(Выражение, Контекст);	
	АгрегируемоеВыражение = Выражение.Значение; 
	АгрегатнаяФункция.Аргумент = АгрегируемоеВыражение;
	Выражение.Значение = АгрегатнаяФункция;    

	Возврат ДобавитьПолеВЗапрос(Выражение);  	
КонецФункции	

Функция ИзменитьАррегатнуюФункциюДляПоля(ИндексПоля, ИмяФункцции) Экспорт   
	Оператор = ТекущийОператор();
	Поле = Оператор.ВыбираемыеПоля[ИндексПоля];
	
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(Поле.Выражение.Значение);
	
	ИспользованиеАгрегатныхФункций = МодельЗапросаУтилиты.НайтиИспользованиеАгрегатныхФункций(Выражение);
	
	Для Каждого Использование Из ИспользованиеАгрегатныхФункций Цикл
		Если ИмяФункцции = "КОЛИЧЕСТВО" Тогда
			АгрегатнаяФункция = ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество();
		ИначеЕсли ИмяФункцции = "КОЛИЧЕСТВО_РАЗЛИЧНЫЕ" Тогда 
			АгрегатнаяФункция = ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество();
			АгрегатнаяФункция.Различные = Истина;
		Иначе
			АгрегатнаяФункция = ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункция();
			АгрегатнаяФункция.ИмяФункции = ИмяФункцции;
		КонецЕсли;
		АгрегатнаяФункция.Аргумент = Использование.ВыражениеАгрегатнойФункции.Аргумент;
		Использование.Родитель[Использование.СвойствоРодителя] = АгрегатнаяФункция;
	КонецЦикла;	
	
	Контекст = КонтекстОбработкиВыражения();
	ОбработкаМоделиЗапроса.ОбработатьВыражениеВыбираемогоПоля(Выражение, Поле.Псевдоним, Контекст);
	
	Поле.Выражение = Выражение;
	Колонка = ТекущийЗапрос().КолонкиПоПсевдонимам.Получить(ВРег(Поле.Псевдоним));
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ТекущийЗапрос());
	
	ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ТекущийЗапрос().ОписаниеВТ);
	
	Возврат ЭтотОбъект;
КонецФункции	

Функция УдалитьГруппировку(ИндексГруппировки) Экспорт
	Оператор = ТекущийОператор();
	
	Оператор.Группировка.Элементы.Удалить(ИндексГруппировки);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьАгрегированиеДляПоля(ИндексПоля) Экспорт
	Запрос = ТекущийЗапрос();
	Оператор = ТекущийОператор();
	
	Поле = Оператор.ВыбираемыеПоля[ИндексПоля];
	
	ИспользованиеАгрегатныхФункций = МодельЗапросаУтилиты.НайтиИспользованиеАгрегатныхФункций(Поле.Выражение);
	
	Для Каждого Использование Из ИспользованиеАгрегатныхФункций Цикл
		Использование.Родитель[Использование.СвойствоРодителя] = Использование.ВыражениеАгрегатнойФункции.Аргумент;
	КонецЦикла;	
	
	Контекст = КонтекстОбработкиВыражения();
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = Поле.Выражение.Значение;
	Поле.Выражение = Выражение;
	ОбработкаМоделиЗапроса.ОбработатьВыражениеВыбираемогоПоля(Выражение, Поле.Псевдоним, Контекст);
	
	Колонка = Запрос.КолонкиПоПсевдонимам.Получить(ВРег(Поле.Псевдоним));
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(Запрос);
	
	ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, Запрос.ОписаниеВТ);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьУпорядочивание(Знач ТекстВыражения) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения); 
	
	ЗапросВыбора = ТекущийЗапрос();
	
	ЭлементыПорядка = Новый Массив();
	Элемент = ЭлементыМоделиЗапроса.НовыйЭлементПорядка();
	Элемент.Выражение = Выражение;
	ЭлементыПорядка.Добавить(Элемент);
	
	Контекст = КонтекстОбработкиВыражения(); 	
	Контекст.РазрешеноУпорядочивание = Не ЭтоВложенныйЗапрос И Не ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения);
	
	ОбработкаМоделиЗапроса.ОбработатьЭлементыПорядка(ЗапросВыбора, ЭлементыПорядка, Контекст);
	
	ЗапросВыбора.Порядок.Добавить(ЭлементыПорядка[0]);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьКонтрольнуюТочкуИтогов(Знач ТекстВыражения) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения); 
	
	ЗапросВыбора = ТекущийЗапрос();
	ЭтоВложенныйЗапрос = МодельЗапроса.Тип = ЗапросВыбора.Тип; 
	
	КонтрольныеТочки = Новый Массив();
	Элемент = ЭлементыМоделиЗапроса.НовыйКонтрольнаяТочкаИтогов();
	Элемент.Выражение = Выражение;
	КонтрольныеТочки.Добавить(Элемент);
	
	Контекст = КонтекстОбработкиВыражения(); 
	Контекст.РазрешеныИтоги = Не ЭтоВложенныйЗапрос И Не ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения);	
	
	ОбработкаМоделиЗапроса.ОбработатьКонтрольныеТочкиИтогов(ЗапросВыбора, КонтрольныеТочки, Контекст);
	
	ЗапросВыбора.КонтрольныеТочкиИтогов.Добавить(КонтрольныеТочки[0]);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьИндекс(Знач ТекстВыражения) Экспорт
	ЗапросВыбора = ТекущийЗапрос();
	
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = Парсер.РазобратьВыражение(ТекстВыражения); 
	
	Контекст = КонтекстОбработкиВыражения();
   
	Индексы = Новый Массив();
	Индексы.Добавить(Выражение);
	
	Контекст = КонтекстОбработкиВыражения(); 	
	
	ОбработкаМоделиЗапроса.ОбработатьИндексируемыеПоля(ЗапросВыбора, Индексы, Контекст);
	
	ЗапросВыбора.Индекс.Элементы.Добавить(Индексы[0]);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьИндекс(Знач ИндексЭлемента) Экспорт
	ЗапросВыбора = ТекущийЗапрос();
	
	ЗапросВыбора.Индекс.Элементы.Удалить(ИндексЭлемента);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьПолеИтогов(Знач ИмяКолонки) Экспорт
	ЗапросВыбора = ТекущийЗапрос();
	
	Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяКолонки));
	Если Колонка = Неопределено  Тогда
		ВызватьИсключение "Поле запроса " + ИмяКолонки + " не найдена";
	КонецЕсли;
	
	АгрегатнаяФункция = МодельЗапросаУтилиты.АгрегатнаяФункцияПоТипуЗначения(Колонка.ТипЗначения);	
	
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов(); 
	АгрегируемоеВыражение = Парсер.РазобратьВыражение(ИмяКолонки); 
	АгрегатнаяФункция.Аргумент = АгрегируемоеВыражение;
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = АгрегатнаяФункция;

	ЭтоВложенныйЗапрос = МодельЗапроса.Тип = ЗапросВыбора.Тип; 
	
	ПоляИтогов = Новый Массив();
	ПолеИтогов = ЭлементыМоделиЗапроса.НовыйПолеЗапроса();
	ПолеИтогов.Выражение = Выражение;
	ПоляИтогов.Добавить(ПолеИтогов);
	
	Контекст = КонтекстОбработкиВыражения(); 	
	Контекст.РазрешеныИтоги = Не ЭтоВложенныйЗапрос И Не ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения);
	
	ОбработкаМоделиЗапроса.ОбработатьПоляИтогов(ЗапросВыбора, ПоляИтогов, Контекст);
	
	ЗапросВыбора.ВыраженияИтогов.Добавить(ПоляИтогов[0]);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьВыраженияПоля(ИндексПоля, Выражение) Экспорт
	//TODO
	//Если это единственное поле с таким выражением, то ищем такое выражение в группировках и меняем его
	//если полей с таким выражением несколько то ничего не делаем   
	
	Если ТипЗнч(Выражение) = Тип("Строка") Тогда
		Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
		ТекстВыражения = Выражение;
		Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
		Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения); 
	КонецЕсли;  
	
	ВыражениеШаблон = МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(Выражение);
	
	ЗапросВыбора = ТекущийЗапрос();
	Оператор = ТекущийОператор();
	Поле = Оператор.ВыбираемыеПоля[ИндексПоля];     
		
	Контекст = КонтекстОбработкиВыражения(); 
	ОбработкаМоделиЗапроса.ОбработатьВыражениеВыбираемогоПоля(Выражение, Поле.Псевдоним, Контекст);  
	Поле.Выражение = Выражение;
	
	ОписаниеВТ = ЗапросВыбора.ОписаниеВТ;
	
	Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Поле.Псевдоним));
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ОписаниеВТ);
	
	ИндексыПолей = МодельЗапросаУтилиты.НайтиПоляПоВыражению(Оператор, Поле.Выражение);     
	ИндексыГруппировки = МодельЗапросаУтилиты.НайтиЭлементыСпискаВыраженийПоЗначению(Оператор.Группировка, Поле.Выражение);
	
	Если ИндексыПолей.Количество() = ИндексыГруппировки.Количество()
		И Не Оператор.Группировка.Элементы[ИндексыГруппировки[0]].ИспользуетсяАгрегатнаяФункция Тогда
		
		ВыражениеГруппировки = МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(ВыражениеШаблон);
		
		ОбработкаМоделиЗапроса.ОбработатьВыражениеГруппировки(ВыражениеГруппировки, Контекст);  
		Оператор.Группировка[ИндексыГруппировки[0]] = ВыражениеГруппировки; 	
	КонецЕсли;
	
	//TODO для упорядочивания ничего не делаем
	// для контрольных точек итогов то же
	
	// Для итогов нужно проверить что все ok c ито
	
	Если ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения) Тогда
		// TODO если изменился тип поля, то во всех запросах используюших временную таблицу, нужно перевалидировать
		// все выражения испольщующие это поле. Если выражение тсало не валидным, то удаляем его
	КонецЕсли;
	
	
	
	Возврат ЭтотОбъект;
КонецФункции	   

Функция СвязатьПолеОператораСКолонкойЗапроса(ИндексОператора, ИндексКолонки, ИндексПоля) Экспорт
	Запрос = ТекущийЗапрос();
	Оператор = Запрос.Операторы[ИндексОператора];
	
	Колонка = Запрос.Колонки[ИндексКолонки];
	Поле = Оператор.ВыбираемыеПоля[ИндексПоля];
	
	ПоляОператора = МодельЗапросаУтилиты.ПоляОператораПоПсевдонимам(Оператор);

	ТекущееПоле = ПоляОператора.Получить(ВРег(Колонка.Имя));
	ТекущаяКолонка = Запрос.КолонкиПоПсевдонимам.Получить(ВРег(Оператор.ВыбираемыеПоля[ИндексПоля].Псевдоним));
	
	Если ТекущееПоле <> Неопределено Тогда
		ТекущееПоле.Псевдоним = ТекущаяКолонка.Имя;
	КонецЕсли;
	Поле.Псевдоним = Колонка.Имя;
	
	ОписаниеВТ = Запрос.ОписаниеВТ;
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(Запрос);
	ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ОписаниеВТ);	
	ОбновитьТипКолонкиЗапроса(ТекущаяКолонка, ПоляОператоров, ОписаниеВТ);	

	Если Не ЕстьПоляСвязанныеСКолоной(ТекущаяКолонка, ПоляОператоров) Тогда
		ИндексКолонки = Запрос.Колонки.Найти(ТекущаяКолонка);	
		УдалитьКолонкуЗапросаСлужебный(Запрос, ИндексКолонки);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьКолонкуЗапросаСлужебный(Запрос, ИндексКолонки)
	Колонка = Запрос.Колонки[ИндексКолонки];
	ИдентификаторКолонки = Колонка.Идентификатор;
	
	ВГраница = Запрос.Порядок.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементПорядка = Запрос.Порядок[ВГраница - Индекс];
		Если ЭлементПорядка.Выражение.Значение.Тип = "СсылкаНаКолонкуЗапроса" 
			И ЭлементПорядка.Выражение.Значение.Идентификатор = ИдентификаторКолонки Тогда
		
			Запрос.Порядок.Удалить(ВГраница - Индекс);
		КонецЕсли;	
	КонецЦикла;
	
	ВГраница = Запрос.КонтрольныеТочкиИтогов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		КонтрольнаяТочка = Запрос.КонтрольныеТочкиИтогов[ВГраница - Индекс];
		Если КонтрольнаяТочка.Выражение.Значение.Тип = "СсылкаНаКолонкуЗапроса" 
			И КонтрольнаяТочка.Выражение.Значение.Идентификатор = ИдентификаторКолонки Тогда
		
			Запрос.КонтрольныеТочкиИтогов.Удалить(ВГраница - Индекс);
		КонецЕсли;	
	КонецЦикла;
	
	ВГраница = Запрос.ВыраженияИтогов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ВыражениеИтогов = Запрос.ВыраженияИтогов[ВГраница - Индекс];
		Если ВыражениеИтогов.Выражение.Значение.Аргумент.Тип = "СсылкаНаКолонкуЗапроса" 
			И ВыражениеИтогов.Выражение.Значение.Аргумент.Идентификатор = ИдентификаторКолонки Тогда
		
			Запрос.ВыраженияИтогов.Удалить(ВГраница - Индекс);
		КонецЕсли;	
	КонецЦикла;
	
	ВГраница = Запрос.Индекс.Элементы.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементИндекса = Запрос.Индекс.Элементы[ВГраница - Индекс];
		Если ЭлементИндекса = ИдентификаторКолонки Тогда
			Запрос.Индекс.Элементы.Удалить(ВГраница - Индекс);
		КонецЕсли;	
	КонецЦикла;
	
	// TODO группировка
	
	Если ЗначениеЗаполнено(Запрос.ТаблицаДляПомещения) Тогда
		ОписаниеВТ = Запрос.ОписаниеВТ;
		
		МодельЗапросаУтилиты.УдалитьПолеИзОписаниеВТ(ОписаниеВТ, Колонка);
		
		УдаленныеКолонкиВТ = УдаленныеКолонкиВременныхТаблиц.Получить(ОписаниеВТ.Идентификатор);
		Если УдаленныеКолонкиВТ = Неопределено Тогда
			УдаленныеКолонкиВТ = Новый Соответствие();
			УдаленныеКолонкиВременныхТаблиц.Вставить(ОписаниеВТ.Идентификатор, УдаленныеКолонкиВТ);
		КонецЕсли;
		УдаленныеКолонкиВТ.Вставить(ВРег(Колонка.Имя));
	КонецЕсли;
	
	Запрос.КолонкиПоПсевдонимам.Удалить(ВРег(Колонка.Имя));
	Запрос.Колонки.Удалить(ИндексКолонки);	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьАгрегированиеДляПоля(ИндексПоля, ТекстВыражения) Экспорт 
	Контекст = КонтекстОбработкиВыражения();	
	
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  
	
	АгрегатнаяФункция = МодельЗапросаУтилиты.АгрегатнаяФункцияДляВыражения(Выражение, Контекст);
	
	АгрегируемоеВыражение = Выражение.Значение; 
	АгрегатнаяФункция.Аргумент = АгрегируемоеВыражение;
	Выражение.Значение = АгрегатнаяФункция;    
	
	Возврат УстановитьВыраженияПоля(ИндексПоля, Выражение);  
КонецФункции	

Функция ИзменитьОтбор(ИндексУсловия, ЭтоОтоборСгруппироованных, Знач ТекстВыражения) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  
	
	Контекст = КонтекстОбработкиВыражения(); 		
	ОператорЗапроса = ТекущийОператор();  
	
	ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(Выражение, Контекст);	
	
	Если Выражение.ИспользуетсяАгрегатнаяФункция Тогда
		// TODO проверить корректность выражения из блока имеющие
		
		Если Не ЭтоОтоборСгруппироованных Тогда
			ОператорЗапроса.Отбор.Удалить(ИндексУсловия);
			ОператорЗапроса.ОтборСгруппированных.Добавить(Выражение);
			НовыйИндекс = ОператорЗапроса.ОтборСгруппированных.ВГраница();
		Иначе
			ОператорЗапроса.ОтборСгруппированных[ИндексУсловия] = Выражение;	
		КонецЕсли;	
		
	Иначе
		// TODO проверить отсутствие агрегатов
		
		Если ЭтоОтоборСгруппироованных Тогда
			ОператорЗапроса.ОтборСгруппированных.Удалить(ИндексУсловия);
			ОператорЗапроса.Отбор.Добавить(Выражение);	
		Иначе
			ОператорЗапроса.Отбор[ИндексУсловия] = Выражение;	
		КонецЕсли;	
	КонецЕсли;
	Возврат ЭтотОбъект;
КонецФункции

Функция УдалитьОтбор(ИндексУсловия, ЭтоОтоборСгруппироованных) Экспорт
	ОператорЗапроса = ТекущийОператор();
	Если ЭтоОтоборСгруппироованных Тогда
		ОператорЗапроса.ОтборСгруппированных.Удалить(ИндексУсловия);
	Иначе
		ОператорЗапроса.Отбор.Удалить(ИндексУсловия);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзменитьСвойстваЭлементаУпорядочивания(ИндексЭлемента, УчитыватьИерархию, СортироватьПоВозрастанию) Экспорт
	ЭлементУпорядочивания = ТекущийЗапрос().Порядок[ИндексЭлемента];
	ЭлементУпорядочивания.Иерархия = УчитыватьИерархию;
	Если СортироватьПоВозрастанию Тогда
		ЭлементУпорядочивания.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеВозрастание();
	Иначе
		ЭлементУпорядочивания.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеУбывание();
	КонецЕсли;	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзменитьСвойстваКонтрольнойТочкиИтогов(ИндексЭлемента, ТипКонтрольнойТочки = Неопределено, ИмяКолонки = Неопределено,
		ВариантДополненияПериодами = Неопределено, ВыражениеДатаНачала = Неопределено, ВыражениеДатаОкончания = Неопределено) Экспорт
	
	ЗапросВыбора = ТекущийЗапрос();
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();  
	Для ИндексКонтрольнойТочки = 0 По ЗапросВыбора.КонтрольныеТочкиИтогов.ВГраница() Цикл
		ТекущаяКонтрольнаяТочка = ЗапросВыбора.КонтрольныеТочкиИтогов[ИндексКонтрольнойТочки];
		Если ИндексКонтрольнойТочки <> ИндексЭлемента
			И ЗначениеЗаполнено(ИмяКолонки) 
			И ВРег(ИмяКолонки) = ВРег(ТекущаяКонтрольнаяТочка.ИмяКолонки) Тогда
				
			ВызватьИсключение "Имя контрольной точки " + ИмяКолонки + " уже используется";
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеТипыДополнения = Новый Массив();
	ДоступныеТипыДополнения.Добавить("СЕКУНДА");
	ДоступныеТипыДополнения.Добавить("МИНУТА");
	ДоступныеТипыДополнения.Добавить("ЧАС");
	ДоступныеТипыДополнения.Добавить("ДЕНЬ");
	ДоступныеТипыДополнения.Добавить("НЕДЕЛЯ");
	ДоступныеТипыДополнения.Добавить("МЕСЯЦ");
	ДоступныеТипыДополнения.Добавить("ГОД");
	ДоступныеТипыДополнения.Добавить("ДЕКАДА");
	ДоступныеТипыДополнения.Добавить("ПОЛУГОДИЕ");
	
	Если ЗначениеЗаполнено(ТипКонтрольнойТочки)
		И ТипКонтрольнойТочки <> ЭлементыМоделиЗапроса.НовыйТипКонтрольнойТочкиИерархия()
		И ТипКонтрольнойТочки <> ЭлементыМоделиЗапроса.НовыйТипКонтрольнойТочкиТолькоИерархия() Тогда
			
		ВызватьИсключение "Не корректный тип контрольной точки итогов";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантДополненияПериодами) Тогда
		Если ДоступныеТипыДополнения.Найти(ВРег(ВариантДополненияПериодами)) = Неопределено Тогда
			ВызватьИсключение "Не корректный вариант дополнения периодами контрольной точки итогов";
		КонецЕсли;
	ИначеЕсли (ЗначениеЗаполнено(ВыражениеДатаНачала) Или ЗначениеЗаполнено(ВыражениеДатаОкончания)) Тогда	
		ВызватьИсключение "Для контрольно точки итогов ДатаНачалаПериодаДополнения и ДатаОкончанияПериода дополнения
		|могут быть заданы, только если задан тип дополнения периродами";
	КонецЕсли;
	
	КонтрольнаяТочка = ЗапросВыбора.КонтрольныеТочкиИтогов[ИндексЭлемента];
	
	Если ЗначениеЗаполнено(ВыражениеДатаНачала) Тогда
		НачалоПериодаДополнения = Парсер.РазобратьВыражение(ВыражениеДатаНачала);
	Иначе
		НачалоПериодаДополнения = Неопределено;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ВыражениеДатаОкончания) Тогда
		КонецПериодаДополнения = Парсер.РазобратьВыражение(ВыражениеДатаОкончания);
	Иначе
		КонецПериодаДополнения = Неопределено;	
	КонецЕсли;
	
	КонтрольняаТочкаДляОбработки = МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(КонтрольнаяТочка);
	КонтрольняаТочкаДляОбработки.ТипКонтрольнойТочки = ТипКонтрольнойТочки;
	КонтрольняаТочкаДляОбработки.ТипДополненияПериодами = ВРег(ВариантДополненияПериодами);
	КонтрольняаТочкаДляОбработки.НачалоПериодаДополнения = НачалоПериодаДополнения;
	КонтрольняаТочкаДляОбработки.КонецПериодаДополнения = КонецПериодаДополнения;
	КонтрольняаТочкаДляОбработки.ИмяКолонки = ИмяКолонки;
	
	ОбработкаМоделиЗапроса.ОбработатьДополнениеПериодамиКонтрольнойТочкиИтогов(КонтрольняаТочкаДляОбработки);
	
	КонтрольнаяТочка.ТипКонтрольнойТочки = КонтрольняаТочкаДляОбработки.ТипКонтрольнойТочки;
	КонтрольнаяТочка.ТипДополненияПериодами = КонтрольняаТочкаДляОбработки.ТипДополненияПериодами;
	КонтрольнаяТочка.НачалоПериодаДополнения = КонтрольняаТочкаДляОбработки.НачалоПериодаДополнения;
	КонтрольнаяТочка.КонецПериодаДополнения = КонтрольняаТочкаДляОбработки.КонецПериодаДополнения;
	КонтрольнаяТочка.ИмяКолонки = КонтрольняаТочкаДляОбработки.ИмяКолонки;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзменитьПсевдонимПоля(ИндексПоля, НовыйПсевдоним) Экспорт
	ЗапросВыбора = ТекущийЗапрос();
	
	СтарыйПсевдоним = ЗапросВыбора.Колонки[ИндексПоля].Имя; 
	Если СтарыйПсевдоним = НовыйПсевдоним Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	КолонкаССовпадающимПсевдонимом = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(НовыйПсевдоним));
	Если КолонкаССовпадающимПсевдонимом <> Неопределено 
		И ЗапросВыбора.Колонки.Найти(КолонкаССовпадающимПсевдонимом) <> ИндексПоля Тогда
		ВызватьИсключение "Поле с псевдонимом" + НовыйПсевдоним + " уже существует";
	КонецЕсли;
	
	ОписаниеВТ = ЗапросВыбора.ОписаниеВТ;
	Если ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения) Тогда
		МодельЗапросаУтилиты.УдалитьПолеИзОписаниеВТ(ОписаниеВТ, ЗапросВыбора.Колонки[ИндексПоля]);
		УдаленныеКолонкиВТ = УдаленныеКолонкиВременныхТаблиц.Получить(ОписаниеВТ.Идентификатор);
		Если УдаленныеКолонкиВТ = Неопределено Тогда
			УдаленныеКолонкиВТ = Новый Соответствие();
			УдаленныеКолонкиВременныхТаблиц.Вставить(ОписаниеВТ.Идентификатор, УдаленныеКолонкиВТ);
		КонецЕсли;
		УдаленныеКолонкиВТ.Вставить(ВРег(ЗапросВыбора.Колонки[ИндексПоля].Имя));
	КонецЕсли;
	
	ЗапросВыбора.Колонки[ИндексПоля].Имя = НовыйПсевдоним;
	Если ОписаниеВТ <> Неопределено Тогда
		МодельЗапросаУтилиты.ДобавитьПолеВОписаниеВТ(ОписаниеВТ, ЗапросВыбора.Колонки[ИндексПоля]);
	КонецЕсли;
	
	Если ВРег(НовыйПсевдоним) <> ВРег(СтарыйПсевдоним) Тогда
		ЗапросВыбора.КолонкиПоПсевдонимам.Вставить(ВРег(НовыйПсевдоним), ЗапросВыбора.Колонки[ИндексПоля]);
		ЗапросВыбора.КолонкиПоПсевдонимам.Удалить(ВРег(СтарыйПсевдоним));
	КонецЕсли;
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	
	Для Каждого ПоляОператора Из ПоляОператоров Цикл
		Поле = ПоляОператора.Получить(ВРег(СтарыйПсевдоним));
		Если Поле <> Неопределено Тогда
			Поле.Псевдоним = НовыйПсевдоним;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ИзменитьПсевдонимИсточника(ИндексИсточника, НовыйПсевдоним) Экспорт
	Оператор = ТекущийОператор();
	
	СтарыйПсевдоним = Оператор.Источники.Элементы[ИндексИсточника].Источник.Псевдоним; 
	Если СтарыйПсевдоним = НовыйПсевдоним Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	ПроверитьУникальностьПсевдонимаИсточника(Оператор, НовыйПсевдоним);
	Оператор.Источники.Элементы[ИндексИсточника].Источник.Псевдоним = НовыйПсевдоним;
	
	
	Возврат ЭтотОбъект;
КонецФункции


Функция УдалитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимВладельцаСвязи) Экспорт 	
	Источник = МодельЗапросаУтилиты.ИсточникЗапросаПоПсевдонику(ТекущийОператор(), ПсевдонимВладельцаСвязи); 
	ПрисоединяемыйИсточник = МодельЗапросаУтилиты.ИсточникЗапросаПоПсевдонику(ТекущийОператор(), ПсевдонимПрисоединяемойТаблицы);
	
	ИндексСоединения = МодельЗапросаУтилиты.ИндексСоединения(Источник, ПрисоединяемыйИсточник.ИдентификаторИсточника);
	Источник.Соединения.Удалить(ИндексСоединения);
	
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьУсловиеСоединения(ПсевдонимПрисоединяемойТаблицы, ПсевдонимВладельцаСвязи, ТекстВыражения) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();   
	
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);
	
	Контекст = КонтекстОбработкиВыражения();
	ОбработкаМоделиЗапроса.ОбработатьУсловие(Выражение, Контекст); 
	
	МодельЗапросаТипы.ПроверитьТипВыраженияУсловия(Выражение.ТипЗначения, ТекстВыражения);    
	Оператор = ТекущийОператор();
	ИсточникиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(Оператор.Источники.Элементы, "ИдентификаторИсточника");
	
	Соединение = МодельЗапросаУтилиты.НайтиСоединение(
		ТекущийОператор(), 
		ПсевдонимПрисоединяемойТаблицы, 
		ПсевдонимВладельцаСвязи, 
		ИсточникиПоИдентификаторам);
		
	Соединение.Условие = Выражение;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьТипСоединения(ПсевдонимПрисоединяемойТаблицы, ПсевдонимВладельцаСвязи, ТипСоединения) Экспорт
	Оператор = ТекущийОператор();
	ИсточникиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(Оператор.Источники.Элементы, "ИдентификаторИсточника");
	
	Соединение = МодельЗапросаУтилиты.НайтиСоединение(
		ТекущийОператор(), 
		ПсевдонимПрисоединяемойТаблицы, 
		ПсевдонимВладельцаСвязи, 
		ИсточникиПоИдентификаторам);
		
	Соединение.ТипСоединения = ТипСоединения;
	Возврат ЭтотОбъект;
КонецФункции

Функция УстановитьПараметрыИсполняемогоПредставления(ПсевдонимПредставления, ПараметрыПредставления) Экспорт 
	ОператорЗапроса = ТекущийОператор();
	Источник = МодельЗапросаУтилиты.ИсточникЗапросаПоПсевдонику(ОператорЗапроса, ПсевдонимПредставления);
	
	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(Источник.Источник.ИмяТаблицы);
	 
	ОбработкаПредставлениеЗапросов.УстановитьПараметрыИсполняемогоПредставления(
			Источник.Источник, 
			ОписаниеПредставления, 
			ПараметрыПредставления);
	
	Возврат ЭтотОбъект;
КонецФункции  

Функция КонтекстОбработкиВыражения()
	Возврат МодельЗапросаУтилиты.КонтекстОбработкиВыражения(ТекущийОператор(), ИндексЗапроса, СписокДоступныхВТ());	 
КонецФункции

Функция ТекущийЗапрос()
	Если МодельЗапроса.Тип = "ПакетЗапросов" Тогда 
		Возврат МодельЗапроса.Элементы[ИндексЗапроса];
	Иначе       
		Возврат МодельЗапроса;
	КонецЕсли;	
КонецФункции

Функция ТекущийОператор()
	Возврат ТекущийЗапрос().Операторы[ИндексОператора];
КонецФункции

Функция СписокДоступныхВТ()
	Если СписокДоступныхВТ <> Неопределено Тогда
		Возврат СписокДоступныхВТ;
	ИначеЕсли МодельЗапроса.Тип = "ПакетЗапросов" Тогда
		СписокДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
	Иначе
		СписокДоступныхВТ = Новый Массив();
	КонецЕсли;	
	
	Возврат СписокДоступныхВТ;
КонецФункции

Процедура УдалитьЭлементыПорядкаТипаВыражения(ЗапросВыбора)
	УдалитьЭлементыТипаВыражения(ЗапросВыбора.Порядок);
КонецПроцедуры

Процедура УдалитьКотнтольныеТочкиИтоговТипаВыражения(ЗапросВыбора)
	УдалитьЭлементыТипаВыражения(ЗапросВыбора.КонтрольныеТочкиИтогов);	
КонецПроцедуры

Процедура УдалитьЭлементыТипаВыражения(Элементы)
	ВГраница = Элементы.ВГраница();
	Для Индекс = 0 По Элементы.ВГраница() Цикл
		Элемент = Элементы[ВГраница - Индекс];
		Если Элемент.Выражение.Значение.Тип <> "СсылкаНаКолонкуЗапроса" Тогда
			Элементы.Удалить(ВГраница - Индекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
Процедура ОбновитьТипыКолонокЗапроса(ЗапросВыбора)
	ПоляОператоровПоПсевдонимам = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	
	ОписаниеВТ = ЗапросВыбора.ОписаниеВТ;
		
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл		
		ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоровПоПсевдонимам, ОписаниеВТ);	
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоровПоПсевдонимам, ОписаниеВТ = Неопределено)
	ТекущийТип = Колонка.ТипЗначения;
	УстанавливаемыйТип = Неопределено;
	Для Каждого ПоляОператора Из ПоляОператоровПоПсевдонимам Цикл
		ПолеОператора = ПоляОператора.Получить(ВРег(Колонка.Имя));
		Если ПолеОператора = Неопределено Тогда
			ДобовляемыйТип = Новый ОписаниеТипов("Null");	
		Иначе
			ДобовляемыйТип = ПолеОператора.Выражение.ТипЗначения;	
		КонецЕсли;
		
		Если УстанавливаемыйТип = Неопределено Тогда
			УстанавливаемыйТип = ДобовляемыйТип;
		Иначе
			УстанавливаемыйТип = Новый ОписаниеТипов(УстанавливаемыйТип, ДобовляемыйТип.Типы());
		КонецЕсли;
	КонецЦикла;
	Колонка.ТипЗначения = УстанавливаемыйТип;	
	
	Если ОписаниеВТ <> Неопределено 
		И Не МодельЗапросаТипы.ТипыРавны(Колонка.ТипЗначения, ТекущийТип) Тогда
		
		ОписаниеВТ.Колонки.Вставить(ВРег(Колонка.Имя), Колонка.ТипЗначения);
		
		Если ТекущийТип <> Неопределено Тогда
			КолонкиВТСИзмененнымТипом = КолонкиВременныхТаблицСИзмененнымТипом.Получить(ОписаниеВТ.Идентификатор);
			Если КолонкиВТСИзмененнымТипом = Неопределено Тогда
				КолонкиВТСИзмененнымТипом = Новый Соответствие();
				КолонкиВременныхТаблицСИзмененнымТипом.Вставить(ОписаниеВТ.Идентификатор, КолонкиВТСИзмененнымТипом);
			КонецЕсли;
				
			КолонкиВТСИзмененнымТипом.Вставить(ВРег(Колонка.Имя));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
Функция ЕстьПоляСвязанныеСКолоной(Колонка, ПоляОператоров) Экспорт
	Для Каждого ПоляОператора Из ПоляОператоров Цикл
		Если ПоляОператора.Получить(ВРег(Колонка.Имя)) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
	
Функция УдаленныеПоляВложенногоЗапроса(ПоляСтарогоЗапроса, ПоляНовогоЗапроса, ИдентификаторИсточника)
	УдаленныеПоля = Новый Массив();
	Для Каждого КлючЗначение Из ПоляСтарогоЗапроса Цикл
		Если ПоляНовогоЗапроса.Получить(КлючЗначение.Ключ) = Неопределено Тогда
		
			УдаленныеПоля.Добавить(Строка(ИдентификаторИсточника) + "." + КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат УдаленныеПоля;
КонецФункции	

Функция ПоляВложенногоЗапросаСИзмененнымТипом(ТипыПолейСтарогоЗапроса, ТипыПолейНовогоЗапроса, ИдентификаторИсточника)
	Поля = Новый Массив();
	Для Каждого КлючЗначение Из ТипыПолейСтарогоЗапроса Цикл
		ТипПоляНовогоЗапроса = ТипыПолейНовогоЗапроса.Получить(КлючЗначение.Ключ);
		Если ТипПоляНовогоЗапроса <> Неопределено 
			И Не МодельЗапросаТипы.ПервыйТипВключаетВторойТип(ТипПоляНовогоЗапроса, КлючЗначение.Значение) Тогда
		
			Поля.Добавить(Строка(ИдентификаторИсточника) + "." + КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поля;
КонецФункции

// Обработать изменение полей истчоника.
// 
// Параметры:
//  УдаленныеПоля - Массив из Строка
//  ПоляСИзмененнымТипом - Массив из Строка
Процедура ОбработатьИзменениеПолейИсточника(ЗапросВыбора, Оператор, УдаленныеПоля, ПоляСИзмененнымТипом)
	ПсевдонимыУдаленныхПолей = Новый Массив();
	ПсевдонимыПолейСИзмененнымТипом = Новый Массив();
	
	Контекст = КонтекстОбработкиВыражения();
	
	ОбработатьВыраемыеПоляПриИзмененииИсточника(
		Оператор, 
		УдаленныеПоля, 
		ПоляСИзмененнымТипом, 
		ПсевдонимыУдаленныхПолей, 
		ПсевдонимыПолейСИзмененнымТипом, 
		Контекст);
	
	ОбработатьГруппировкуПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);
	ОбработатьОтборПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);
	ОбработатьОтборСгруппированныхПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);
	ОбработатьСоединенияПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);
	
	Если ЗапросВыбора.Операторы.Количество() = 1 Тогда
		ОбработатьЭлементыПорядкаПриИзмененииИсточника(ЗапросВыбора, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);	
		ОбработатьКонтрольныеТочкиИтоговПриИзмененииИсточника(ЗапросВыбора, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст);
	КонецЕсли; 
	
	ПоляОператоров = МодельЗапросаУтилиты.ПоляОператоровПоПсевдонимам(ЗапросВыбора);
	
	ОписаниеВТ = ЗапросВыбора.ОписаниеВТ;
	
	Для Каждого ИмяПоля Из ПсевдонимыУдаленныхПолей Цикл
		Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		Если Не ЕстьПоляСвязанныеСКолоной(Колонка, ПоляОператоров) Тогда
			УдалитьКолонкуЗапросаСлужебный(ЗапросВыбора, ЗапросВыбора.Колонки.Найти(Колонка));
		Иначе
			ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ОписаниеВТ);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ПсевдонимыПолейСИзмененнымТипом Цикл
		Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		ОбновитьТипКолонкиЗапроса(Колонка, ПоляОператоров, ОписаниеВТ);	
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьСоединенияСИсточником(ИдентификаторИсточника)
	Оператор = ТекущийОператор();
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		ВГраница = Источник.Соединения.ВГраница();
		Для Индекс = 0 По ВГраница Цикл
			Соединение = Источник.Соединения[ВГраница - Индекс];
			Если Соединение.Источник = ИдентификаторИсточника Тогда
				Источник.Соединения.Удалить(ВГраница - Индекс);
			КонецЕсли;
		 КонецЦикла;
	КонецЦикла;
КонецПроцедуры
	
Процедура ОбработатьВыраемыеПоляПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, 
	ПсевдонимыУдаленныхПолей, ПсевдонимыПолейСИзмененнымТипом, Контекст)
	
	ВГраница = Оператор.ВыбираемыеПоля.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		Поле = Оператор.ВыбираемыеПоля[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(Поле.Выражение, УдаленныеПоля) Тогда
			Оператор.ВыбираемыеПоля.Удалить(ВГраница - Индекс);	
			ПсевдонимыУдаленныхПолей.Добавить(Поле.Псевдоним);	
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(Поле.Выражение, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыражениеВыбираемогоПоля(Поле.Выражение, Поле.Псевдоним, Контекст);
				ПсевдонимыПолейСИзмененнымТипом.Добавить(Поле.Псевдоним);
			Исключение
				Оператор.ВыбираемыеПоля.Удалить(ВГраница - Индекс);	
				ПсевдонимыУдаленныхПолей.Добавить(Поле.Псевдоним);	
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьВыраемыеПоляПриУдаленииИсточника(Оператор, ИдентификаторИсточника, ПсевдонимыУдаленныхПолей, Контекст)
	ВГраница = Оператор.ВыбираемыеПоля.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		Поле = Оператор.ВыбираемыеПоля[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(Поле.Выражение, ИдентификаторИсточника) Тогда
			Оператор.ВыбираемыеПоля.Удалить(ВГраница - Индекс);	
			ПсевдонимыУдаленныхПолей.Добавить(Поле.Псевдоним);	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьГруппировкуПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	ВГраница = Оператор.Группировка.Элементы.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементГруппировки = Оператор.Группировка.Элементы[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементГруппировки, УдаленныеПоля) Тогда
			Оператор.Группировка.Элементы.Удалить(ВГраница - Индекс);		
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементГруппировки, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыражениеГруппировки(ЭлементГруппировки, Контекст);
			Исключение
				Оператор.Группировка.Элементы.Удалить(ВГраница - Индекс);	
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьГруппировкуПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст)
	ВГраница = Оператор.Группировка.Элементы.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементГруппировки = Оператор.Группировка.Элементы[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(ЭлементГруппировки, ИдентификаторИсточника) Тогда
			Оператор.Группировка.Элементы.Удалить(ВГраница - Индекс);		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьОтборПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	ВГраница = Оператор.Отбор.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементОтбора = Оператор.Отбор[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементОтбора, УдаленныеПоля) Тогда
			Оператор.Отбор.Удалить(ВГраница - Индекс);		
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементОтбора, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(ЭлементОтбора, Контекст, Ложь);
			Исключение
				Оператор.Отбор.Удалить(ВГраница - Индекс);		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
	
Процедура ОбработатьОтборПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст)
	ВГраница = Оператор.Отбор.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементОтбора = Оператор.Отбор[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(ЭлементОтбора, ИдентификаторИсточника) Тогда
			Оператор.Отбор.Удалить(ВГраница - Индекс);		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
	
Процедура ОбработатьОтборСгруппированныхПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	ВГраница = Оператор.ОтборСгруппированных.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементОтбора = Оператор.ОтборСгруппированных[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементОтбора, УдаленныеПоля) Тогда
			Оператор.ОтборСгруппированных.Удалить(ВГраница - Индекс);		
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементОтбора, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(ЭлементОтбора, Контекст, Истина);
			Исключение
				Оператор.ОтборСгруппированных.Удалить(ВГраница - Индекс);		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

Процедура ОбработатьОтборСгруппированныхПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст)
	ВГраница = Оператор.ОтборСгруппированных.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементОтбора = Оператор.ОтборСгруппированных[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(ЭлементОтбора, ИдентификаторИсточника) Тогда
			Оператор.ОтборСгруппированных.Удалить(ВГраница - Индекс);		
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

// Обработать соединения при изменении источника.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса
//  УдаленныеПоля - Массив из Строка
//  ПоляСИзмененнымТипом - Массив из Строка
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьСоединенияПриИзмененииИсточника(Оператор, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Для Каждого Соединение Из Источник.Соединения Цикл
			Если Не МодельЗапросаУтилиты.ВыражениеИспользуетПоля(Соединение.Условие, ПоляСИзмененнымТипом) 
				И Не МодельЗапросаУтилиты.ВыражениеИспользуетПоля(Соединение.Условие, УдаленныеПоля) Тогда
					
				Продолжить
			КонецЕсли;
			УсловияСоединения = МодельЗапросаУтилиты.УсловиеВМассивВыраженийПоИ(Соединение.Условие.Значение);
			Если УдалитьНеВалидныеЧастиУсловияСоединения(УсловияСоединения, Контекст) Тогда
				Соединение.Условие = ВыражениеУсловияСоединенияИзМассива(УсловияСоединения, Контекст);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	

// Обработать соединения при удалении источника.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса
//  УдаленныеПоля - Массив из Строка
//  ПоляСИзмененнымТипом - Массив из Строка
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьСоединенияПриУдаленииИсточника(Оператор, ИдентификаторИсточника, Контекст)
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Для Каждого Соединение Из Источник.Соединения Цикл
			Если Не МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(Соединение.Условие, ИдентификаторИсточника) Тогда	
				Продолжить
			КонецЕсли;
			УсловияСоединения = МодельЗапросаУтилиты.УсловиеВМассивВыраженийПоИ(Соединение.Условие.Значение);
			Если УдалитьНеВалидныеЧастиУсловияСоединения(УсловияСоединения, Контекст) Тогда
				Соединение.Условие = ВыражениеУсловияСоединенияИзМассива(УсловияСоединения, Контекст);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры	

Функция УдалитьНеВалидныеЧастиУсловияСоединения(МассивУсловий, Контекст)
	ВГраница = МассивУсловий.ВГраница();
	УсловиеИзменено = Ложь;
	Для Индекс = 0 По ВГраница Цикл
		Условие = МассивУсловий[ВГраница - Индекс];
		Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
		Выражение.Значение = Условие;
		Попытка 
			ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(Выражение, Контекст, Ложь);
		Исключение
			МассивУсловий.Удалить(ВГраница - Индекс);		
			УсловиеИзменено = Истина;
		КонецПопытки;
	КонецЦикла;	
	
	Возврат УсловиеИзменено;
КонецФункции

Функция ВыражениеУсловияСоединенияИзМассива(МассивУсловий, Контекст)
	Если МассивУсловий.Количество() = 0 Тогда
		Условие = ЭлементыМоделиЗапроса.НовыйКонстанта();
		Условие.Значение = Истина;	
	Иначе
		Условие = ОбработкаМоделиЗапроса.УсловиеИзМассиваВыражений(МассивУсловий);	
	КонецЕсли;
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
	Выражение.Значение = Условие;
	ОбработкаМоделиЗапроса.ОбработатьВыражениеУсловие(Выражение, Контекст, Ложь);
	Возврат Выражение;
КонецФункции

// Обработать элементы порядка при изменении источника.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  УдаленныеПоля - Массив из Строка
//  ПоляСИзмененнымТипом - Массив из Строка
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьЭлементыПорядкаПриИзмененииИсточника(ЗапросВыбора, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	ВГраница = ЗапросВыбора.Порядок.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементПорядка = ЗапросВыбора.Порядок[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементПорядка.Выражение, УдаленныеПоля) Тогда
			ЗапросВыбора.Порядок.Удалить(ВГраница - Индекс);		
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(ЭлементПорядка.Выражение, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыбираемоеПолеОператора(ЭлементПорядка.Выражение, Контекст);
			Исключение
				ЗапросВыбора.Порядок.Удалить(ВГраница - Индекс);		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Обработать элементы порядка при удалении источника.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  ИдентификаторИсточника - УникальныйИдентификатор
Процедура ОбработатьЭлементыПорядкаПриУдаленииИсточника(ЗапросВыбора, ИдентификаторИсточника, Контекст)
	ВГраница = ЗапросВыбора.Порядок.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		ЭлементПорядка = ЗапросВыбора.Порядок[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(ЭлементПорядка.Выражение, ИдентификаторИсточника) Тогда
			ЗапросВыбора.Порядок.Удалить(ВГраница - Индекс);		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Обработать контрольные точки итогов при изменении источника.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  УдаленныеПоля - Массив из Строка
//  ПоляСИзмененнымТипом - Массив из Строка
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьКонтрольныеТочкиИтоговПриИзмененииИсточника(ЗапросВыбора, УдаленныеПоля, ПоляСИзмененнымТипом, Контекст)
	ВГраница = ЗапросВыбора.КонтрольныеТочкиИтогов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		КонтрольнаяТочка = ЗапросВыбора.КонтрольныеТочкиИтогов[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоля(КонтрольнаяТочка.Выражение, УдаленныеПоля) Тогда
			ЗапросВыбора.КонтрольныеТочкиИтогов.Удалить(ВГраница - Индекс);		
		ИначеЕсли МодельЗапросаУтилиты.ВыражениеИспользуетПоля(КонтрольнаяТочка.Выражение, ПоляСИзмененнымТипом) Тогда
			Попытка 
				ОбработкаМоделиЗапроса.ОбработатьВыбираемоеПолеОператора(КонтрольнаяТочка.Выражение, Контекст);
			Исключение
				ЗапросВыбора.КонтрольныеТочкиИтогов.Удалить(ВГраница - Индекс);		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Обработать контрольные точки итогов при изменении источника.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  ИдентификаторИсточника - УникальныйИдентификатор
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьКонтрольныеТочкиИтоговПриУдаленииИсточника(ЗапросВыбора, ИдентификаторИсточника, Контекст)
	ВГраница = ЗапросВыбора.КонтрольныеТочкиИтогов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		КонтрольнаяТочка = ЗапросВыбора.КонтрольныеТочкиИтогов[ВГраница - Индекс];
		Если МодельЗапросаУтилиты.ВыражениеИспользуетПоляИсточника(КонтрольнаяТочка.Выражение, ИдентификаторИсточника) Тогда
			ЗапросВыбора.КонтрольныеТочкиИтогов.Удалить(ВГраница - Индекс);		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьПакетЗапросовПриИзмененииКолонокВТ()
	Если УдаленныеКолонкиВременныхТаблиц.Количество() = 0 
		И КолонкиВременныхТаблицСИзмененнымТипом.Количество() = 0 Тогда
			
		Возврат;
	КонецЕсли;
	
	ИндексТекущегоЗапроса = ИндексЗапроса;
	ИндексТекущегоОператора = ИндексОператора;
	
	ИндексЗапроса = 0;
	Для Каждого ТекущийЗапрос Из МодельЗапроса.Элементы Цикл
		Если ТекущийЗапрос.Тип <> "ЗапросВыбора" Тогда
			Продолжить;
		КонецЕсли;
		ДоступныеВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
		ОбработатьЗапросПриИзмененииКолонокВТСлужебный(ТекущийЗапрос, ДоступныеВТ);
		ИндексЗапроса = ИндексЗапроса + 1;	
	КонецЦикла;
	ИндексЗапроса = ИндексТекущегоЗапроса;
	ИндексОператора  =ИндексОператора;
КонецПроцедуры

Процедура ОбработатьЗапросПриИзмененииКолонокВТ(ЗапросВыбра, ДоступныеВТ,
	УдаленныеКолонкиВременныхТаблицПараметр, КолонкиВременныхТаблицСИзмененнымТипомПараметр) Экспорт
	
	УдаленныеКолонкиВременныхТаблиц = УдаленныеКолонкиВременныхТаблицПараметр;
	КолонкиВременныхТаблицСИзмененнымТипом = КолонкиВременныхТаблицСИзмененнымТипомПараметр;
	
	ОбработатьЗапросПриИзмененииКолонокВТСлужебный(ЗапросВыбра, ДоступныеВТ);
КонецПроцедуры

Процедура ОбработатьЗапросПриИзмененииКолонокВТСлужебный(ЗапросВыбра, ДоступныеВТ)
	ОписанияВТПоИД = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(ДоступныеВТ, "Идентификатор");
	
	ИндексОператора = 0;
	Для Каждого Оператор Из ЗапросВыбра.Операторы Цикл
		УдаленныеПоля = Новый Массив();
		ПоляСИзмененнымТипом = Новый Массив();
		Для Каждого Источник Из Оператор.Источники.Элементы Цикл
			Если Источник.Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
				ОбработатьВложеннйЗапросПриИзмененииКолонокВТ(
					Источник, 
					УдаленныеПоля, 
					ПоляСИзмененнымТипом,
					ДоступныеВТ);		
			ИначеЕсли Источник.Источник.Тип = "ИсполняемоеПредставление" Тогда 
				// TODO обработать запрос ВТ Фильтрп
			ИначеЕсли Источник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда 
				Если Источник.Источник.ОписаниеВТ <> Неопределено
					И ОписанияВТПоИД.Получить(Источник.Источник.ОписаниеВТ.Идентификатор) <> Неопределено Тогда	
					
					УдаленныеПоляВТ = УдаленныеКолонкиВременныхТаблиц.Получить(Источник.Источник.ОписаниеВТ.Идентификатор);
					Если УдаленныеПоляВТ <> Неопределено Тогда
						Для Каждого Поле Из УдаленныеПоляВТ Цикл
							УдаленныеПоля.Добавить(Строка(Источник.ИдентификаторИсточника) + "." + Поле.Ключ);	
						КонецЦикла; 	
					КонецЕсли;
					
					ПоляВТСИзмененнымТипом = КолонкиВременныхТаблицСИзмененнымТипом.Получить(Источник.Источник.ОписаниеВТ.Идентификатор);
					Если ПоляВТСИзмененнымТипом <> Неопределено Тогда
						Для Каждого Поле Из ПоляВТСИзмененнымТипом Цикл
							ПоляСИзмененнымТипом.Добавить(Строка(Источник.ИдентификаторИсточника) + "." + Поле.Ключ);	
						КонецЦикла; 	
					КонецЕсли;	
				КонецЕсли;		
			КонецЕсли;
		КонецЦикла;
		ОбработатьИзменениеПолейИсточника(ЗапросВыбра, Оператор, УдаленныеПоля, ПоляСИзмененнымТипом);
		ИндексОператора = ИндексОператора;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьВложеннйЗапросПриИзмененииКолонокВТ(Источник, УдаленныеПоля, ПоляСИзмененнымТипом, ДоступныеВТ)
	ПоляСтарогоЗапроса = Новый Соответствие();
	Для Каждого Колонка Из Источник.Источник.ЗапросВыбора.Колонки Цикл
		ПоляСтарогоЗапроса.Вставить(ВРег(Колонка.Имя), Колонка);
	КонецЦикла;	
	
	ТипыКолонокСтарогоЗапроса = Новый Соответствие();
	Для Каждого Колонка Из Источник.Источник.ЗапросВыбора.Колонки Цикл
		ТипыКолонокСтарогоЗапроса.Вставить(ВРег(Колонка.Имя), Колонка.ТипЗначения);
	КонецЦикла;
	
	ПостроительМодели = МодельЗапросаУтилиты.СоздатьПостроительМодели(
		Источник.Источник.ЗапросВыбора,
		ИндексЗапроса,
		0,
		ДоступныеВТ);	
				
	ПостроительМодели.ОбработатьЗапросПриИзмененииКолонокВТ(
		Источник.Источник.ЗапросВыбора, 
		ДоступныеВТ,
		УдаленныеКолонкиВременныхТаблиц,
		КолонкиВременныхТаблицСИзмененнымТипом);
				
	ПоляНовогоЗапрос = Новый Соответствие();
	Для Каждого Колонка Из Источник.Источник.ЗапросВыбора.Колонки Цикл
		ПоляНовогоЗапрос.Вставить(ВРег(Колонка.Имя), Колонка);
	КонецЦикла;				
	
	ТипыКолонокНовогоЗапроса = Новый Соответствие();
	Для Каждого Колонка Из Источник.Источник.ЗапросВыбора.Колонки Цикл
		ТипыКолонокНовогоЗапроса.Вставить(ВРег(Колонка.Имя), Колонка.ТипЗначения);
	КонецЦикла;
								
	УдаленныеПоляТекущегоЗапроса = УдаленныеПоляВложенногоЗапроса(
		ПоляСтарогоЗапроса, 
		ПоляНовогоЗапрос, 
		Источник.ИдентификаторИсточника);
		
	Для Каждого Поле Из УдаленныеПоляТекущегоЗапроса Цикл
		УдаленныеПоля.Добавить(Поле);
	КонецЦикла;
	
	ПоляСИзмененнымТипомТекущегоЗапроса = ПоляВложенногоЗапросаСИзмененнымТипом(
		ТипыКолонокСтарогоЗапроса, 
		ТипыКолонокНовогоЗапроса, 
		Источник.ИдентификаторИсточника);
	
	Для Каждого Поле Из ПоляСИзмененнымТипомТекущегоЗапроса Цикл
		ПоляСИзмененнымТипом.Добавить(Поле);
	КонецЦикла;			
КонецПроцедуры

Процедура ПроверитьУникальностьПсевдонимаИсточника(ОператорЗапроса, Псевдоним)
	Для Каждого ИсточникОператора Из ОператорЗапроса.Источники.Элементы Цикл
		Если ВРег(ИсточникОператора.Источник.Псевдоним) = ВРег(Псевдоним) Тогда
			ВызватьИсключение "Псевдоним " + Псевдоним + " уже используется для другой таблицы запроса."	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

// Проверить уникальность псевдонима поля.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  Псевдоним - Строка
Процедура ПроверитьУникальностьПсевдонимаПоля(ЗапросВыбора, Псевдоним)
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл
		Если ВРег(Колонка.Имя) = ВРег(Псевдоним) Тогда
			ВызватьИсключение "Псевдоним " + Псевдоним + " уже используется для другого поля запроса."	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

УдаленныеКолонкиВременныхТаблиц = Новый Соответствие();
КолонкиВременныхТаблицСИзмененнымТипом = Новый Соответствие();

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
