
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание(ИмяРегистра) Экспорт
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	
	// Описание возможностей
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	
	Описание.ПоддерживаетсяПсевдонимыПолей = Истина; 
	Описание.ПоддерживаютсяИндексы = Истина; 
	Описание.ПоддерживаетсяПолучениеРезультатаЗапроса = Ложь;      
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Истина;
	
	// Описание полей
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();    
	Описание.Поля.Добавить(Поле);
	Поле.Имя = "Период";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Измерение.Имя;
		Поле.ТипЗначения = Измерение.Тип; 
		Описание.Поля.Добавить(Поле);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Ресурс.Имя + "Оборот";
		Поле.ТипЗначения =  Ресурс.Тип; 
		Описание.Поля.Добавить(Поле); 
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Ресурс.Имя + "НарастающийИтог";
		Поле.ТипЗначения =  Ресурс.Тип; 
		Описание.Поля.Добавить(Поле); 
	КонецЦикла;		
	
	// Описание параметров
	ПараметрНачалоПериода = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрНачалоПериода);

	ПараметрНачалоПериода.Обязательный = Истина;
	ПараметрНачалоПериода.Имя = "НачалоПериода"; 
	ПараметрНачалоПериода.ДопустимПараметрЗапроса = Истина; 
	ПараметрНачалоПериода.ТипКонстанты = Новый ОписаниеТипов("Дата");  
	
	ПараметрОкончаниеПериода = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрОкончаниеПериода);
	
	ПараметрОкончаниеПериода.Обязательный = Истина;
	ПараметрОкончаниеПериода.Имя = "КонецПериода"; 
	ПараметрОкончаниеПериода.ДопустимПараметрЗапроса = Истина; 
	ПараметрОкончаниеПериода.ТипКонстанты = Новый ОписаниеТипов("Дата"); 
	
	ПараметрПериодичность = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрПериодичность);
	ПараметрПериодичность.Имя = "Периодичность";
	ПараметрПериодичность.ТипКонстанты = Новый ОписаниеТипов("Строка");
	ПараметрПериодичность.Обязательный = Ложь;
	ПараметрПериодичность.ДопустимПараметрЗапроса = Ложь;
	ПараметрПериодичность.ЗначениеПоУмолчанию = "МЕСЯЦ";
	
	ПараметрПериодичность.ДоступныеЗначения.Добавить("СЕКУНДА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("МИНУТА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ЧАС");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ДЕНЬ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("НЕДЕЛЯ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ДЕКАДА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("МЕСЯЦ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("КВАРТАЛ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ПОЛУГОДИЕ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ГОД");
	
	Описание.ОписаниеОтбора = ОписаниеИсполняемыхПредставленийШаблоны.ОписаниеОтбораСоВсемиВозможностями();
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Описание.ОписаниеОтбора.ДоступныеПоля.Добавить(Измерение.Имя);
	КонецЦикла;	
	
	Возврат Описание;
КонецФункции

Функция ИмяПредставления() Экспорт
	Возврат "РегистрНакопления.НарастающиеИтоги";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	- РезультатЗапроса 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	ЧастиИмени = СтрРазделить(ПараметрыВыполнения.ИмяИсполняемогоПредставления, ".");
	ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);    
	
	СКД = Новый СхемаКомпоновкиДанных();
	Источник = СКД.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	НаборСКД = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборСКД.ИсточникДанных = "Источник";
	НаборСКД.Имя = "Данные";
	НаборСКД.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Для Каждого КлючЗначение Из Запрос.Параметры Цикл
		ПараметрСКД = СКД.Параметры.Добавить();
		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрСКД.Имя = КлючЗначение.Ключ;
		ПараметрСКД.ДоступенСписокЗначений = Истина;
		ПараметрСКД.Значение = КлючЗначение.Значение;
	КонецЦикла;
	
	СоответсвиеРесурсов = СоответсвиеРесурсов(МетаданныеРегистра);
	
	НаборСКД.Запрос = ТекстЗапросаОборотов(МетаданныеРегистра, ПараметрыВыполнения);	
	
	НастройкиСКД = СКД.ВариантыНастроек.Добавить().Настройки;
	Группа = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи = Группа.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ВыбранныеРесурсы = Новый Соответствие; 
	Для Каждого Поле Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Если ВРег(Поле.Ключ) = "ПЕРИОД" Тогда
			Продолжить;
		КонецЕсли;	
		
		Ресурс = СоответсвиеРесурсов.Получить(ВРег(Поле.Ключ));
		Если СтрЗаканчиваетсяНа(Поле.Значение, "НАРАСТАЮЩИЙИТОГ") Тогда
			ВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.Заголовок = Ресурс + "НарастающийИтог";
			ВычисляемоеПоле.ПутьКДанным = Ресурс + "НарастающийИтог";
			ВычисляемоеПоле.Выражение = "ВычислитьВыражение(""Сумма(" + Ресурс + "Оборот)"", , ""Группировка"", ""Первая"", ""Текущая"", ""Период"")";
			ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число");
			
			ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(Ресурс + "НарастающийИтог");
			ПолеСКД.Использование = Истина;
		КонецЕсли;	
		Если Ресурс <> Неопределено Тогда
			Если ВыбранныеРесурсы.Получить(ВРег(Поле.Ключ)) <> Неопределено Тогда
				Продолжить;  
			КонецЕсли;   
			
			ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(Ресурс + "Оборот");
			ПолеСКД.Использование = Истина;
		Иначе 
			ПолеСКД = Группа.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(Поле.Ключ);
			ПолеСКД.Использование = Истина;
			
			ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(Поле.Ключ);
			ПолеСКД.Использование = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого КлючЗначение Из Запрос.Параметры Цикл
		ПараметрСКД = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(КлючЗначение.Ключ));
		Если ПараметрСКД <> Неопределено Тогда
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	Поле.Использование = Истина;
	
	Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Период");
	Поле.Использование = Истина;
	
	ЭлементПорядка = ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Период");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, , , , , Запрос.МенеджерВременныхТаблиц);
	НарастающийИтог = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(НарастающийИтог);
		
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	ЗапросПомещенияВВТ = Новый Запрос();
	ЗапросПомещенияВВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПомещенияВВТ.УстановитьПараметр("Таблица", НарастающийИтог.Скопировать(Новый Структура("СистемныеПоляУровень", 2)));
	
	ЗапросПомещенияВВТ.Текст = ТекстЗапросаСозданияВТ(ПараметрыВыполнения);
	ЗапросПомещенияВВТ.Выполнить();
КонецФункции                                                 

Функция ИсполняемыйКод(ПараметрыВыполнения, Знач ТекущиеТабуляции) Экспорт
	ЧастиИмени = СтрРазделить(ПараметрыВыполнения.ИмяИсполняемогоПредставления, ".");
	ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);  
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	Утилиты = ГенерацияИсполняемогоКодаПредставленийУтилиты;
	
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	Код = "СКД = Новый СхемаКомпоновкиДанных();
	|Источник = СКД.ИсточникиДанных.Добавить();
	|Источник.Имя = ""Источник"";
	|Источник.ТипИсточникаДанных = ""local"";
	|НаборСКД = СКД.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
	|НаборСКД.ИсточникДанных = ""Источник"";
	|НаборСКД.Имя = ""Данные"";
	|НаборСКД.АвтоЗаполнениеДоступныхПолей = Истина;";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
	
	Строка = "НаборСКД.Запрос = ";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	ЗапросПолученияДанныхРегистра = ТекстЗапросаОборотов(МетаданныеРегистра, ПараметрыВыполнения);
	ТекстЗапроса = Утилиты.ПримитивноеЗначениеВСтроку(ЗапросПолученияДанныхРегистра) + ";";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, ТекстЗапроса, ТекущиеТабуляции);
	
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	ВспомогательныйЗапрос = Новый СхемаЗапроса();
	ВспомогательныйЗапрос.УстановитьТекстЗапроса(ЗапросПолученияДанныхРегистра);
	
	Для Каждого ОписаниеПараметра Из ВспомогательныйЗапрос.НайтиПараметры() Цикл
		Код = "ПараметрСКД = СКД.Параметры.Добавить();
		|ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		|ПараметрСКД.Имя = """ + ОписаниеПараметра.Имя + """;
		|ПараметрСКД.ДоступенСписокЗначений = Истина;
		|ПараметрСКД.Значение = " + ОписаниеПараметра.Имя + ";";
		
		Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
		ТекстовыйДокумент.ДобавитьСтроку("");
	КонецЦикла;
	
	Код = "НастройкиСКД = СКД.ВариантыНастроек.Добавить().Настройки;
	|Группа = НастройкиСКД.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));
	|ДетальныеЗаписи = Группа.Структура.Добавить(Тип(""ГруппировкаКомпоновкиДанных""));";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	СоответсвиеРесурсов = СоответсвиеРесурсов(МетаданныеРегистра);
	
	ВыбранныеРесурсы = Новый Соответствие; 
	Для Каждого Поле Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Если ВРег(Поле.Ключ) = "ПЕРИОД" Тогда
			Продолжить;
		КонецЕсли;	
		
		Ресурс = СоответсвиеРесурсов.Получить(ВРег(Поле.Ключ));
		Если СтрЗаканчиваетсяНа(Поле.Значение, "НАРАСТАЮЩИЙИТОГ") Тогда
			Код = "ВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			|ВычисляемоеПоле.Заголовок = """ + Ресурс + "НарастающийИтог"";
			|ВычисляемоеПоле.ПутьКДанным = """ + Ресурс + "НарастающийИтог"";
			|ВычисляемоеПоле.Выражение = ""ВычислитьВыражение(""""Сумма(" + Ресурс + "Оборот)"""", , """"Группировка"""", """"Первая"""", """"Текущая"""", """"Период"""")"";
			|ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов(""Число"");
			
			|ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
			|ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(""" + Ресурс  + "НарастающийИтог"");
			|ПолеСКД.Использование = Истина;";
			
			Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
		КонецЕсли;	
		Если Ресурс <> Неопределено Тогда
			Если ВыбранныеРесурсы.Получить(ВРег(Поле.Ключ)) <> Неопределено Тогда
				Продолжить;  
			КонецЕсли;   
			
			Код = "ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
			|ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(""" + Ресурс  + "Оборот"");
			|ПолеСКД.Использование = Истина;";
			Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
			
			ВыбранныеРесурсы.Вставить(ВРег(Поле.Ключ), Истина);
		Иначе 
			Код = "ПолеСКД = Группа.ПоляГруппировки.Элементы.Добавить(Тип(""ПолеГруппировкиКомпоновкиДанных""));
			|ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(""" + Поле.Ключ + """);
			|ПолеСКД.Использование = Истина;
			|
			|ПолеСКД = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
			|ПолеСКД.Поле = Новый ПолеКомпоновкиДанных(""" + Поле.Ключ + """);
			|ПолеСКД.Использование = Истина;";
			Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	Для Каждого ОписаниеПараметра Из ВспомогательныйЗапрос.НайтиПараметры() Цикл
		Код = "ПараметрСКД = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""" + ОписаниеПараметра.Имя + """));
		|Если ПараметрСКД <> Неопределено Тогда
		|	ПараметрСКД.Использование = Истина;
		|	ПараметрСКД.Значение = " + ОписаниеПараметра.Имя + ";
		|КонецЕсли;";
		Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	Код = "Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
	|Поле.Поле = Новый ПолеКомпоновкиДанных(""СистемныеПоля.Уровень"");
	|Поле.Использование = Истина;
	|
	|Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип(""ВыбранноеПолеКомпоновкиДанных""));
	|Поле.Поле = Новый ПолеКомпоновкиДанных(""Период"");
	|Поле.Использование = Истина;
	|
	|ЭлементПорядка = ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип(""ЭлементПорядкаКомпоновкиДанных""));
	|ЭлементПорядка.Использование = Истина;
	|ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(""Период"");
	|
	|КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	|МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, , ,
	|	Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
	|	
	|ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	|ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, , , , , Запрос.МенеджерВременныхТаблиц);
	|НарастающийИтог = Новый ТаблицаЗначений;
	|	
	|ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	|ПроцессорВывода.УстановитьОбъект(НарастающийИтог);
	|	
	|ПроцессорВывода.Вывести(ПроцессорКомпоновки);";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
	ТекстовыйДокумент.ДобавитьСтроку("");	
	
	Код = "ЗапросПомещенияВВТ = Новый Запрос();
	|ЗапросПомещенияВВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	|ЗапросПомещенияВВТ.УстановитьПараметр(""Таблица"", НарастающийИтог.Скопировать(Новый Структура(""СистемныеПоляУровень"", 2)));
	|ЗапросПомещенияВВТ.Текст = ";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Код, ТекущиеТабуляции);
	
	ТекстЗапросаПомещенияВТ = ТекстЗапросаСозданияВТ(ПараметрыВыполнения);
	
	ТекстЗапроса = Утилиты.ПримитивноеЗначениеВСтроку(ТекстЗапросаПомещенияВТ) + ";";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, ТекстЗапроса, ТекущиеТабуляции);
	
	
	Строка = "ЗапросПомещенияВВТ.Выполнить();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция ТекстЗапросаОборотов(МетаданныеРегистра, ПараметрыВыполнения)
	ПараметНачалоПериода = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("НачалоПериода").Значение;  
	ПараметКонецПериода = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("КонецПериода").Значение;
	
	Если ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Периодичность") = Неопределено Тогда
		Периодичность = "МЕСЯЦ";
	Иначе
		Периодичность = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Периодичность").Значение;
	КонецЕсли;		
	
	ШаблонЗапросаОборотов = 
	"ВЫБРАТЬ
	|	Обороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.#ИмяРегистра.Обороты(#НачалоПериода, #КонецПериода, #Периодичность, #Условие) КАК Обороты";
	
	ТекстЗапросаОбороты = СтрЗаменить(ШаблонЗапросаОборотов, "#ИмяРегистра", МетаданныеРегистра.Имя); 
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#Периодичность", Периодичность);      
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#НачалоПериода", "&" + ПараметНачалоПериода);
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#КонецПериода", "&" + ПараметКонецПериода);
	
	ТекстОтбора = ИсполнительПредставленийУтилиты.ТекстВыраженияОтбора(ПараметрыВыполнения, "Обороты");
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#Условие", ТекстОтбора);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаОбороты);
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];
	
	ЗапросСхемы.ВыбиратьРазрешенные = ПараметрыВыполнения.ТолькоРазрешенные;
	
	СоответсвиеРесурсов = СоответсвиеРесурсов(МетаданныеРегистра);
	
	ВыбранныеРесурсы = Новый Соответствие();
	Для Каждого Поле Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Если ВРег(Поле.Ключ) = "ПЕРИОД" Тогда
			Продолжить;
		КонецЕсли;	
		
		Ресурс = СоответсвиеРесурсов.Получить(ВРег(Поле.Ключ));
		Если Ресурс <> Неопределено Тогда
			Если ВыбранныеРесурсы.Получить(ВРег(Поле.Ключ)) <> Неопределено Тогда
				Продолжить;  
			КонецЕсли;   
			Оператор.ВыбираемыеПоля.Добавить(Ресурс + "Оборот");   
			ВыбранныеРесурсы.Вставить(Ресурс, Истина);
		Иначе
			Оператор.ВыбираемыеПоля.Добавить(Поле.Ключ);   
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ТекстЗапросаСозданияВТ(ПараметрыВыполнения)
	СхемаЗапроса = Новый СхемаЗапроса();
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос.ТаблицаДляПомещения = ПараметрыВыполнения.ИмяВТРезультат;
	Оператор = Запрос.Операторы[0];
	Источник = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&Таблица");
	
	ПсевдонимыПолейВРег  = Новый Соответствие();
	Для Каждого КлючЗначение Из ПараметрыВыполнения.ПсевдонимыПолей Цикл
		ПсевдонимыПолейВРег.Вставить(ВРег(КлючЗначение.Ключ), КлючЗначение.Значение);	
	КонецЦикла;
	
	Для Каждого Поле Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Источник.Источник.ДоступныеПоля.Добавить(Поле.Ключ);
		Оператор.ВыбираемыеПоля.Добавить("Таблица." + Поле.Ключ);
		Псевдоним = ПсевдонимыПолейВРег.Получить(ВРег(Поле.Ключ));
		Если Псевдоним <> Неопределено Тогда 
			Колонка = Запрос.Колонки.Найти(Поле.Ключ);
			Колонка.Псевдоним = Псевдоним;
		КонецЕсли;
	КонецЦикла;
		
	
	Для Каждого Индекс Из ПараметрыВыполнения.Индексы Цикл
		Колонка = Запрос.Колонки.Найти(Индекс);
		Запрос.Индекс.Добавить(Колонка);
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция СоответсвиеРесурсов(МетаданныеРегистра)
	СоответсвиеРесурсов = Новый Соответствие;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		СоответсвиеРесурсов.Вставить(ВРег(Ресурс.Имя + "НарастающийИтог"), Ресурс.Имя); 
		СоответсвиеРесурсов.Вставить(ВРег(Ресурс.Имя + "Оборот"), Ресурс.Имя);  
	КонецЦикла;	
	Возврат СоответсвиеРесурсов;
КонецФункции

#КонецОбласти

#КонецЕсли
