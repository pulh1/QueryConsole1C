
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание(ИмяРегистра) Экспорт
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
	
	// Описание возможностей
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	
	Описание.ПоддерживаетсяПсевдонимыПолей = Ложь; 
	Описание.ПоддерживаютсяИндексы = Ложь; 
	Описание.ПоддерживаетсяПолучениеРезультатаЗапроса = Ложь;      
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Истина;
	
	// Описание полей
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();    
	Описание.Поля.Добавить(Поле);
	Поле.Имя = "Период";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Измерение.Имя;
		Поле.ТипЗначения = Измерение.Тип; 
		Описание.Поля.Добавить(Поле);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Ресурс.Имя + "Оборот";
		Поле.ТипЗначения =  Ресурс.Тип; 
		Описание.Поля.Добавить(Поле); 
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Ресурс.Имя + "НарастающийИтог";
		Поле.ТипЗначения =  Ресурс.Тип; 
		Описание.Поля.Добавить(Поле); 
	КонецЦикла;		
	
	// Описание параметров
	ПараметрНачалоПериода = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрНачалоПериода);

	ПараметрНачалоПериода.Обязательный = Истина;
	ПараметрНачалоПериода.Имя = "НачалоПериода"; 
	ПараметрНачалоПериода.ДопустимПараметрЗапроса = Истина; 
	ПараметрНачалоПериода.ТипКонстанты = Новый ОписаниеТипов("Дата");  
	
	ПараметрОкончаниеПериода = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрОкончаниеПериода);
	
	ПараметрОкончаниеПериода.Обязательный = Истина;
	ПараметрОкончаниеПериода.Имя = "КонецПериода"; 
	ПараметрОкончаниеПериода.ДопустимПараметрЗапроса = Истина; 
	ПараметрОкончаниеПериода.ТипКонстанты = Новый ОписаниеТипов("Дата"); 
	
	ПараметрПериодичность = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Описание.ОписаниеПараметров.Добавить(ПараметрПериодичность);
	ПараметрПериодичность.Имя = "Периодичность";
	ПараметрПериодичность.ТипКонстанты = Новый ОписаниеТипов("Строка");
	ПараметрПериодичность.Обязательный = Ложь;
	ПараметрПериодичность.ДопустимПараметрЗапроса = Ложь;
	ПараметрПериодичность.ЗначениеПоУмолчанию = "МЕСЯЦ";
	
	ПараметрПериодичность.ДоступныеЗначения.Добавить("СЕКУНДА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("МИНУТА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ЧАС");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ДЕНЬ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("НЕДЕЛЯ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ДЕКАДА");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("МЕСЯЦ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("КВАРТАЛ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ПОЛУГОДИЕ");
	ПараметрПериодичность.ДоступныеЗначения.Добавить("ГОД");
	
	Описание.ОписаниеОтбора = ОписаниеИсполняемыхПредставленийШаблоны.ОписаниеОтбораСоВсемиВозможнстями();
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Описание.ОписаниеОтбора.ДоступныеПоля.Добавить(Измерение.Имя);
	КонецЦикла;	
	
	Возврат Описание;
КонецФункции

Функция ИмяПредставления() Экспорт
	Возврат "РегистрНакопления.НарастазщиеИтоги";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	- РезультатЗапроса 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	ЧастиИмени = СтрРазделить(ПараметрыВыполнения.ИмяИсполняемогоПредставления, ".");
	ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);    
	
	СКД = Новый СхемаКомпоновкиДанных();
	Источник = СКД.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	НаборСКД = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборСКД.ИсточникДанных = "Источник";
	НаборСКД.Имя = "НачисленияУдержания";
	НаборСКД.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Для Каждого КлючЗначение Из Запрос.Параметры Цикл
		ПараметрСКД = СКД.Параметры.Добавить();
		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрСКД.Имя = КлючЗначение.Ключ;
		ПараметрСКД.ДоступенСписокЗначений = Истина;
		ПараметрСКД.Значение = КлючЗначение.Значение;
	КонецЦикла;
	
	СоответсвиеРесурсов = Новый Соответствие;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		СоответсвиеРесурсов.Вставить(ВРег(Ресурс.Имя + "НарастающийИтог"), Ресурс.Имя); 
		СоответсвиеРесурсов.Вставить(ВРег(Ресурс.Имя + "Оборот"), Ресурс.Имя);  
	КонецЦикла;	
	
	ПараметНачалоПериода = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("НачалоПериода").Значение;  
	ПараметКонецПериода = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("КонецПериода").Значение;
	
	Периодичность = ИсполнительПредставленийУтилиты.ЗначениеПараметраКонстанты(
		"Периодичность", 
		ПараметрыВыполнения, 
		Запрос.Параметры, Истина);
	
	ШаблонЗапросаОборотов = 
	"ВЫБРАТЬ
	|	Обороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.#ИмяРегистра.Обороты(#НачалоПериода, #КонецПериода, #Периодичность, #Условие) КАК Обороты";
	
	ТекстЗапросаОбороты = СтрЗаменить(ШаблонЗапросаОборотов, "#ИмяРегистра", ИмяРегистра); 
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#Периодичность", Периодичность);      
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#НачалоПериода", "&" + ПараметНачалоПериода);
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#КонецПериода", "&" + ПараметКонецПериода);
	
	ЧастиУсловия = Новый Массив;
	Для Каждого ЭлементОтбора Из ПараметрыВыполнения.ОтборыВнешнегоЗапроса Цикл
		Если СтрНачинаетсяС(ВРег(ЭлементОтбора.ВидСравнения), "В") Тогда  
			ТекстУсловия = ЭлементОтбора.ПутьКПолю + " " + ЭлементОтбора.ВидСравнения + "(" 
				+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ЭлементОтбора.ЗначениеОтбора)
				+ ")";
		Иначе
			ТекстУсловия = ЭлементОтбора.ПутьКПолю + ЭлементОтбора.ВидСравнения  
				+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ЭлементОтбора.ЗначениеОтбора);
		КонецЕсли;
		ЧастиУсловия.Добавить(ТекстУсловия);
	КонецЦикла;
	
	ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "#Условие", СтрСоединить(ЧастиУсловия, " И "));
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаОбороты);
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];
	
	Ресурсы = Новый Массив;  
	Измерения = Новый Массив;
	ВыбранныеРесурсы = Новый Соответствие; 
	ПоляРесурсов = Новый Массив;
	ПоляДляРасчетаНарастающегоИтога = Новый Соответствие();
	Для Каждого Поле Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Если ВРег(Поле.Ключ) = "ПЕРИОД" Тогда
			Продолжить;
		КонецЕсли;	
		
		Ресурс = СоответсвиеРесурсов.Получить(ВРег(Поле.Ключ));
		Если СтрЗаканчиваетсяНа(Поле.Значение, "НАРАСТАЮЩИЙИТОГ") Тогда
			ПоляДляРасчетаНарастающегоИтога.Вставить(Ресурс, Истина);
		КонецЕсли;	
		Если Ресурс <> Неопределено Тогда
			Если ВыбранныеРесурсы.Получить(ВРег(Поле.Ключ)) <> Неопределено Тогда
				Продолжить;  
			КонецЕсли;   
			Оператор.ВыбираемыеПоля.Добавить(Ресурс + "Оборот");  
			ПоляРесурсов.Добавить(Ресурс + "Оборот");
			ВыбранныеРесурсы.Вставить(Ресурс, Истина);
			Ресурсы.Добавить(Ресурс);
		Иначе
			Оператор.ВыбираемыеПоля.Добавить(Поле.Ключ);    
			Измерения.Добавить(Поле.Ключ);
		КонецЕсли;	
	КонецЦикла;	
	
	НаборСКД.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();

	Для Каждого Ресурс Из ПоляДляРасчетаНарастающегоИтога Цикл
		ВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.Заголовок = Ресурс.Ключ + "НарастающийИтог";
		ВычисляемоеПоле.ПутьКДанным = Ресурс.Ключ + "НарастающийИтог";
		ВычисляемоеПоле.Выражение = "ВычислитьВыражение(""Сумма(" + Ресурс.Ключ + "Оборот)"", , ""Группировка"", ""Первая"", ""Текущая"", ""Период"")";
		ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Число");
	КонецЦикла;
	
	НастройкиСКД = СКД.ВариантыНастроек.Добавить().Настройки;
	Группа = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи = Группа.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	Для Каждого Измерение Из Измерения Цикл
		Поле = Группа.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(Измерение);
		Поле.Использование = Истина;
		
		Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(Измерение);
		Поле.Использование = Истина;
	КонецЦикла;       

	Для Каждого Ресурс Из Ресурсы Цикл		
		Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(Ресурс + "Оборот");
		Поле.Использование = Истина;
	КонецЦикла; 	
	
	Для Каждого Ресурс Из ПоляДляРасчетаНарастающегоИтога Цикл
		Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ + "НарастающийИтог");
		Поле.Использование = Истина;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из Запрос.Параметры Цикл
		ПараметрСКД = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(КлючЗначение.Ключ));
		Если ПараметрСКД <> Неопределено Тогда
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	Поле.Использование = Истина;
	
	Поле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Период");
	Поле.Использование = Истина;
	
	ЭлементПорядка = ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Период");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД, , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	НарастающийИтог = Новый ТаблицаЗначений;
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(НарастающийИтог);
		
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);	
	
	ЗапросПомещенияВВТ = Новый Запрос();
	ЗапросПомещенияВВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПомещенияВВТ.УстановитьПараметр("Таблица", НарастающийИтог.Скопировать(Новый Структура("СистемныеПоляУровень", 2)));
	
	ЗапросПомещенияВВТ.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ " + ПараметрыВыполнения.ИмяВТРезультат + " ИЗ &Таблица КАК Таблица";
	ЗапросПомещенияВВТ.Выполнить();
	
КонецФункции                                                 

Функция ИсполняемыйКод(ПараметрыВыполнения, Знач ТекущиеТабуляции) Экспорт
КонецФункции

#КонецОбласти

#КонецЕсли
