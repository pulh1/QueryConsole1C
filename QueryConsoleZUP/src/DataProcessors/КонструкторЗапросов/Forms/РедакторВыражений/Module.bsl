	   
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресМоделиЗапроса = Параметры.АдресМоделиЗапроса;
	ИндексЗапроса = Параметры.ИндексЗапроса;   
	ИндексОператораЗапроса = Параметры.ИндексОператораЗапроса; 
	
	МодельЗапроса = ПолучитьИзВременногоХранилища(АдресМоделиЗапроса);
	КонструкторЗапросовФормы.МодельЗапросаВоВременноеХранилище(ЭтотОбъект, МодельЗапроса);
	
	ТекстВыражения = Параметры.ТекстВыражения;
	ЭтоВложенныйЗапрос = Параметры.ЭтоВложенныйЗапрос;
	Если ЭтоВложенныйЗапрос Тогда
		ОписаниеДоступныхВТВоВременноеХранилище(
			ПолучитьИзВременногоХранилища(Параметры.АдресСпискаДоступныхВТ));
	КонецЕсли;
	
	ЗаполнитьДоступныеФункции();
	ЗаполнитьДоступныеПоля();
КонецПроцедуры
	     
Процедура ЗаполнитьДоступныеФункции()
    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ФункцииЯзыка");
	Строка = 2;
	КолонкаУровня = "C1";
	КолонкаПереведенногоИмени = "C6";
	
	КолонкаЗначение = "C2";
	КолонкаИмя = "C3";

	ЭлементыДерева = ДоступныеФункции.ПолучитьЭлементы();
	Родитель = Новый Структура("Уровень", -1);
	ПоследнийЭлемент = Неопределено;
	Уровень = Макет.Область("R" + Строка + КолонкаУровня).Текст;
	Пока Уровень <> "-1" Цикл 
		Если Уровень = "" Тогда 
			Уровень = ПоследнийЭлемент.Уровень + 1;
			Картинка = -1;
			ЭтоФункция = Ложь;
			Имя = Макет.Область("R" + Строка + КолонкаИмя).Параметр;
		Иначе 
			Уровень = Число(Уровень);
			Картинка = 0;
			ЭтоФункция = Истина;
			Имя = Макет.Область("R" + Строка + КолонкаПереведенногоИмени).Текст;
		КонецЕсли;

		Если Уровень - Родитель.Уровень = 1 Тогда
			НовыйЭлемент = ЭлементыДерева.Добавить();
		ИначеЕсли   Уровень - Родитель.Уровень > 1 Тогда
			Родитель = ПоследнийЭлемент;
			ЭлементыДерева = Родитель.ПолучитьЭлементы();
			НовыйЭлемент = ЭлементыДерева.Добавить();
		ИначеЕсли Уровень - Родитель.Уровень < 1 Тогда
			Пока Уровень - Родитель.Уровень < 1 Цикл
				Родитель = Родитель.ПолучитьРодителя();
				ЭлементыДерева = Родитель.ПолучитьЭлементы();
			КонецЦикла;
			НовыйЭлемент = ЭлементыДерева.Добавить();
		КонецЕсли;

		НовыйЭлемент.Уровень = Уровень;
		НовыйЭлемент.Картинка = Картинка;
		НовыйЭлемент.Представление = Имя;
		НовыйЭлемент.Значение = Макет.Область("R" + Строка + КолонкаЗначение).Параметр;

		Строка = Строка + 1;
		Уровень = Макет.Область("R" + Строка + КолонкаУровня).Текст;

		Если ЭтоФункция Тогда
			ПоследнийЭлемент = НовыйЭлемент;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДоступныеПоля()
	ТекущийОператор = КонструкторЗапросовФормы.ТекущийОператорЗапроса(ЭтотОбъект);
	
	КонструкторЗапросовФормы.ЗаполнитьВыбранныеПоляЗапроса(Поля, ТекущийОператор.ВыбираемыеПоля, ТекущийОператор); 
	
	ГруппаВсеПоля = КонструкторЗапросовФормы.НовыйГруппаВсеПоля();
	
	Если ТекущийОператор.Источники.Элементы.Количество() > 0 Тогда
		ГруппаВсеПоля.Пустой = Ложь;
	КонецЕсли;	 
	
	Схема = Новый СхемаЗапроса;
	ДоступныеТаблицыИБ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы;   
	Узел = КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(Поля, ГруппаВсеПоля, ДоступныеТаблицыИБ); 
	
	КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(Узел, ТекущийОператор.Источники, ДоступныеТаблицыИБ); 
КонецПроцедуры	

&НаКлиенте
Процедура ПоляПередРазворачиванием(Элемент, Строка, Отказ) 
	ТипЭлемента = Поля.НайтиПоИдентификатору(Строка).ТипЗначения;
	Если КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТипЭлемента, "ГруппаВсеПоля") Тогда
		Возврат;
	КонецЕсли;	
	ЗаполнитьДочерниеЭлементыДереваДоступныхПолей(Строка, "Поля");
КонецПроцедуры  

Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхПолей(Строка, ИмяПриемника)   
	Схема = Новый СхемаЗапроса;
	ДоступныеТаблицыИБ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы;   
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	Если ЭтоВложенныйЗапрос Тогда
		ОписаниеДоступныхВТ = ОписаниеДоступныхВТИзВременногоХранилища();
		ТекущийЗапрос = МодельЗапроса;
	Иначе	
		ОписаниеДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
		ТекущийЗапрос = МодельЗапроса.Элементы[ИндексЗапроса];
	КонецЕсли;	
	
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект[ИмяПриемника],    
		ТекущийЗапрос.Операторы[ИндексОператораЗапроса],
		ДоступныеТаблицыИБ, 
		ОписаниеДоступныхВТ);	
КонецПроцедуры	

&НаКлиенте
Процедура ПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)     
	СтрокаТаблицы = Поля.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		Выражение = СтрокаТаблицы.Представление;
	Иначе	
		Выражение = КонструкторЗапросовКлиентСерверФормы.ВыражениеВыбираемогоПоля(СтрокаТаблицы);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Выражение) Тогда
		Модифицированность = Истина;   
		Элементы.ТекстВыражения.ВыделенныйТекст = Выражение;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)     
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	ПараметрыЗакрытия = ПараметрыЗакрытия(); 
	
	ВыполнитьОбработкуОповещения(ЭтотОбъект.ОписаниеОповещенияОЗакрытии, ПараметрыЗакрытия);
	
	Закрыть();	
КонецПроцедуры    

&НаКлиенте
Функция ПараметрыЗакрытия()
	Возврат Новый Структура("Модифицированность, ТекстВыражения", Модифицированность, ТекстВыражения);	
КонецФункции	

&НаКлиенте
Процедура ДоступныеФункцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) Тогда   
		Элементы.ТекстВыражения.ВыделенныйТекст = Элемент.ТекущиеДанные.Значение;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ОписаниеДоступныхВТИзВременногоХранилища(ДляИзменения = Ложь)
	ОписаниеДоступныхВТ = ПолучитьИзВременногоХранилища(АдресСпискаДоступныхВТ);
	Если Не ДляИзменения Тогда
		ОписаниеДоступныхВТВоВременноеХранилище(ОписаниеДоступныхВТ);	
	КонецЕсли;
	
	Возврат ОписаниеДоступныхВТ;
КонецФункции	   

&НаСервере
Процедура ОписаниеДоступныхВТВоВременноеХранилище(ОписаниеДоступныхВТ)
	АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(ОписаниеДоступныхВТ, УникальныйИдентификатор);
КонецПроцедуры	
