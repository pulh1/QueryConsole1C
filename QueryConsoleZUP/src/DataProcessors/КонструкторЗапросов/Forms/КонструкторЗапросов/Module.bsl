
// BSLLS-off

#Область ОписаниеПеременных

//@skip-check bsl-variable-name-invalid
&НаСервере
Перем мКартинкиПоТипам; 
//@skip-check bsl-variable-name-invalid
&НаСервере  
Перем _схема;

#КонецОбласти
 
 #Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтоВложенныйЗапрос = Параметры.ЭтоВложенныйЗапрос;
	Если ЭтоВложенныйЗапрос Тогда
		ОписаниеДоступныхВТ = ПолучитьИзВременногоХранилища(Параметры.АдресСпискаДоступныхВТ);
		КонструкторЗапросовФормы.ОписаниеДоступныхВТВоВременноеХранилище(ЭтотОбъект, ОписаниеДоступныхВТ);
	КонецЕсли;		
	
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();	
	ЗаполнитьСписокДоступныхТаблиц(ДоступныеТаблицыИБ);   
	
	Если ЗначениеЗаполнено(Параметры.АдресМоделиЗапроса) Тогда  
		МодельЗапроса = ПолучитьИзВременногоХранилища(Параметры.АдресМоделиЗапроса);
		Если ЭтоВложенныйЗапрос Тогда
			МодельЗапроса = МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(МодельЗапроса);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(Параметры.ИсходныйТекстЗапроса) Тогда
		МодельЗапроса = ОбработкаМоделиЗапроса.РазобратьЗапрос(Параметры.ИсходныйТекстЗапроса);
	Иначе	
		МодельЗапроса = МодельЗапросаУтилиты.СоздатьПакетЗапросов();
	КонецЕсли;	    
	КонструкторЗапросовФормы.МодельЗапросаВоВременноеХранилище(ЭтотОбъект, МодельЗапроса);
	
	ИндексОператораЗапроса = 0;
	ИндексЗапроса = Параметры.ИндексЗапросаПакета;
	Если Не ЭтоВложенныйЗапрос Тогда 
		ЗаполнитьСписокЗапросов(МодельЗапроса);
	КонецЕсли;	
	
	ЗапросВДанные(МодельЗапроса);    
	НастроитьЭлементыФормы();
КонецПроцедуры    

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбиратьРазрешенныеПриИзменении(Элемент)
	ВыбиратьРазрешенныеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПервыхЗаписейПриИзменении(Элемент)
	ВыбиратьПервыеЗаписиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьПервыеЗаписиПриИзменении(Элемент)
	ВыбиратьПервыеЗаписиПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьУникальныеЗаписиПриИзменении(Элемент)
	ВыбиратьУникальныеЗаписиПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеТаблицы

&НаКлиенте
Процедура ДоступныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ДоступныеТаблицы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущаяСтрока.ЭтоИсполняемоеПредставление Тогда
		ИмяТаблицыПредставления = ТекущаяСтрока.Имя;
		ОткрытьРедакторПараметровПредставления(ИмяТаблицыПредставления);
	Иначе	
		ДоступныеТаблицыВыборНаСервере(ВыбраннаяСтрока);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ДоступныеТаблицыПередРазворачиванием(Элемент, Строка, Отказ)
	ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(Строка, "ДоступныеТаблицы");
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсточники

&НаКлиенте
Процедура ИсточникиПередРазворачиванием(Элемент, Строка, Отказ)
	ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(Строка, "Источники");
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Источники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если КонструкторЗапросовКлиентСерверФормы.ЭтоПоле(СтрокаТаблицы) Тогда
		Выражение = КонструкторЗапросовКлиентСерверФормы.ВыражениеВыбираемогоПоля(СтрокаТаблицы);	
		ДобавитьПоле(Выражение); 
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ИсточникиПередУдалением(Элемент, Отказ)
	Если Элементы.Источники.ТекущиеДанные.ИндексИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьИсточник(Элементы.Источники.ТекущиеДанные.ИндексИсточника);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не ЗначениеЗаполнено(Элементы.Источники.ТекущиеДанные.ИмяТаблицы) Тогда
		Элемент.ЗакончитьРедактированиеСтроки(Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элементы.Источники.ТекущиеДанные.ИмяТаблицы) Тогда
		Элементы.Источники.ЗакончитьРедактированиеСтроки(Истина);
	КонецЕсли;	
	
	ИзменитьПсевдонимИсточника(Элементы.Источники.ТекущаяСтрока, Текст);
//	
//	Элементы.Источники.ТекущиеДанные.Представление = Текст;
//	Элементы.Источники.ТекущиеДанные.Псевдоним = Текст;
	
	Элементы.Источники.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКомандТаблицыИсточники();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПакетЗапросов

&НаКлиенте
Процедура ПакетЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПакетЗапросовВыборНаСервере(); 
	Если ЭтоЗапросУничтожения Тогда
		Элементы.ЗапросСтраницы.ТекущаяСтраница = Элементы.НастройкиЗапросаСтраница;	
	Иначе
		Элементы.ЗапросСтраницы.ТекущаяСтраница = Элементы.ТаблицыИПоляЗапроса; 
		РазвернутьДеревоСоединений();
	КонецЕсли;	
КонецПроцедуры  

&НаКлиенте
Процедура ПакетЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьЗапросВПакет();
КонецПроцедуры

&НаКлиенте
Процедура ПакетЗапросовПередУдалением(Элемент, Отказ)
	УдалитьЗапрос();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляЗапроса

&НаКлиенте
Процедура ПоляЗапросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина; 
	ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
	ПараметрыРедактораВыражений.ТекстВыражения = "";
	
	ПараметрыОповещения = Новый Структура("ИндексПоля", Неопределено);
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеПоляОператора", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);  
КонецПроцедуры 

&НаКлиенте
Процедура ПоляЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = ПоляЗапроса.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
	ПараметрыРедактораВыражений.ТекстВыражения = СтрокаТаблицы.Представление;
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИндексПоля", СтрокаТаблицы.ИндексПоля);
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеПоляОператора", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);  
КонецПроцедуры

&НаКлиенте
Процедура ПоляЗапросаПередУдалением(Элемент, Отказ)
	ТекущаяСтрока = Элементы.ПоляЗапроса.ТекущаяСтрока;
	УдалитьПолеОператора(Элементы.ПоляЗапроса.ТекущиеДанные.ИндексПоля);
	Если ТекущаяСтрока <> 0 Тогда
		Элементы.ПоляЗапроса.ТекущаяСтрока = ТекущаяСтрока - 1;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъединения

&НаКлиенте
Процедура ОбъединенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьОператорЗапроса();
КонецПроцедуры


&НаКлиенте
Процедура ОбъединенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбъединенияВыборНаСервере(Элементы.Объединения.ТекущаяСтрока);
	Элементы.ЗапросСтраницы.ТекущаяСтраница = Элементы.ТаблицыИПоляЗапроса;
КонецПроцедуры

&НаКлиенте
Процедура ОбъединенияБезДубликатовПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.Объединения.ТекущиеДанные;
	ИндексОператора = Объединения.Индекс(СтрокаТаблицы);
	ОбъединитьВсе = Не СтрокаТаблицы.БезДубликатов;
	УстановитьТипОбъединения(ИндексОператора, ОбъединитьВсе);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоединения

&НаКлиенте
Процедура СоединенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтрокаДерева = Соединения.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если ЗначениеЗаполнено(СтрокаДерева.Таблица) И СтрокаДерева.ПолучитьРодителя() <> Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение; 
	Иначе 
		Выполнение = Ложь;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоединенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Строка = Неопределено 
		Или Элементы.Соединения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	СтандартнаяОбработка = Ложь;
	
	ТекущийУзел = Соединения.НайтиПоИдентификатору(Элементы.Соединения.ТекущаяСтрока);
	НовыйУзел = Соединения.НайтиПоИдентификатору(Строка);  
	
	ПсевдонимПрисоединяемойТаблицы = ТекущийУзел.Таблица;   
	ПсевдонимНовогоВладельца = НовыйУзел.Таблица;
	
	ПсевдонимПредыдущегоВладельца = Неопределено;
	Если ТекущийУзел.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
		ПсевдонимПредыдущегоВладельца = ТекущийУзел.ПолучитьРодителя().Таблица;
	КонецЕсли;	
	
	ИзменитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимНовогоВладельца, ТекущийУзел.ТипСоединения, ПсевдонимПредыдущегоВладельца); 
	РазвернутьДеревоСоединений();
КонецПроцедуры    

&НаКлиенте
Процедура СоединенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "СоединенияВыражение" Тогда
		СтандартнаяОбработка = Ложь; 
		ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
		ПараметрыРедактораВыражений.ТекстВыражения = Элементы.Соединения.ТекущиеДанные.Выражение;
		
		Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеУсловияСвязиВФорме", ЭтотОбъект);
		
		ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);	
	Иначе
		СоединениеТаблицТекст = "";
		Если ИдентификаторСтрокиПрисоединяемойТаблицы = Неопределено 
			Или Элементы.Соединения.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Элементы.Соединения.ТекущиеДанные.Таблица)
			Или ИдентификаторСтрокиПрисоединяемойТаблицы = Элементы.Соединения.ТекущаяСтрока Тогда
				
			Возврат
		КонецЕсли;
		
		СтрокаПрисоединяемойТаблицы = Соединения.НайтиПоИдентификатору(ИдентификаторСтрокиПрисоединяемойТаблицы);
		ПсевдонимПрисоединяемойТаблицы = СтрокаПрисоединяемойТаблицы.Таблица;   
		ПсевдонимНовогоВладельца = Элементы.Соединения.ТекущиеДанные.Таблица;
		
		ПсевдонимПредыдущегоВладельца = Неопределено;
		Если СтрокаПрисоединяемойТаблицы.ПолучитьРодителя().ПолучитьРодителя() <> Неопределено Тогда
			ПсевдонимПредыдущегоВладельца = СтрокаПрисоединяемойТаблицы.ПолучитьРодителя().Таблица;
		КонецЕсли;	
		
		ИзменитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимНовогоВладельца, СтрокаПрисоединяемойТаблицы.ТипСоединения, ПсевдонимПредыдущегоВладельца); 
		РазвернутьДеревоСоединений();	
	КонецЕсли; 
КонецПроцедуры	

&НаКлиенте
Процедура СоединенияВыражениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	СтандартнаяОбработка = Ложь; 
	ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
	ПараметрыРедактораВыражений.ТекстВыражения = Элемент.ТекстРедактирования;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеУсловияСвязиВФорме", ЭтотОбъект);
	
	ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);
КонецПроцедуры  

&НаКлиенте
Процедура СоединенияТипСоединенияПриИзменении(Элемент)
	ИзменитьТипСоединение();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляДляГруппировки

&НаКлиенте
Процедура ПоляДляГруппировкиПередРазворачиванием(Элемент, Строка, Отказ)
	ТипЭлемента = ПоляДляГруппировки.НайтиПоИдентификатору(Строка).ТипЗначения;
	Если КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТипЭлемента, "ГруппаВсеПоля") Тогда
		Возврат;
	КонецЕсли;	
	ЗаполнитьДочерниеЭлементыДереваДоступныхПолейГруппировки(Строка, "ПоляДляГруппировки");
КонецПроцедуры  

&НаКлиенте
Процедура ПоляДляГруппировкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДобавитьГруппировкуНаСервере(ВыбраннаяСтрока);
КонецПроцедуры     

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПсевдонимы

&НаКлиенте
Процедура ПсевдонимыИмяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
	
	ИзменитьПсевдонимПоля(Элементы.Псевдонимы.ТекущаяСтрока, Текст);
	
	Элементы.Псевдонимы.ЗакончитьРедактированиеСтроки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПсевдонимыЗапросНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИндексОператора = Число(СтрЗаменить(Элемент.Имя, "ПсевдонимыЗапрос", "")) - 1;
	ДанныеВыбора = СписокВыбораПолейОператораЗапроса(ИндексОператора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПсевдонимыЗапросОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексОператора = Число(СтрЗаменить(Элемент.Имя, "ПсевдонимыЗапрос", "")) - 1;
	ИдентификаторСтроки = Элементы.Псевдонимы.ТекущаяСтрока;
	ИндексКолонки = Псевдонимы.Индекс(Псевдонимы.НайтиПоИдентификатору(ИдентификаторСтроки));
	
	СвязатьПолеОператораСКолонкойЗапроса(ИндексОператора, ИндексКолонки, ВыбранноеЗначение);
	
	Элементы.Псевдонимы.ТекущаяСтрока = ИдентификаторСтроки;
	Элементы.Псевдонимы.ТекущийЭлемент = Элементы["ПсевдонимыЗапрос" + Формат(ИндексОператора + 1, "ЧГ=;")];
КонецПроцедуры

&НаКлиенте
Процедура ПсевдонимыПередУдалением(Элемент, Отказ)
	Индекс = Элементы.Псевдонимы.ТекущиеДанные.Индекс;
	УдалитьКолонкуЗапроса(Индекс);
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляДоступныеДляОтбора

&НаКлиенте
Процедура ПоляДоступныеДляОтбораПередРазворачиванием(Элемент, Строка, Отказ)
	ЗаполнитьДочерниеЭлементыДереваДоступныхДляУсловийПолей(Строка, "ПоляДоступныеДляОтбора");
КонецПроцедуры

&НаКлиенте
Процедура ПоляДоступныеДляОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоляДоступныеДляОтбораВыборНаСервере(ВыбраннаяСтрока);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловия

&НаКлиенте
Процедура УсловияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина; 
	ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
	ПараметрыРедактораВыражений.ТекстВыражения = "";
	
	ПараметрыОповещения = Новый Структура("ИндексУсловия, ЭтоОтборСгруппированных");
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеУсловия", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);  
КонецПроцедуры

&НаКлиенте
Процедура УсловияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Условия.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
	ПараметрыРедактораВыражений.ТекстВыражения = СтрокаТаблицы.Условие;
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИндексУсловия", СтрокаТаблицы.Индекс);
	ПараметрыОповещения.Вставить("ЭтоОтборСгруппированных", СтрокаТаблицы.ЭтоОтборСгруппированных);
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеУсловия", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);  
КонецПроцедуры

&НаКлиенте
Процедура УсловияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьОтбор(Элементы.Условия.ТекущиеДанные.Индекс, Элементы.Условия.ТекущиеДанные.ЭтоОтборСгруппированных);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгрегируемыеПоля

&НаКлиенте
Процедура АгрегируемыеПоляПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокДоступныхАгрегатныхФункций(Элементы.АгрегируемыеПоля.ТекущиеДанные.ИндексПоля);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ПараметрыРедактораВыражений = ПараметрыРедактораВыражений();   
		ПараметрыРедактораВыражений.ТекстВыражения = Элементы.АгрегируемыеПоля.ТекущиеДанные.Представление;
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИндексПоля", Элементы.АгрегируемыеПоля.ТекущиеДанные.ИндексПоля);
		Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеПоляОператора", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьРедакторВыражений(ПараметрыРедактораВыражений, Оповещение);  	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АгрегируемыеПоляПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьАгрегатнуюФункциюДляПоля(Элементы.АгрегируемыеПоля.ТекущиеДанные.ИндексПоля, ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыВсеПоляДляИндексации

&НаКлиенте
Процедура ВсеПоляДляИндексацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДобавитьИндексНаСервере(Элементы.ВсеПоляДляИндексации.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИндексы

&НаКлиенте
Процедура ИндексыПередУдалением(Элемент, Отказ)
	УдалитьИндексНаСервере(Элементы.Индексы.ТекущаяСтрока);
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляДляУпорядочивания

&НаКлиенте
Процедура ПоляДляУпорядочиванияПередРазворачиванием(Элемент, Строка, Отказ)
	ТипЭлемента = ПоляДляУпорядочивания.НайтиПоИдентификатору(Строка).ТипЗначения;
	Если КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТипЭлемента, "ГруппаВсеПоля") Тогда
		Возврат;
	КонецЕсли;	
	ЗаполнитьДочерниеЭлементыДереваДоступныхДляУсловийПолей(Строка, "ПоляДляУпорядочивания");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПорядокПередУдалением(Элемент, Отказ)
	УдалитьЭлементПорядка(Элементы.Порядок.ТекущаяСтрока);
	Отказ = Истина;
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПолеИтогов(Команда)
	ДобавитьПолеИтоговНаСервере(Элементы.ПоляДоступныеДляИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТаблицы(Команда)
	ОткрытьРедакторПараметровПредставления(Элементы.Источники.ТекущиеДанные.Имя, Элементы.Источники.ТекущиеДанные.Псевдоним);		
КонецПроцедуры

&НаКлиенте
Процедура OK(Команда)
	ПараметрыЗакрытия = ПараметрыЗакрытия(); 
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПараметрыЗакрытия);
	
	Закрыть();	
КонецПроцедуры   

&НаКлиенте
Процедура ДобавитьАгрегируемоеПоле(Команда)
	ДобавитьАгрегируемоеПолеНаСервере(Элементы.ПоляДляГруппировки.ТекущаяСтрока);	
КонецПроцедуры     
 
&НаКлиенте
Процедура УдалитьАгрегированиеДляПоля(Команда)
	Если Элементы.АгрегируемыеПоля.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьАгрегированиеДляПоляНаСервере(Элементы.АгрегируемыеПоля.ТекущиеДанные.ИндексПоля);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАгрегированиеДляВсехПолей(Команда)
	УдалитьАгрегированиеДляВсехПолейНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура УдалитьГруппировку(Команда)
	Если Элементы.ГруппируемыеПоля.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьГруппировкуНаСервере(Элементы.ГруппируемыеПоля.ТекущиеДанные.ИндексПоля);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеГруппировки(Команда)
	УдалитьВсеГруппировкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВложенныйЗапрос(Команда)
	ПараметрыРедактора = ПараметрыОткрытияВложенногоЗапроса();
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеВложенногоЗапроса", 
		ЭтотОбъект, Новый Структура("ИдентификаторИсточника", Неопределено));
	
	КонструкторЗапросовКлиент.ОткрытьРедакторЗапроса(ПараметрыРедактора, ЭтотОбъект, Оповещение); 
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсточникЗапроса(Команда)
	Если Элементы.Источники.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Источники.ТекущиеДанные.ТипЗначения = "ИсточникДанныхВложенныйЗапрос" Тогда
		ПараметрыРедактора = ПараметрыОткрытияВложенногоЗапроса(Элементы.Источники.ТекущиеДанные.ИдентификаторИсточника);
		
		Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеВложенногоЗапроса", 
			ЭтотОбъект, Новый Структура("ИдентификаторИсточника", Элементы.Источники.ТекущиеДанные.ИдентификаторИсточника));
		
		КонструкторЗапросовКлиент.ОткрытьРедакторЗапроса(ПараметрыРедактора, ЭтотОбъект, Оповещение); 
	ИначеЕсли Элементы.Источники.ТекущиеДанные.ТипЗначения = "ИсточникДанныхВременнаяТаблица" Тогда 
		ПараметрыРедактора = ПараметрыОткрытияРедактораОписанияВТ(Элементы.Источники.ТекущиеДанные.ИндексИсточника);
		Если ПараметрыРедактора.ИндексЗапросаСоздания = -1 Тогда
			Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеОписанияВТ", 
				ЭтотОбъект, Новый Структура("ИндексИсточника", Элементы.Источники.ТекущиеДанные.ИндексИсточника));
			
			ОткрытьФорму(
				"Обработка.КонструкторЗапросов.Форма.РедакторОписанияВТ", 
				ПараметрыРедактора,
				ЭтотОбъект, , , ,
				Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		Иначе
			Если ЭтоВложенныйЗапрос Тогда
				ТекстПредупреждения = "Переход к запросу создания временной таблицы из редактора вложенного запроса не возможен.";
				ПредупреждениеАсинх(ТекстПредупреждения);
			Иначе
				АктивироватьРедактированиеЗапроса(ПараметрыРедактора.ИндексЗапросаСоздания);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЗапросУничтожения(Команда)
	ДобавитьЗапросУничтоженияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗапросВверх(Команда)
	СдвинутьЗапросСервере(-1);
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЗапросВниз(Команда)

	СдвинутьЗапросСервере(1);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОписаниеВременнойТаблицы(Команда)
	ПараметрыРедактора = ПараметрыОткрытияРедактораОписанияВТ();
	Если ПараметрыРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеОписанияВТ", 
		ЭтотОбъект, Новый Структура("ИндексИсточника"));
		
	ОткрытьФорму(
		"Обработка.КонструкторЗапросов.Форма.РедакторОписанияВТ", 
		ПараметрыРедактора,
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
КонецПроцедуры

&НаКлиенте
Процедура СоединитьТаблицы(Команда)
	ИдентификаторСтрокиПрисоединяемойТаблицы = Неопределено;
	Если Элементы.Соединения.ТекущаяСтрока = Неопределено 
		Или Не ЗначениеЗаполнено(Элементы.Соединения.ТекущиеДанные.Таблица) Тогда
		Возврат;
	КонецЕсли; 
	ИдентификаторСтрокиПрисоединяемойТаблицы = Элементы.Соединения.ТекущаяСтрока;
	СоединениеТаблицТекст = Нстр("ru='Укажите, с каким источником создать связь (дважды кликните по нужной строке)'");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировку(Команда)
	ДобавитьГруппировкуНаСервере(Элементы.ПоляДляГруппировки.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры


&НаКлиенте
Процедура СдвинутьЭлементПорядкаВВерх(Команда)
	СдвинутьЭлементПорядка(-1);
КонецПроцедуры

&НаКлиенте
Процедура OrderMoveDown(Команда)
	СдвинутьЭлементПорядка(1);
КонецПроцедуры

&НаКлиенте
Процедура СдивнутьИндексВВерх(Команда)
	СдвинутьИндекс(-1)
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьИндексВНиз(Команда)
	СдвинутьИндекс(1)
КонецПроцедуры


&НаКлиенте
Процедура СдвинутьКолонкуЗапросаВВерх(Команда)
	СдвинутьКолонкуЗапроса(-1);
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьКолонкуЗапросаВНиз(Команда)
	СдвинутьКолонкуЗапроса(1);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.СоединенияСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ГруппировкаСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.УсловияСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.МодификаторыЗапросаГруппа.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТипЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ОбъединенияСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ИндексСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ПорядокСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ИтогиСтраница.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения;
	Элементы.ТаблицыИПоляЗапроса.Видимость = Не ЭтоЗапросУничтожения; 
	
	Если ЭтоЗапросУничтожения Тогда
		Элементы.НастройкиЗапросаСтраница.Заголовок = "Уничтожаемая таблица";
	Иначе
		Элементы.НастройкиЗапросаСтраница.Заголовок = "Дополнительно";
		
		Элементы.ТипЗапросаГруппа.Видимость = Не ЭтоВложенныйЗапрос;
		Элементы.ИндексСтраница.Видимость = Не ЭтоВложенныйЗапрос;
		Элементы.ИтогиСтраница.Видимость = Не ЭтоВложенныйЗапрос;
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокЗапросов(МодельЗапроса)
	Номер = 1;
	
	ПакетЗапросов.Очистить();
	Для Каждого ЭлементПакета Из МодельЗапроса.Элементы Цикл    
		СтрокаТаблицы = ПакетЗапросов.Добавить();
		Если ЭлементПакета.Тип = "ЗапросУничтожения" Тогда 
			СтрокаТаблицы.Имя = "- " + ЭлементПакета.ИмяТаблицы;
		ИначеЕсли ЗначениеЗаполнено(ЭлементПакета.ТаблицаДляПомещения) Тогда
			СтрокаТаблицы.Имя = ЭлементПакета.ТаблицаДляПомещения;	
		Иначе
			СтрокаТаблицы.Имя = "Запрос выбора " + Номер;
			Номер = Номер + 1;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ЗапросВДанные(МодельЗапроса)
	Если ЭтоВложенныйЗапрос 
		Или МодельЗапроса.Элементы[ИндексЗапроса].Тип = "ЗапросВыбора" Тогда
		
		ЗапросВыбораВДанные(МодельЗапроса);	
	Иначе
		ЗапросУничтоженияВДанные(МодельЗапроса);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗапросВыбораВДанные(МодельЗапроса)
	ЭтоЗапросУничтожения = Ложь;
	
	Если ЭтоВложенныйЗапрос Тогда
		ОписаниеДоступныхВТ = КонструкторЗапросовФормы.ОписаниеДоступныхВТИзВременногоХранилища(ЭтотОбъект); 
		ТекущийЗапрос = МодельЗапроса;
	Иначе
		ОписаниеДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса); 
		КонструкторЗапросовФормы.ОписаниеДоступныхВТВоВременноеХранилище(ЭтотОбъект, ОписаниеДоступныхВТ);  
		
		ТекущийЗапрос = МодельЗапроса.Элементы[ИндексЗапроса];
	КонецЕсли;	
		
	ЗаполнитьСписокДоступныхВременныхТаблиц(ОписаниеДоступныхВТ); 
	
	ВыбиратьРазрешенные = ТекущийЗапрос.ВыбиратьРазрешенные;   
	
	Если ЗначениеЗаполнено(ТекущийЗапрос.ТаблицаДляПомещения) Тогда 
		ТипЗапроса = 1;  
		ИмяВременнойТаблицы = ТекущийЗапрос.ТаблицаДляПомещения;
	Иначе 
		ТипЗапроса = 0;  
		ИмяВременнойТаблицы = "";
	КонецЕсли;	
	
	ТекущееКоличествоОператоров = Объединения.Количество(); 
	НовоеКоличествоОператоров = ТекущийЗапрос.Операторы.Количество(); 
	
	Объединения.Очистить();
	Псевдонимы.Очистить();
	
	СоздатьЭлементыОтбораженияПсевдонимовПолей(ТекущееКоличествоОператоров, НовоеКоличествоОператоров);
	ЗаполнитьРазделОбъединенияПсевдонимы(ТекущийЗапрос);
	
	ОператорЗапросаВДанные(ТекущийЗапрос.Операторы[ИндексОператораЗапроса]);
	ЗаполнитьРазделПорядок(ТекущийЗапрос);
	ЗаполнитьРазделИтоги(ТекущийЗапрос); 
	ЗаполнитьРазделИндексы(ТекущийЗапрос);
КонецПроцедуры    

&НаСервере
Процедура ЗапросУничтоженияВДанные(МодельЗапроса)
	ЭтоЗапросУничтожения = Истина;
	ЭтоВложенныйЗапрос = Ложь;
	
	Если МодельЗапроса.Элементы[ИндексЗапроса].ОписаниеВТ <> Неопределено Тогда
		ИмяВременнойТаблицы = МодельЗапроса.Элементы[ИндексЗапроса].ОписаниеВТ.Имя;
	Иначе
		ИмяВременнойТаблицы  = МодельЗапроса.Элементы[ИндексЗапроса].ИмяТаблицы;
	КонецЕсли;
	
	// TODO заполнитб список выбора ВТ
КонецПроцедуры    

&НаСервере
Процедура ЗаполнитьРазделОбъединенияПсевдонимы(ЗапросВыбора)
	Объединения.Очистить();
	Псевдонимы.Очистить();
	
	Индекс = 0;
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл 
		СтрокаТаблицы = Псевдонимы.Добавить();
		СтрокаТаблицы.Имя = Колонка.Имя;
		СтрокаТаблицы.Картинка = 30;
		СтрокаТаблицы.Индекс = Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;	
	
	Номер = 1;
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл  
		ПоляОператора = МодельЗапросаУтилиты.ПоляОператораПоПсевдонимам(Оператор);	
		СтрокаТаблицы = Объединения.Добавить();
		СтрокаТаблицы.Имя = "Запрос" + Номер;
		СтрокаТаблицы.БезДубликатов = Оператор.ТипОбъединения = "Объединить";  
		
		ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
		ГенераторТекстов.УстановитьИсточники(Оператор.Источники.Элементы);
		Для ИндексКолонки = 0 По ЗапросВыбора.Колонки.ВГраница() Цикл
			СтрокаТаблицы = Псевдонимы[ИндексКолонки];
			Поле = ПоляОператора.Получить(ВРег(ЗапросВыбора.Колонки[ИндексКолонки].Имя));
			Если Поле = Неопределено Тогда
				СтрокаТаблицы["Запрос" + Номер] = "<Отсутствует>";
			Иначе
				СтрокаТаблицы["Запрос" + Номер] = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Поле.Выражение, ГенераторТекстов);
			КонецЕсли;
		КонецЦикла;		
		Номер = Номер + 1;
	КонецЦикла;		
КонецПроцедуры	

&НаСервере
Процедура СоздатьЭлементыОтбораженияПсевдонимовПолей(ТекущееКоличествоОператоров, НовоеКоличествоОператоров)
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	Для Сч = НовоеКоличествоОператоров + 1 По ТекущееКоличествоОператоров Цикл
		УдаляемыеРеквизиты.Добавить("Псевдонимы.Запрос" + Сч);
		УдаляемыйЭлемент = Элементы.Найти("ПсевдонимыЗапрос" + Сч);
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;	 
	
	Для Сч = ТекущееКоличествоОператоров + 1 По НовоеКоличествоОператоров Цикл
		Реквизит = Новый РеквизитФормы("Запрос" + Сч, Новый ОписаниеТипов("Строка"), "Псевдонимы", , Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;	
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты); 
	
	Для Сч = ТекущееКоличествоОператоров + 1 По НовоеКоличествоОператоров Цикл
		Элемент = Элементы.Добавить("ПсевдонимыЗапрос" + Сч, Тип("ПолеФормы"), Элементы.Псевдонимы);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;  
		Элемент.ПутьКДанным = "Псевдонимы.Запрос" + Сч; 
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ПсевдонимыЗапросНачалоВыбора");
		Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПсевдонимыЗапросОбработкаВыбора");
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОператорЗапросаВДанные(ОператорЗапроса)    	
	ИдентификаторСтрокиПрисоединяемойТаблицы = Неопределено;
	
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();
	ДобавитьТаблицыЗапроса(ОператорЗапроса.Источники, ДоступныеТаблицыИБ);	 
	ЗаполнитьСоединения(ОператорЗапроса.Источники);  
	ПоляЗапроса.ПолучитьЭлементы().Очистить();
	
	КонструкторЗапросовФормы.ЗаполнитьВыбранныеПоляЗапроса(ПоляЗапроса, ОператорЗапроса.ВыбираемыеПоля, ОператорЗапроса); 
	
	ВыбиратьПервыеЗаписи = ОператорЗапроса.КоличествоПолучаемыхЗаписей <> Неопределено;
	КоличествоПервыхЗаписей = ОператорЗапроса.КоличествоПолучаемыхЗаписей;	 
	ВыбиратьУникальныеЗаписи = ОператорЗапроса.ВыбиратьРазличные; 
	
	ЗаполнитьРазделГруппировка(ОператорЗапроса);
	ЗаполнитьТаблицуУсловия(ОператорЗапроса);
	ЗаполнитьПоляДоступныеДляОтбора(ОператорЗапроса);
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокДоступныхТаблиц(ДоступныеТаблицыИБ)
	КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ДоступныеТаблицы, ДоступныеТаблицыИБ, ДоступныеТаблицыИБ);	 
	
	ЭлементИерархииИсполняемыхПредставлений = КонструкторЗапросовФормы.НовыйЭлементИерархииИсполняемыхПредставлений();
	ЭлементИерархииИсполняемыхПредставлений.Идентификатор = "Представления";  
	ЭлементИерархииИсполняемыхПредставлений.Наименование = "Представления"; 
	ЭлементИерархииИсполняемыхПредставлений.ЭтоГруппа = Истина;
	
	КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ДоступныеТаблицы, ЭлементИерархииИсполняемыхПредставлений, ДоступныеТаблицыИБ);	
КонецПроцедуры	  

&НаСервере
Процедура ЗаполнитьСписокДоступныхВременныхТаблиц(ОписаниеДоступныхВТ)  
	КорневыеЭлементы =  ДоступныеТаблицы.ПолучитьЭлементы();
	Если КорневыеЭлементы.Количество() > 0
		И КорневыеЭлементы[КорневыеЭлементы.Количество() - 1].ЭтоГруппаВременныхТаблиц Тогда
		
		КорневыеЭлементы.Удалить(КорневыеЭлементы.Количество() - 1);
	КонецЕсли;	
	
	Если ОписаниеДоступныхВТ.Количество() > 0 Тогда
		КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ДоступныеТаблицы, НовыйГруппаДостпныхВременныхТаблиц(), ДоступныеТаблицыИБ());	
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРазделГруппировка(ОператорЗапроса)
	НеИспользуемыеПоля = Новый Массив;  
	ИндексыИспользуемыхПолей = Новый Массив;   
	ИндексыНеИспользуемыхПолей = Новый Массив;
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ОператорЗапроса.Источники.Элементы);
	
	ГруппируемыеПоля.Очистить();
	Индекс = 0;
	Для Каждого ЭлементГруппировки Из ОператорЗапроса.Группировка.Элементы Цикл 
		СтрокаГруппировки = ГруппируемыеПоля.Добавить();
		СтрокаГруппировки.Картинка = 30;
		СтрокаГруппировки.Представление = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ЭлементГруппировки, ГенераторТекстов);	
		СтрокаГруппировки.ИндексПоля = Индекс;
		Индекс = Индекс + 1;
		
		ИндексыПолей = МодельЗапросаУтилиты.НайтиПоляПоВыражению(ОператорЗапроса, ЭлементГруппировки);
		Для Каждого ИндексПоля Из ИндексыПолей Цикл
			Если ИндексыИспользуемыхПолей.Найти(ИндексПоля) = Неопределено Тогда
				ИндексыИспользуемыхПолей.Добавить(ИндексПоля);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла; 
	
	АгрегируемыеПоля.Очистить();
	Для Индекс = 0 По ОператорЗапроса.ВыбираемыеПоля.ВГраница() Цикл
		Поле = ОператорЗапроса.ВыбираемыеПоля[Индекс];
		
		Если Поле.Выражение.ИспользуетсяАгрегатнаяФункция Тогда
			СтрокаПоля = АгрегируемыеПоля.Добавить();
			СтрокаПоля.ИндексПоля = Индекс;
			СтрокаПоля.Картинка = 30;  
			СтрокаПоля.Представление = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Поле.Выражение, ГенераторТекстов);
		ИначеЕсли ИндексыИспользуемыхПолей.Найти(Индекс) = Неопределено Тогда
			НеИспользуемыеПоля.Добавить(Поле);	
			ИндексыНеИспользуемыхПолей.Добавить(Индекс);
		КонецЕсли;	
	КонецЦикла;	  
	
	ПоляДляГруппировки.ПолучитьЭлементы().Очистить();
	КонструкторЗапросовФормы.ЗаполнитьВыбранныеПоляЗапроса(ПоляДляГруппировки, НеИспользуемыеПоля, ОператорЗапроса);
	СтрокиПолей = ПоляДляГруппировки.ПолучитьЭлементы();
	Для Индекс = 0 По ИндексыНеИспользуемыхПолей.ВГраница() Цикл
		Строка = СтрокиПолей[Индекс];
		Строка.ИндексПоля = ИндексыНеИспользуемыхПолей[Индекс];
	КонецЦикла;	
		
	ГруппаВсеПоля = КонструкторЗапросовФормы.НовыйГруппаВсеПоля();
	
	Если ОператорЗапроса.Источники.Элементы.Количество() > 0 Тогда
		ГруппаВсеПоля.Пустой = Ложь;
	КонецЕсли;	 
	
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
	Узел = КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ПоляДляГруппировки, ГруппаВсеПоля, ДоступныеТаблицыИБ); 
	
	КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(Узел, ОператорЗапроса.Источники, ДоступныеТаблицыИБ); 	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРазделИтоги(ЗапросВыбора) 
	ИДИспользуемыхКолонок = Новый Соответствие();   
	КолонкиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(ЗапросВыбора.Колонки, "Идентификатор");
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ЗапросВыбора.Операторы[0].Источники.Элементы);
	ГенераторТекстов.УстановитьКолонки(ЗапросВыбора.Колонки);
	
	КонтрольныеТочкиИтогов.Очистить();
	Индекс = 0;
	Для Каждого КонтрольнаяТочка Из ЗапросВыбора.КонтрольныеТочкиИтогов Цикл 
		СтрокаТаблицы = КонтрольныеТочкиИтогов.Добавить();
		СтрокаТаблицы.Выражение = ГенерацияТекстовЗапросов.ВыражениеВСтроку(КонтрольнаяТочка.Выражение, ГенераторТекстов);
		СтрокаТаблицы.Индекс = Индекс;
		СтрокаТаблицы.Картинка = 30;
		СтрокаТаблицы.Псевдоним = КонтрольнаяТочка.ИмяКолонки;
		СтрокаТаблицы.ДоаолнениеПериода = КонтрольнаяТочка.ТипДополненияПериодами;
		Если ЗначениеЗаполнено(КонтрольнаяТочка.НачалоПериодаДополнения) Тогда
			СтрокаТаблицы.НачалоПериода = ГенерацияТекстовЗапросов.ВыражениеВСтроку(КонтрольнаяТочка.НачалоПериодаДополнения, ГенераторТекстов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтрольнаяТочка.КонецПериодаДополнения) Тогда
			СтрокаТаблицы.ОкончаниеПериода = ГенерацияТекстовЗапросов.ВыражениеВСтроку(КонтрольнаяТочка.КонецПериодаДополнения, ГенераторТекстов);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтрольнаяТочка.ТипКонтрольнойТочки) Тогда 
			СтрокаТаблицы.ТипКонтрольнойТочки = КонтрольнаяТочка.ТипКонтрольнойТочки;
		Иначе
			СтрокаТаблицы.ТипКонтрольнойТочки = "Элементы";
		КонецЕсли;	
		
		Если МодельЗапросаТипы.ЭтоПолеТипа(КонтрольнаяТочка.Выражение.ТипЗначения, Тип("Дата")) Тогда
			СтрокаТаблицы.ЭтоПолеТипаДата = Истина;
		КонецЕсли;	
		
		Если КонтрольнаяТочка.Выражение.Значение.Тип = "СсылкаНаКолонкуЗапроса" Тогда
			ИДИспользуемыхКолонок.Вставить(КонтрольнаяТочка.Выражение.Значение.Идентификатор, Истина);
		Иначе
			ИндексыПолей = МодельЗапросаУтилиты.НайтиПоляПоВыражению(ЗапросВыбора.Операторы[0], КонтрольнаяТочка.Выражение);
			Для Каждого ИндексПоля Из ИндексыПолей Цикл
				ИДИспользуемыхКолонок.Вставить(ЗапросВыбора.Колонки[ИндексПоля].Идентификатор, Истина);
			КонецЦикла;	
		КонецЕсли;
		
		
		Индекс = Индекс + 1;
	КонецЦикла; 
	
	ПоляИтогов.Очистить();
	Индекс = 0;
	Для Каждого ВыражениеИтогов Из ЗапросВыбора.ВыраженияИтогов Цикл
		СтрокаТаблицы = ПоляИтогов.Добавить();
		СтрокаТаблицы.ИндексПоля = Индекс;
		СтрокаТаблицы.Картинка = 30;
		СтрокаТаблицы.Выражение = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ВыражениеИтогов.Выражение, ГенераторТекстов);
		Колонка = КолонкиПоИдентификаторам[ВыражениеИтогов.Выражение.Значение.Аргумент.Идентификатор];
		СтрокаТаблицы.ЭтоКолонкаТипаСумма = МодельЗапросаТипы.ЭтоПолеТипа(Колонка.ТипЗначения, Тип("Число")); 
		СтрокаТаблицы.ИмяПоля = Колонка.Имя;
		
		ИДИспользуемыхКолонок.Вставить(ВыражениеИтогов.Выражение.Значение.Аргумент.Идентификатор, Истина);
	КонецЦикла;	  

	ПоляДоступныеДляИтогов.ПолучитьЭлементы().Очистить();
	Индекс = 0;
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл
		Если ИДИспользуемыхКолонок.Получить(Колонка.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		НовыйУзел = ПоляДоступныеДляИтогов.ПолучитьЭлементы().Добавить();
		НовыйУзел.Представление = Колонка.Имя;
		НовыйУзел.ТипЗначенияПоля = Колонка.ТипЗначения;  
		НовыйУзел.ТипЗначения = "КолонкаЗапроса"; 
		НовыйУзел.Картинка = 22;
		НовыйУзел.ИндексПоля = Индекс;
		Индекс = Индекс + 1;	
	КонецЦикла;
		
	ГруппаВсеПоля = КонструкторЗапросовФормы.НовыйГруппаВсеПоля();
	
	Если ЗапросВыбора.Операторы[0].Источники.Элементы.Количество() > 0 Тогда
		ГруппаВсеПоля.Пустой = Ложь;
	КонецЕсли;	 
	
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
	Узел = КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ПоляДоступныеДляИтогов, ГруппаВсеПоля, ДоступныеТаблицыИБ); 
	
	КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(Узел, ЗапросВыбора.Операторы[0].Источники, ДоступныеТаблицыИБ); 	
КонецПроцедуры	

// Заполнить раздел индексы.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
&НаСервере
Процедура ЗаполнитьРазделИндексы(ЗапросВыбора) 
	ИДИспользуемыхКолонок = Новый Соответствие();   
	КолонкиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(ЗапросВыбора.Колонки, "Идентификатор");
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ЗапросВыбора.Операторы[0].Источники.Элементы);
	ГенераторТекстов.УстановитьКолонки(ЗапросВыбора.Колонки);
	
	Индексы.Очистить();
	Индекс = 0;
	Для Каждого ИндексируемоеПоле Из ЗапросВыбора.Индекс.Элементы Цикл
		СтрокаТаблицы = Индексы.Добавить();
		СтрокаТаблицы.ИндексПоля = Индекс;
		СтрокаТаблицы.Картинка = 30;
		Колонка = КолонкиПоИдентификаторам[ИндексируемоеПоле.Идентификатор];
		СтрокаТаблицы.ИмяПоля = Колонка.Имя;
		
		ИДИспользуемыхКолонок.Вставить(ИндексируемоеПоле.Идентификатор, Истина);
		Индекс = Индекс + 1;
	КонецЦикла;	  

	ПоляДоступныеДляИндексации.Очистить();
	Индекс = 0;
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл
		Если ИДИспользуемыхКолонок.Получить(Колонка.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		НовыйУзел = ПоляДоступныеДляИндексации.Добавить();
		НовыйУзел.Представление = Колонка.Имя;
		НовыйУзел.ТипЗначенияПоля = Колонка.ТипЗначения;  
		НовыйУзел.ТипЗначения = "КолонкаЗапроса"; 
		НовыйУзел.Картинка = 22;
		НовыйУзел.ИндексПоля = Индекс;
		Индекс = Индекс + 1;	
	КонецЦикла;	
КонецПроцедуры	


&НаСервере
Процедура ЗаполнитьРазделПорядок(ЗапросВыбора)
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ЗапросВыбора.Операторы[0].Источники.Элементы);
	ГенераторТекстов.УстановитьКолонки(ЗапросВыбора.Колонки);
	
	ИДИспользуемыхКолонок = Новый Соответствие();
	
	Порядок.Очистить();
	Индекс = 0;
	Для Каждого ЭлементПорядка Из ЗапросВыбора.Порядок Цикл 
		СтрокаГруппировки = Порядок.Добавить();
		СтрокаГруппировки.Картинка = 30;
		СтрокаГруппировки.Представление = ГенерацияТекстовЗапросов.ВыражениеВСтроку(
			ЭлементПорядка.Выражение, 
			ГенераторТекстов);	
			
		СтрокаГруппировки.Направление = ЭлементПорядка.Направление;
		СтрокаГруппировки.Индекс = Индекс;
		
		Если ЭлементПорядка.Иерархия
			И ЭлементПорядка.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеВозрастание() Тогда
			
			СтрокаГруппировки.Направление = "ВозрастаниеИерархии";
		ИначеЕсли ЭлементПорядка.Иерархия 
			И ЭлементПорядка.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеУбывание() Тогда 
				
			СтрокаГруппировки.Направление = "УбываниеИерархии";
		ИначеЕсли ЭлементПорядка.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеУбывание() Тогда 
			СтрокаГруппировки.Направление = "Убывание";
		Иначе
			СтрокаГруппировки.Направление = "Возрастание";
		КонецЕсли;		
			
		Если ЭлементПорядка.Выражение.Значение.Тип = "СсылкаНаКолонкуЗапроса" Тогда
			ИДИспользуемыхКолонок.Вставить(ЭлементПорядка.Выражение.Значение.Идентификатор, Истина);
		КонецЕсли;	
		
		Индекс = Индекс + 1;
	КонецЦикла; 
	
	ПоляДляУпорядочивания.ПолучитьЭлементы().Очистить();
	Индекс = 0;
	Для Каждого Колонка Из ЗапросВыбора.Колонки Цикл
		Если ИДИспользуемыхКолонок.Получить(Колонка.Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		НовыйУзел = ПоляДляУпорядочивания.ПолучитьЭлементы().Добавить();
		НовыйУзел.Представление = Колонка.Имя;
		НовыйУзел.ТипЗначенияПоля = Колонка.ТипЗначения;  
		НовыйУзел.ТипЗначения = "КолонкаЗапроса"; 
		НовыйУзел.Картинка = 22;
		НовыйУзел.ИндексПоля = Индекс;
		Индекс = Индекс + 1;	
	КонецЦикла;
	
	Если ЗапросВыбора.Операторы.Количество() = 1 Тогда
		ГруппаВсеПоля = КонструкторЗапросовФормы.НовыйГруппаВсеПоля();
		Если ЗапросВыбора.Операторы[0].Источники.Элементы.Количество() > 0 Тогда
			ГруппаВсеПоля.Пустой = Ложь;
		КонецЕсли;	 
		ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
		Узел = КонструкторЗапросовФормы.ДобавитьЭлементВДеревоТаблиц(ПоляДляУпорядочивания, ГруппаВсеПоля, ДоступныеТаблицыИБ); 
	
		КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(Узел, ЗапросВыбора.Операторы[0].Источники, ДоступныеТаблицыИБ);
	КонецЕсли; 		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУсловия(ОператорЗапроса, НовыйИндекс = Неопределено, ЭтоОтборСгруппированных = Неопределено)
	Условия.Очистить();
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ОператорЗапроса.Источники.Элементы);

	Индекс = 0;
	Для Каждого Выражение Из ОператорЗапроса.Отбор Цикл
		ВыражениеСтркой = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Выражение, ГенераторТекстов);
		СтррокаУсловие = Условия.Добавить();
		СтррокаУсловие.Индекс = Индекс;
		СтррокаУсловие.Условие = ВыражениеСтркой;
		
		Если Индекс = НовыйИндекс
			И ЭтоОтборСгруппированных = Ложь Тогда	
			Элементы.Условия.ТекущаяСтрока = СтррокаУсловие.ПолучитьИдентификатор();
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;	
		
	Индекс = 0;
	Для Каждого Выражение Из ОператорЗапроса.ОтборСгруппированных Цикл
		ВыражениеСтркой = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Выражение, ГенераторТекстов);
		СтррокаУсловие = Условия.Добавить();
		СтррокаУсловие.Индекс = Индекс;
		СтррокаУсловие.Условие = ВыражениеСтркой;
		СтррокаУсловие.ЭтоОтборСгруппированных = Истина;
		
		Если Индекс = НовыйИндекс
			И ЭтоОтборСгруппированных = Истина Тогда	
			Элементы.Условия.ТекущаяСтрока = СтррокаУсловие.ПолучитьИдентификатор();
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляДоступныеДляОтбора(ОператорЗапроса)
	ПоляДоступныеДляОтбора.ПолучитьЭлементы().Очистить();
	КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(ПоляДоступныеДляОтбора, ОператорЗапроса.Источники, ДоступныеТаблицыИБ()); 
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицыЗапроса(ИсточникиДанных, ДоступныеТаблицыИБ)
	КонструкторЗапросовФормы.ДобавитьТаблицыЗапроса(Источники, ИсточникиДанных, ДоступныеТаблицыИБ);  	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнитьСоединения(ИсточникиДанных)
	ИдентификаторСтрокиПрисоединяемойТаблицы = Неопределено;
	СоединениеТаблицТекст = "";
	Соединения.ПолучитьЭлементы().Очистить();
	
	СтрокиДереваПоПсевданимам = Новый Соответствие;
	Для Каждого Источник Из Источники.ПолучитьЭлементы() Цикл  
		СтрокиДереваПоПсевданимам.Вставить(Источник.Псевдоним, Источник);
	КонецЦикла;	 
	
	КорневойУзелСоединений = Соединения.ПолучитьЭлементы().Добавить();
	КорневойУзелСоединений.Таблица = "Таблицы";
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(ИсточникиДанных.Элементы);
	ИсточникиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(ИсточникиДанных.Элементы, "ИдентификаторИсточника"); 
	
	ОбработанныеИсточники = Новый Соответствие;		
	Для Каждого Источник Из МодельЗапросаУтилиты.СортироватьИсточникиПоИерархии(ИсточникиДанных.Элементы) Цикл 
		Если ОбработанныеИсточники.Получить(Источник) = Истина Тогда
			Продолжить;
		КонецЕсли;	
		УзелДереваСвязей = ДобавитьУзелИсточникаВСоединения(КорневойУзелСоединений, Источник.Источник, СтрокиДереваПоПсевданимам);
		Для Каждого ОписаниеСоединения Из Источник.Соединения Цикл
			ДобавитьСоединение(
				УзелДереваСвязей, 
				ОписаниеСоединения, 
				СтрокиДереваПоПсевданимам, 
				ИсточникиПоИдентификаторам, 
				ОбработанныеИсточники,
				ГенераторТекстов);	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере	
Функция ДобавитьУзелИсточникаВСоединения(УзелПриемник, ОписаниеИсточника, СтрокиДереваПоПсевданимам, ТипСоединения = Неопределено)   
	УзелДереваСвязей = УзелПриемник.ПолучитьЭлементы().Добавить();
	УзелДереваСвязей.Таблица = ОписаниеИсточника.Псевдоним;
	УзелДереваСвязей.Картинка = СтрокиДереваПоПсевданимам[ОписаниеИсточника.Псевдоним].Картинка;
	УзелДереваСвязей.ТипСоединения = ТипСоединения; 
	
	Возврат УзелДереваСвязей;
КонецФункции	

&НаСервере
Процедура ДобавитьСоединение(УзелПриемник, ОписаниеСоединения, СтрокиДереваПоПсевданимам, 
	ИсточникиПоИдентификаторам, ОбработанныеИсточники, ГенераторТекстов) 
	
	Источник = ИсточникиПоИдентификаторам.Получить(ОписаниеСоединения.Источник); 
	
	УзелДереваСвязей = ДобавитьУзелИсточникаВСоединения(УзелПриемник, Источник.Источник, СтрокиДереваПоПсевданимам, ОписаниеСоединения.ТипСоединения);	 
	ОбработанныеИсточники.Вставить(Источник, Истина);
	
	Для Каждого ВложенноеСоединение Из Источник.Соединения Цикл	
		ДобавитьСоединение(
			УзелДереваСвязей, 
			ВложенноеСоединение, 
			СтрокиДереваПоПсевданимам, 
			ИсточникиПоИдентификаторам, 
			ОбработанныеИсточники,
			ГенераторТекстов);
	КонецЦикла;	 
	УзелУсловия = УзелДереваСвязей.ПолучитьЭлементы().Добавить();
	УзелУсловия.Выражение = ГенерацияТекстовЗапросов.ВыражениеВСтроку(
		ОписаниеСоединения.Условие, ГенераторТекстов);
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(Строка, ИмяПриемника)
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект[ИмяПриемника],    
		КонструкторЗапросовФормы.ТекущийОператорЗапроса(ЭтотОбъект),
		ДоступныеТаблицыИБ(), 
		ОписаниеДоступныхВТИзВременногоХранилища());	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхДляУсловийПолей(Строка, ИмяПриемника)
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект[ИмяПриемника],    
		КонструкторЗапросовФормы.ТекущийОператорЗапроса(ЭтотОбъект),
		ДоступныеТаблицыИБ(), 
		ОписаниеДоступныхВТИзВременногоХранилища());	
КонецПроцедуры	

&НаСервере
Функция ОписаниеДоступныхВТИзВременногоХранилища(ДляИзменения = Ложь)
	ОписаниеДоступныхВТ = ПолучитьИзВременногоХранилища(АдресСпискаДоступныхВТ);
	Если Не ДляИзменения Тогда
		ОписаниеДоступныхВТВоВременноеХранилище(ОписаниеДоступныхВТ);	
	КонецЕсли;
	
	Возврат ОписаниеДоступныхВТ;
КонецФункции	   

&НаСервере
Процедура ОписаниеДоступныхВТВоВременноеХранилище(ОписаниеДоступныхВТ)
	АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(ОписаниеДоступныхВТ, УникальныйИдентификатор);
КонецПроцедуры	

// Текущий оператор запроса.
// 
// Параметры:
//  МодельЗапроса - Произвольный
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса
&НаСервере
Функция ТекущийОператорЗапроса(МодельЗапроса)  
	ТекущийЗапрос = ТекущийЗапрос(МодельЗапроса);
	
	Возврат ТекущийЗапрос.Операторы[ИндексОператораЗапроса];	
КонецФункции

// Текущий запрос.
// 
// Параметры:
//  МодельЗапроса - Структура, Произвольный - Модель запроса:
// * Тип - Строка - 
// * Элементы - Массив из Произвольный - 
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
&НаСервере
Функция ТекущийЗапрос(МодельЗапроса) 
	Если МодельЗапроса.Тип = "ЗапросВыбора" Тогда
		Возврат МодельЗапроса;
	Иначе	
		Возврат МодельЗапроса.Элементы[ИндексЗапроса]; 
	КонецЕсли;	
КонецФункции

&НаСервере
Процедура ДоступныеТаблицыВыборНаСервере(ИдентификаторСтроки)
	ВыбраннаяСтрока = ДоступныеТаблицы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЭтоСтрокаДоступнойТаблицы(ВыбраннаяСтрока) Тогда
		ДобавитьИсточник(ВыбраннаяСтрока.Имя);		
	КонецЕсли;	
КонецПроцедуры	   

&НаСервере	
Функция ЭтоСтрокаДоступнойТаблицы(ВыбраннаяСтрока)
	Если ВыбраннаяСтрока.ЭтоИсполняемоеПредставление Тогда
		Возврат Истина;
	ИначеЕсли КонструкторЗапросовКлиентСерверФормы.СодержитТип(ВыбраннаяСтрока.ТипЗначения, "ДоступнаяВложеннаяТаблицаСхемыЗапроса")  Тогда 
		Возврат Истина;
	ИначеЕсли ТипЗнч(ВыбраннаяСтрока.ТипЗначения) = Тип("Строка") Тогда
		Возврат Ложь;
	ИначеЕсли ВыбраннаяСтрока.ЭтоИсполняемоеПредставление
		Или ВыбраннаяСтрока.ТипЗначения.СодержитТип(Тип("ДоступнаяТаблицаСхемыЗапроса"))
		Или ВыбраннаяСтрока.ТипЗначения.СодержитТип(Тип("ОписаниеВременнойТаблицыСхемыЗапроса")) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции       

#Область МодификацияМоделиЗапроса

&НаСервере
Процедура ДобавитьИсточник(ИмяИсточника, АдресПараметровПредставления = Неопределено)
	Если АдресПараметровПредставления <> Неопределено Тогда
		ПараметрыПредставления = ПолучитьИзВременногоХранилища(АдресПараметровПредставления);
	Иначе
		ПараметрыПредставления = Неопределено;
	КонецЕсли;	
	
	Построитель = ПостроительМоделиЗапроса().ДобавитьИсточник(ИмяИсточника, , ПараметрыПредставления);	 
	Модель = ЗавершитьРедактированиеМодели(Построитель);  
	ПриДобавленииИсточника(Модель);
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеВременнойТаблицы(АдресОписанияВТ)
	ОписаниеВТ = ПолучитьИзВременногоХранилища(АдресОписанияВТ);
	
	Построитель = ПостроительМоделиЗапроса().ДобавитьОписаниеВременнойТаблицы(ОписаниеВТ); 
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ПриДобавленииИсточника(Модель);
КонецПроцедуры


&НаСервере
Процедура УдалитьИсточник(ИндексИсточника)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьИсточник(ИндексИсточника);
	
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ДобавитьТаблицыЗапроса(ТекущийОператорЗапроса(Модель).Источники, ДоступныеТаблицыИБ());	 
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимНовогоВладельца, Знач ТипСоединения, ПсевдонимПредыдущегоВладельца = Неопределено)
	Построитель = ПостроительМоделиЗапроса();
	Если ПсевдонимПредыдущегоВладельца <> Неопределено Тогда
		Построитель.УдалитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимПредыдущегоВладельца);
	КонецЕсли;
	Если ПсевдонимНовогоВладельца <> "Таблицы" Тогда		
		Построитель.ДобавитьСоединение(ПсевдонимПрисоединяемойТаблицы, ПсевдонимНовогоВладельца, ТипСоединения);
	КонецЕсли;	
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьСоединения(ТекущийОператорЗапроса(Модель).Источники);
КонецПроцедуры

&НаСервере
Процедура ИзменитьТипСоединение()
	СтрокаСоединения = Соединения.НайтиПоИдентификатору(Элементы.Соединения.ТекущаяСтрока);
	ПсевдонимПрисоединяемойТаблицы = СтрокаСоединения.Таблица; 
	ПсевдонимВладельцаСвязи = СтрокаСоединения.ПолучитьРодителя().Таблица;
	
	Построитель = ПостроительМоделиЗапроса().УстановитьТипСоединения(
			ПсевдонимПрисоединяемойТаблицы, 
			ПсевдонимВладельцаСвязи, 
			СтрокаСоединения.ТипСоединения
		);  	
	ЗавершитьРедактированиеМодели(Построитель);	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыИсполняемогоПредставления(ПсевдонимПредставления, АдресПараметров) 
	ПараметрыИсполняемогоПредставления = ПолучитьИзВременногоХранилища(АдресПараметров);
	
	Построитель = ПостроительМоделиЗапроса().УстановитьПараметрыИсполняемогоПредставления(
		ПсевдонимПредставления, 
		ПараметрыИсполняемогоПредставления);   
		
	ЗавершитьРедактированиеМодели(Построитель);
	Модифицированность = Истина;	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПоле(ТекстВыражения)
	Построитель = ПостроительМоделиЗапроса().ДобавитьПолеВЗапрос(ТекстВыражения);
	Модель = ЗавершитьРедактированиеМодели(Построитель); 
	Модифицированность = Истина;
	
	ЗапросВыбора = ТекущийЗапрос(Модель);
	ОбновитьДанныеФормыПриИзмененииПолей(ЗапросВыбора);
КонецПроцедуры	

&НаСервере
Процедура УстановитьВыраженияПоля(ИндексПоля, ТекстВыражения)
	Построитель = ПостроительМоделиЗапроса().УстановитьВыраженияПоля(ИндексПоля, ТекстВыражения);
	Модель = ЗавершитьРедактированиеМодели(Построитель); 
	Модифицированность = Истина;
	
	ЗапросВыбора = ТекущийЗапрос(Модель);
	ОбновитьДанныеФормыПриИзмененииПолей(ЗапросВыбора);
КонецПроцедуры	

&НаСервере
Процедура ИзменитьОписаниеВременнойТаблицы(ИндексИсточника, АдресОписанияВТ)
	ОписаниеВТ = ПолучитьИзВременногоХранилища(АдресОписанияВТ);
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.ИзменитьОписаниеВременнойТаблицы(ИндексИсточника, ОписаниеВТ);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловиеСвязи(ПсевдонимВладельцаСвязи, ПсевдонимПрисоединяемойТаблицы, ТекстВыражения);
	Построитель = ПостроительМоделиЗапроса().УстановитьУсловиеСоединения(
			ПсевдонимПрисоединяемойТаблицы, 
			ПсевдонимВладельцаСвязи, 
			ТекстВыражения
		);  	
	МодельЗапроса = ЗавершитьРедактированиеМодели(Построитель);	
	
	Оператор = ТекущийОператорЗапроса(МодельЗапроса);
	ИсточникиПоИд = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(Оператор.Источники.Элементы, "ИдентификаторИсточника");
	
	Соединение = МодельЗапросаУтилиты.НайтиСоединение(Оператор, ПсевдонимПрисоединяемойТаблицы, ПсевдонимВладельцаСвязи, ИсточникиПоИд);
		
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(Оператор.Источники.Элементы);
		
	СтрокаУсловия = Соединения.НайтиПоИдентификатору(Элементы.Соединения.ТекущаяСтрока);
	СтрокаУсловия.Выражение = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Соединение.Условие, ГенераторТекстов);
КонецПроцедуры	

&НаСервере
Процедура ВыбиратьУникальныеЗаписиПриИзмененииНаСервере()
	Построитель = ПостроительМоделиЗапроса().УстановитьПолучениеУникальныхЗаписей(ВыбиратьУникальныеЗаписи);
	ЗавершитьРедактированиеМодели(Построитель);
КонецПроцедуры

&НаСервере
Процедура ВыбиратьПервыеЗаписиПриИзмененииНаСервере()
	Если ВыбиратьПервыеЗаписи Тогда
		КоличествоЗаписей = КоличествоПервыхЗаписей;
	Иначе
		КоличествоЗаписей = Неопределено;
	КонецЕсли;
	Построитель = ПостроительМоделиЗапроса().УстановитьПолучениеПервыхЗаписей(КоличествоЗаписей);
	ЗавершитьРедактированиеМодели(Построитель);
КонецПроцедуры

&НаСервере
Процедура ВыбиратьРазрешенныеПриИзмененииНаСервере()
	Построитель = ПостроительМоделиЗапроса().УстановитьПолучениеРазрешенныхЗаписей(ВыбиратьРазрешенные);
	ЗавершитьРедактированиеМодели(Построитель);
КонецПроцедуры

&НаСервере
Процедура УстановитьИмяВременнойТаблицы()
	Построитель = ПостроительМоделиЗапроса().УстановитьИмяВременнойТаблицы(ИмяВременнойТаблицы);
	Модель = ЗавершитьРедактированиеМодели(Построитель);	
	Запрос = ТекущийЗапрос(Модель);
	ЗаполнитьРазделИндексы(Запрос);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУпорялочиваниеНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДляУпорядочивания.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Выражение = СтрокаТаблицы.Представление;
	
	Если ЗначениеЗаполнено(Выражение) Тогда
		Построитель = ПостроительМоделиЗапроса().ДобавитьУпорядочивание(Выражение);    
		Модель = ЗавершитьРедактированиеМодели(Построитель);
		ЗаполнитьРазделПорядок(ТекущийЗапрос(Модель));
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ДобавитьКонтрольнуюТочкуИтоговНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДоступныеДляИтогов.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Выражение = СтрокаТаблицы.Представление;
	
	Если ЗначениеЗаполнено(Выражение) Тогда
		Построитель = ПостроительМоделиЗапроса().ДобавитьКонтрольнуюТочкуИтогов(Выражение);    
		Модель = ЗавершитьРедактированиеМодели(Построитель);
		ЗаполнитьРазделИтоги(ТекущийЗапрос(Модель));
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ИзменитьСвойстваКонтрольнойТочкиИтогов(ИдентификаторСтроки)
	СтрокаТаблицы = КонтрольныеТочкиИтогов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТипКонтрольнойТочки = Неопределено;
	Если СтрокаТаблицы.ТипКонтрольнойТочки = "Иерархия" Тогда
		ТипКонтрольнойТочки = ЭлементыМоделиЗапроса.НовыйТипКонтрольнойТочкиИерархия();
	ИначеЕсли СтрокаТаблицы.ТипКонтрольнойТочки = "ТолькоИерархия" Тогда 
		ТипКонтрольнойТочки = ЭлементыМоделиЗапроса.НовыйТипКонтрольнойТочкиТолькоИерархия();
	КонецЕсли;
	
	ВариантДополненияПериодами = СтрокаТаблицы.ДоаолнениеПериода;
	Если ЗначениеЗаполнено(ВариантДополненияПериодами) Тогда
		ВыражениеНачалоПериода = СтрокаТаблицы.НачалоПериода;
		ВыражениеКонецПериода = СтрокаТаблицы.ОкончаниеПериода;
	Иначе
		ВыражениеНачалоПериода = Неопределено;
		ВыражениеКонецПериода = Неопределено;
	КонецЕсли;
				
	Попытка
		Построитель = ПостроительМоделиЗапроса().ИзменитьСвойстваКонтрольнойТочкиИтогов(
			СтрокаТаблицы.Индекс, 
			ТипКонтрольнойТочки, 
			СтрокаТаблицы.Псевдоним,
			ВариантДополненияПериодами, 
			ВыражениеНачалоПериода, 
			ВыражениеКонецПериода);	
			
		ЗавершитьРедактированиеМодели(Построитель);
	Исключение
		ОшибкаИнфо = ИнформацияОбОшибке();
		Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
		ЗаполнитьРазделИтоги(ТекущийЗапрос(Модель));
		ВызватьИсключение ОшибкаИнфо.Описание;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПорядокНаправлениеПриИзмененииНаСервере()
	СтрокаТаблицы = Порядок.НайтиПоИдентификатору(Элементы.Порядок.ТекущаяСтрока);
	
	Иерархия = Ложь;
	Возрастание = Ложь;
	
	Если СтрокаТаблицы.Направление = "Возрастание" Тогда
		Возрастание = Истина;
	ИначеЕсли СтрокаТаблицы.Направление = "ВозрастаниеИерархии" Тогда 	
		Возрастание = Истина;
		Иерархия = Истина;
	ИначеЕсли СтрокаТаблицы.Направление = "УбываниеИерархии" Тогда
		Иерархия = Истина;	 
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса().ИзменитьСвойстваЭлементаУпорядочивания(
		СтрокаТаблицы.Индекс, 
		Иерархия, 
		Возрастание);	
		
	ЗавершитьРедактированиеМодели(Построитель);
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппировкуНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДляГруппировки.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		Выражение = СтрокаТаблицы.Представление;
	Иначе	
		Выражение = КонструкторЗапросовКлиентСерверФормы.ВыражениеВыбираемогоПоля(СтрокаТаблицы, , Ложь);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Выражение) Тогда
		Построитель = ПостроительМоделиЗапроса().ДобавитьГруппировку(Выражение);    
		Модель = ЗавершитьРедактированиеМодели(Построитель);
		
		ЗаполнитьРазделГруппировка(ТекущийОператорЗапроса(Модель));
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура ДобавитьАгрегируемоеПолеНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДляГруппировки.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	
	Построитель = ПостроительМоделиЗапроса();
	
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		Выражение = СтрокаТаблицы.Представление; 
		ИндексПоля = СтрокаТаблицы.ИндексПоля;
		
		Построитель.ДобавитьАгрегированиеДляПоля(ИндексПоля, Выражение);
	Иначе	
		Выражение = КонструкторЗапросовКлиентСерверФормы.ВыражениеВыбираемогоПоля(СтрокаТаблицы);   
		Построитель.ДобавитьАгрегируемоеПоле(Выражение);
	КонецЕсли;
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель)); 
КонецПроцедуры

&НаСервере
Процедура ИзменитьАгрегатнуюФункциюДляПоля(ИндексПоля, ИмяФункцции)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.ИзменитьАгрегатнуюФункциюДляПоля(ИндексПоля, ИмяФункцции);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель)); 
КонецПроцедуры

&НаСервере
Процедура ИзменитьПсевдонимПоля(ИдентификаторСтроки, НовыйПсевдоним)
	СтрокаТаблицы = Псевдонимы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИндексПоля = СтрокаТаблицы.Индекс;
	
	Построитель = ПостроительМоделиЗапроса().ИзменитьПсевдонимПоля(ИндексПоля, НовыйПсевдоним);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	СтрокаТаблицы.Имя = НовыйПсевдоним;
	
	ЗапросВыбора = ТекущийЗапрос(Модель);
	
	ЗаполнитьРазделПорядок(ЗапросВыбора);
	ЗаполнитьРазделИтоги(ЗапросВыбора);
	ЗаполнитьРазделИндексы(ЗапросВыбора);
КонецПроцедуры

&НаСервере
Процедура ИзменитьПсевдонимИсточника(ИдентификаторСтроки, НовыйПсевдоним)
	СтрокаТаблицы = Источники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ИндексИсточника = СтрокаТаблицы.ИндексИсточника;
	
	Построитель = ПостроительМоделиЗапроса().ИзменитьПсевдонимИсточника(ИндексИсточника, НовыйПсевдоним);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	СтрокаТаблицы.Представление = НовыйПсевдоним;
	СтрокаТаблицы.Псевдоним = НовыйПсевдоним;
	
	ЗапросВыбора = ТекущийЗапрос(Модель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(ЗапросВыбора);
	ЗаполнитьСоединения(ТекущийОператорЗапроса(Модель).Источники);
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтбор(Выражение)
	Построитель = ПостроительМоделиЗапроса().ДобавитьОтбор(Выражение);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ЗаполнитьТаблицуУсловия(ТекущийОператорЗапроса(Модель));
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтбор(ИндексУсловия, ЭтоОтборСгруппированных, Выражение)
	Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ТекущийОператор = ТекущийОператорЗапроса(Модель);
	ИндексПоследнегоОтбора = ТекущийОператор.Отбор.ВГраница();
	ИндексПоследнегоОтбораСгруппированных = ТекущийОператор.ОтборСгруппированных.ВГраница();
	
	Построитель = ПостроительМоделиЗапроса().ИзменитьОтбор(ИндексУсловия, ЭтоОтборСгруппированных, Выражение);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ТекущийОператор = ТекущийОператорЗапроса(Модель);
	
	Если ИндексПоследнегоОтбора < ТекущийОператор.Отбор.ВГраница() Тогда
		НовыйИндекс = ТекущийОператор.Отбор.ВГраница();
	ИначеЕсли ИндексПоследнегоОтбораСгруппированных < ТекущийОператор.ОтборСгруппированных.ВГраница()  Тогда 
		НовыйИндекс = ТекущийОператор.ОтборСгруппированных.ВГраница();
	Иначе
		НовыйИндекс = ИндексУсловия;
	КонецЕсли;	
	
	ЗаполнитьТаблицуУсловия(ТекущийОператорЗапроса(Модель), НовыйИндекс, ЭтоОтборСгруппированных);
КонецПроцедуры

&НаСервере
Процедура УдалитьОтбор(ИндексУсловия, ЭтоОтборСгруппированных)	
	Построитель = ПостроительМоделиЗапроса().УдалитьОтбор(ИндексУсловия, ЭтоОтборСгруппированных);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьТаблицуУсловия(ТекущийОператорЗапроса(Модель));
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеИтоговНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДоступныеДляИтогов.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	
	Построитель.ДобавитьПолеИтогов(СтрокаТаблицы.Представление);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ЗаполнитьРазделИтоги(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура ДобавитьИндексНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = ПоляДоступныеДляИндексации.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	
	Построитель.ДобавитьИндекс(СтрокаТаблицы.Представление);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ЗаполнитьРазделИндексы(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура УдалитьИндексНаСервере(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = Индексы.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьИндекс(СтрокаТаблицы.ИндексПоля);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ЗаполнитьРазделИндексы(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗапросВПакет()
	Построитель = ПостроительМоделиЗапроса().ДобавитьЗапросВыбора();
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьСписокЗапросов(Модель);
	
	ИндексЗапроса = Модель.Элементы.ВГраница();
	ИндексОператораЗапроса = 0;
	
	Элементы.ПакетЗапросов.ТекущаяСтрока = ПакетЗапросов[ПакетЗапросов.Количество() - 1].ПолучитьИдентификатор();
	
	ЗапросВданные(Модель);
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗапросУничтоженияНаСервере()
	Построитель = ПостроительМоделиЗапроса().ДобавитьЗапросУничтожения();
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьСписокЗапросов(Модель);
	
	ИндексЗапроса = Модель.Элементы.ВГраница();
	ИндексОператораЗапроса = 0;
	
	Элементы.ПакетЗапросов.ТекущаяСтрока = ПакетЗапросов[ПакетЗапросов.Количество() - 1].ПолучитьИдентификатор();
	
	ЗапросВданные(Модель);
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ДобавитьОператорЗапроса()
	Построитель = ПостроительМоделиЗапроса().ДобавитьОператорЗапроса();
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	Запрос = ТекущийЗапрос(Модель);
	ИндексОператораЗапроса = Запрос.Операторы.ВГраница();
	
	ЗапросВданные(Модель);
	
	Элементы.Объединения.ТекущаяСтрока = Объединения[Объединения.Количество() - 1].ПолучитьИдентификатор();
КонецПроцедуры

&НаСервере
Процедура СвязатьПолеОператораСКолонкойЗапроса(ИндексОператора, ИндексКолонки, ИндексПоля)
	Построитель = ПостроительМоделиЗапроса()
		.СвязатьПолеОператораСКолонкойЗапроса(ИндексОператора, ИндексКолонки, ИндексПоля);
		
	Модель = ЗавершитьРедактированиеМодели(Построитель);	
	Запрос = ТекущийЗапрос(Модель);
	ИндексОператораЗапроса = Запрос.Операторы.ВГраница();
	
	ЗаполнитьРазделОбъединенияПсевдонимы(Запрос);
	
	ОбновитьДанныеФормыПриКолонок(Запрос);
КонецПроцедуры

&НаСервере
Процедура УдалитьАгрегированиеДляПоляНаСервере(ИндексПоля)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьАгрегированиеДляПоля(ИндексПоля);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура УдалитьАгрегированиеДляВсехПолейНаСервере()
	Построитель = ПостроительМоделиЗапроса();
	Для Каждого СтрокаТаблицы Из АгрегируемыеПоля Цикл
		Построитель.УдалитьАгрегированиеДляПоля(СтрокаТаблицы.ИндексПоля);
	КонецЦикла;
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппировкуНаСервере(ИндексГруппировки)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьГруппировку(ИндексГруппировки);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	
	ЗаполнитьРазделГруппировка(ТекущийОператорЗапроса(Модель));
КонецПроцедуры

&НаСервере
Процедура УдалитьВсеГруппировкиНаСервере()
	Построитель = ПостроительМоделиЗапроса();
	
	ВГраница = ГруппируемыеПоля.Количество() - 1;
	Для Индекс = 0 По ВГраница Цикл
		Построитель.УдалитьГруппировку(ВГраница - Индекс);	
	КонецЦикла;
	
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьРазделГруппировка(ТекущийОператорЗапроса(Модель));
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенныйЗапрос(АдресМоделиЗапроса)
	МодельВложенногоЗапроса = ПолучитьИзВременногоХранилища(АдресМоделиЗапроса);
	Построитель = ПостроительМоделиЗапроса();
	Построитель.ДобавитьВложенныйЗапрос(МодельВложенногоЗапроса);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ДобавитьТаблицыЗапроса(ТекущийОператорЗапроса(Модель).Источники, ДоступныеТаблицыИБ());	
КонецПроцедуры

&НаСервере 
Процедура ИзменитьВложенныйЗапрос(ИдентификаторИсточника, АдресМоделиЗапроса)
	МодельВложенногоЗапроса = ПолучитьИзВременногоХранилища(АдресМоделиЗапроса);
	Построитель = ПостроительМоделиЗапроса();
	Построитель.ИзменитьВложенныйЗапрос(ИдентификаторИсточника, МодельВложенногоЗапроса);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ДобавитьТаблицыЗапроса(ТекущийОператорЗапроса(Модель).Источники, ДоступныеТаблицыИБ());	
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере 
Процедура УдалитьПолеОператора(ИндексПоля)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьПолеОператора(ИндексПоля);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере 
Процедура УдалитьКолонкуЗапроса(ИндексКолонки)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьКолонкуЗапроса(ИндексКолонки);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ОбновитьДанныеФормыПриИзмененииПолей(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере 
Процедура УдалитьЭлементПорядка(ИдентификаторВыбраннойСтроки)
	СтрокаТаблицы = Порядок.НайтиПоИдентификатору(ИдентификаторВыбраннойСтроки);
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьЭлементПорядка(СтрокаТаблицы.Индекс);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	ЗаполнитьРазделПорядок(ТекущийЗапрос(Модель));
КонецПроцедуры

&НаСервере
Процедура СдвинутьЗапросСервере(Направление)
	ТекущаяСтрока = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
	ИндексСтроки = ПакетЗапросов.Индекс(ТекущаяСтрока);
	
	НовыйИндекс = ИндексСтроки + Направление;
	Если НовыйИндекс < 0
		Или НовыйИндекс >= ПакетЗапросов.Количество() Тогда
			
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.СдвинутьЗапрос(ИндексСтроки, Направление);
	ЗавершитьРедактированиеМодели(Построитель);
	ПакетЗапросов.Сдвинуть(ИндексСтроки, Направление);
	
	Если ИндексЗапроса = ИндексСтроки Тогда
		ИндексЗапроса = НовыйИндекс;
		ИндексОператораЗапроса = 0;
	КонецЕсли;
	
	Элементы.ПакетЗапросов.ТекущаяСтрока = ПакетЗапросов[ИндексСтроки + Направление].ПолучитьИдентификатор(); 
КонецПроцедуры

Процедура СдвинутьЭлементПорядка(Направление)
	ТекущаяСтрока = Порядок.НайтиПоИдентификатору(Элементы.Порядок.ТекущаяСтрока);
	ИндексСтроки = Порядок.Индекс(ТекущаяСтрока);
	
	НовыйИндекс = ИндексСтроки + Направление;
	Если НовыйИндекс < 0
		Или НовыйИндекс >= Порядок.Количество() Тогда
			
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.СдвинутьЭлементПорядка(ИндексСтроки, Направление);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	Запрос = ТекущийЗапрос(Модель);
	
	ЗаполнитьРазделПорядок(Запрос);
	
	Элементы.Порядок.ТекущаяСтрока = Порядок[ИндексСтроки + Направление].ПолучитьИдентификатор();	
КонецПроцедуры

Процедура СдвинутьИндекс(Направление)
	ТекущаяСтрока = Индексы.НайтиПоИдентификатору(Элементы.Индексы.ТекущаяСтрока);
	ИндексСтроки = Индексы.Индекс(ТекущаяСтрока);
	
	НовыйИндекс = ИндексСтроки + Направление;
	Если НовыйИндекс < 0
		Или НовыйИндекс >= Индексы.Количество() Тогда
			
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.СдвинутьИндекс(ИндексСтроки, Направление);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	Запрос = ТекущийЗапрос(Модель);
	
	ЗаполнитьРазделИндексы(Запрос);
	
	Элементы.Индексы.ТекущаяСтрока = Индексы[ИндексСтроки + Направление].ПолучитьИдентификатор();	
КонецПроцедуры

Процедура СдвинутьКолонкуЗапроса(Направление)
	ТекущаяСтрока = Псевдонимы.НайтиПоИдентификатору(Элементы.Псевдонимы.ТекущаяСтрока);
	ИндексСтроки = Псевдонимы.Индекс(ТекущаяСтрока);
	
	НовыйИндекс = ИндексСтроки + Направление;
	Если НовыйИндекс < 0
		Или НовыйИндекс >= Псевдонимы.Количество() Тогда
			
		Возврат;
	КонецЕсли;
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.СдвинутьКолонкуЗапроса(ИндексСтроки, Направление);
	Модель = ЗавершитьРедактированиеМодели(Построитель);
	Запрос = ТекущийЗапрос(Модель);
	
	ОбновитьДанныеФормыПриИзмененииПолей(Запрос);
	
	Элементы.Псевдонимы.ТекущаяСтрока = Псевдонимы[ИндексСтроки + Направление].ПолучитьИдентификатор();	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗапрос()
	ТекущаяСтрока = ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока);
	ИндексСтроки = ПакетЗапросов.Индекс(ТекущаяСтрока);
	
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УдалитьЗапрос(ИндексСтроки);
	МодельЗапроса = ЗавершитьРедактированиеМодели(Построитель);
	
	Если МодельЗапроса.Элементы.Количество() = 0 Тогда
		ПостроительМоделиЗапроса().ДобавитьЗапросВыбора();
		ИндексЗапроса = 0;
		
		ЗапросВДанные(МодельЗапроса);
		ЗаполнитьСписокЗапросов(МодельЗапроса);
		НастроитьЭлементыФормы();
	ИначеЕсли ИндексЗапроса = ИндексСтроки Тогда
		Если ИндексСтроки = ПакетЗапросов.Количество() - 1 Тогда
			ИндексЗапроса = ИндексСтроки - 1;
		КонецЕсли;
		ИндексОператораЗапроса = 0;
		
		ЗапросВДанные(МодельЗапроса);
		НастроитьЭлементыФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДоступныеТаблицыИБ()
	Схема = Новый СхемаЗапроса; 
	ДоступныеТаблицыИБ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы;  
	_схема = Схема;
	Возврат ДоступныеТаблицыИБ;	
КонецФункции	

&НаСервере
Функция НовыйГруппаДостпныхВременныхТаблиц()
	ГруппаДостпныхВременныхТаблиц = Новый Структура;
	ГруппаДостпныхВременныхТаблиц.Вставить("Тип", "ГруппаДоступныхВременныхТаблиц");  
	
	Возврат ГруппаДостпныхВременныхТаблиц; 
КонецФункции	 

&НаСервере
Процедура ПакетЗапросовВыборНаСервере()
	ИндексАктивируемогоЗапрос = ПакетЗапросов.Индекс(ПакетЗапросов.НайтиПоИдентификатору(Элементы.ПакетЗапросов.ТекущаяСтрока));
	АктивироватьРедактированиеЗапроса(ИндексАктивируемогоЗапрос);
КонецПроцедуры

&НаСервере
Процедура АктивироватьРедактированиеЗапроса(ИндексАктивируемогоЗапрос)
	ИндексЗапроса = ИндексАктивируемогоЗапрос;
	ИндексОператораЗапроса = 0;
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ЗапросВданные(МодельЗапроса);
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоСоединений()
	Элементы.Соединения.Развернуть(Соединения.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьРедакторВыражений(ПараметрыОткрытия, Оповещение)
	КонструкторЗапросовКлиент.ОткрытьРедакторВыражений(ПараметрыОткрытия, Оповещение);
КонецПроцедуры  

&НаКлиенте
Процедура ОткрытьРедакторПараметровПредставления(ИмяТаблицыПредставления, ПсевдонимПредставления = Неопределено)
	ПараметрыОткрытия = ПараметрыРедактораПараметровПредставления();   
	ПараметрыОткрытия.ПсевдонимПредставления = ПсевдонимПредставления; 
	ПараметрыОткрытия.ИмяТаблицыПредставления = ИмяТаблицыПредставления;
	
	ПараметрыОповещения = Новый Структура("ИмяТаблицыПредставления, ПсевдонимПредставления", ИмяТаблицыПредставления, ПсевдонимПредставления);
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеПараметровПредставления", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму(
		"Обработка.КонструкторЗапросов.Форма.ПараметрыИсполняемогоПредставления", 
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
КонецПроцедуры  
	
&НаКлиенте
Процедура ЗавершитьРедактированиеУсловияСвязиВФорме(РезультатРедактирования, ДополнительынеПараметры) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗавершитьРедактированиеУсловяиСвязи(РезультатРедактирования.ТекстВыражения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеПараметровПредставления(РезультатРедактирования, ДополнительныеПараметры) Экспорт    
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗавершитьРедактированиеПараметровПредставленияНаСервере(   
		ДополнительныеПараметры.ИмяТаблицыПредставления,
		ДополнительныеПараметры.ПсевдонимПредставления,
		РезультатРедактирования.АдресПараметровПредставления);
КонецПроцедуры

Процедура ЗавершитьРедактированиеПараметровПредставленияНаСервере(ИмяТаблицыПредставления, ПсевдонимПредставления, АдресПараметровПредставления)    
	Если ПсевдонимПредставления = Неопределено Тогда
		ДобавитьИсточник(ИмяТаблицыПредставления, АдресПараметровПредставления);	
	Иначе
		УстановитьПараметрыИсполняемогоПредставления(   
			ПсевдонимПредставления,
			АдресПараметровПредставления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеУсловяиСвязи(ТекстУсловия)
	СтрокаУсловия = Элементы.Соединения.ТекущиеДанные;
	СтрокаПрисоединяемойТаблицы = СтрокаУсловия.ПолучитьРодителя(); 
	СтрокаИсточника = СтрокаПрисоединяемойТаблицы.ПолучитьРодителя();
	
	Попытка
		УстановитьУсловиеСвязи(СтрокаИсточника.Таблица, СтрокаПрисоединяемойТаблицы.Таблица, ТекстУсловия);    
		Модифицированность = Истина;

		Элементы.Соединения.ЗакончитьРедактированиеСтроки(Ложь);
	Исключение
		Элементы.Соединения.ЗакончитьРедактированиеСтроки(Истина);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ИнформацияОбОшибке.Описание;
	КонецПопытки;		
КонецПроцедуры	

&НаСервере
Функция СписокДоступныхАгрегатныхФункций(ИндексПоля)
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	Оператор = ТекущийОператорЗапроса(МодельЗапроса);
	
	Возврат МодельЗапросаУтилиты.СписокВыбораАгрегируемогоПоля(
		Оператор.ВыбираемыеПоля[ИндексПоля].Выражение, 
		Оператор, 
		ИндексЗапроса);
КонецФункции

&НаСервере
Функция ПараметрыРедактораВыражений()
	ПараметрыРедактора = КонструкторЗапросовФормы.НовыйПараметрыРедактораВыражений();  
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ПоместитьВоВременноеХранилище(МодельЗапроса);
	ПараметрыРедактора.АдресМоделиЗапроса = ПоместитьВоВременноеХранилище(МодельЗапроса);
	ПараметрыРедактора.ИндексЗапроса = ИндексЗапроса;
	ПараметрыРедактора.ИндексОператораЗапроса = ИндексОператораЗапроса;
	ПараметрыРедактора.ЭтоВложенныйЗапрос = ЭтоВложенныйЗапрос;
	Если ЭтоВложенныйЗапрос Тогда
		ПараметрыРедактора.АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(ОписаниеДоступныхВТИзВременногоХранилища());
	КонецЕсли;	
	
	Возврат ПараметрыРедактора;
КонецФункции

&НаСервере
Функция ПараметрыРедактораПараметровПредставления()
	ПараметрыРедактора = Новый Структура();  
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ПараметрыРедактора.Вставить("АдресМоделиЗапроса", ПоместитьВоВременноеХранилище(МодельЗапроса));    
	ПараметрыРедактора.Вставить("ИндексЗапроса", ИндексЗапроса);  
	ПараметрыРедактора.Вставить("ИндексОператораЗапроса", ИндексОператораЗапроса); 
	ПараметрыРедактора.Вставить("ПсевдонимПредставления", "");
	ПараметрыРедактора.Вставить("ИмяТаблицыПредставления", "");
	ПараметрыРедактора.Вставить("АдресСпискаДостпныхВТ"); 
	
	Если ЭтоВложенныйЗапрос Тогда	
		ПараметрыРедактора.АдресСпискаДостпныхВТ = 
			ПоместитьВоВременноеХранилище(
				КонструкторЗапросовФормы.ОписаниеДоступныхВТИзВременногоХранилища(ЭтотОбъект));
	КонецЕсли;
		

	Возврат ПараметрыРедактора;
КонецФункции

&НаСервере
Функция ПараметрыЗакрытия()    
	ПараметрыЗакрытия = Новый Структура();
	Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ПараметрыЗакрытия.Вставить("АдресМоделиЗапроса", ПоместитьВоВременноеХранилище(Модель));
	ПараметрыЗакрытия.Вставить("Модифицированность", Модифицированность);
	
	Возврат ПараметрыЗакрытия;
КонецФункции	

&НаКлиенте
Процедура ЗавершитьРедактированиеПоляОператора(РезультатРедактирования, ДополнительныеПараметры) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИндексПоля = Неопределено Тогда
		ДобавитьПоле(РезультатРедактирования.ТекстВыражения);
	Иначе
		УстановитьВыраженияПоля(ДополнительныеПараметры.ИндексПоля, РезультатРедактирования.ТекстВыражения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеОписанияВТ(РезультатРедактирования, ДополнительныеПараметры) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИндексИсточника = Неопределено Тогда
		ДобавитьОписаниеВременнойТаблицы(РезультатРедактирования.АдресОписанияВТ);
	Иначе
		ИзменитьОписаниеВременнойТаблицы(ДополнительныеПараметры.ИндексИсточника, РезультатРедактирования.АдресОписанияВТ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхПолейГруппировки(Строка, ИмяПриемника)   
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
		
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	
	Если ЭтоВложенныйЗапрос Тогда
		ОписаниеДоступныхВТ = ОписаниеДоступныхВТИзВременногоХранилища();
	Иначе	
		ОписаниеДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
	КонецЕсли;		
	
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект[ИмяПриемника],    
		МодельЗапроса.Элементы[ИндексЗапроса].Операторы[ИндексОператораЗапроса],
		ДоступныеТаблицыИБ, 
		ОписаниеДоступныхВТ);	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыПриИзмененииПолей(ЗапросВыбора)
	ОбновитьДанныеФормыПриКолонок(ЗапросВыбора);
	
	ОператорЗапроса = ЗапросВыбора.Операторы[ИндексОператораЗапроса];

	ПоляЗапроса.ПолучитьЭлементы().Очистить();
	КонструкторЗапросовФормы.ЗаполнитьВыбранныеПоляЗапроса(ПоляЗапроса, ОператорЗапроса.ВыбираемыеПоля, ОператорЗапроса); 	 
	ЗаполнитьРазделГруппировка(ОператорЗапроса); 
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормыПриКолонок(ЗапросВыбора)	
	ЗаполнитьРазделОбъединенияПсевдонимы(ЗапросВыбора); 
	ЗаполнитьРазделПорядок(ЗапросВыбора);
	ЗаполнитьРазделИтоги(ЗапросВыбора);
	ЗаполнитьРазделИндексы(ЗапросВыбора);
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормыПриИзмененииИсточников(ОператорЗапроса)
	ЗаполнитьРазделГруппировка(ОператорЗапроса); 
	ЗаполнитьПоляДоступныеДляОтбора(ОператорЗапроса); 
	
	// TODO порядок
	// индексы
	// итоги
КонецПроцедуры	

&НаСервере
Процедура ПоляДоступныеДляОтбораВыборНаСервере(ИдентификаторСтроки)
	СтрокаТаблицы = ПоляДоступныеДляОтбора.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если НЕ КонструкторЗапросовФормы.ЭтоПоле(СтрокаТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.ТипЗначения = "ПолеЗапроса" Тогда
		ТекстВыражения = СтрокаТаблицы.Представление;
	Иначе	
		ТекстВыражения = КонструкторЗапросовКлиентСерверФормы.ВыражениеВыбираемогоПоля(СтрокаТаблицы, ,Ложь);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекстВыражения) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиИмениПоля = СтрРазделить(ТекстВыражения, ".");
	ИмяПараметра = ЧастиИмениПоля[ЧастиИмениПоля.ВГраница()];
	
	Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	Оператор = ТекущийОператорЗапроса(Модель);
	
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();          
	Выражение = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();	
	Выражение.Значение = Парсер.РазобратьВыражение(ТекстВыражения);  
	
	Контекст = МодельЗапросаУтилиты.КонтекстОбработкиВыражения(Оператор, ИндексЗапроса); 		
	ОбработкаМоделиЗапроса.ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);
	Если Не МодельЗапросаТипы.ЭтоПолеТипа(Выражение.ТипЗначения, Тип("Булево"), Ложь) Тогда
		ТекстВыражения = ТекстВыражения + " = &" + ИмяПараметра;
	КонецЕсли;
	
	ДобавитьОтбор(ТекстВыражения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеУсловия(РезультатРедактирования, ДополнительынеПараметры) Экспорт
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	Если ДополнительынеПараметры.ИндексУсловия = Неопределено Тогда
		ДобавитьОтбор(РезультатРедактирования.ТекстВыражения);	
	Иначе
		ИзменитьОтбор(
			ДополнительынеПараметры.ИндексУсловия, 
			ДополнительынеПараметры.ЭтоОтборСгруппированных, 
			РезультатРедактирования.ТекстВыражения);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхПолейУпорядочивания(Строка)   
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
		
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ОписаниеДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
	
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект["ПоляДляУпорядочивания"],    
		МодельЗапроса.Элементы[ИндексЗапроса].Операторы[ИндексОператораЗапроса],
		ДоступныеТаблицыИБ, 
		ОписаниеДоступныхВТ);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДочерниеЭлементыДереваДоступныхПолейИтогов(Строка)   
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();   
		
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ОписаниеДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
	
	КонструкторЗапросовФормы.ЗаполнитьДочерниеЭлементыДереваДоступныхТаблиц(
		Строка, 
		ЭтотОбъект["ПоляДоступныеДляИтогов"],    
		МодельЗапроса.Элементы[ИндексЗапроса].Операторы[ИндексОператораЗапроса],
		ДоступныеТаблицыИБ, 
		ОписаниеДоступныхВТ);	
КонецПроцедуры

&НаКлиенте
Процедура ПоляДляУпорядочиванияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 ДобавитьУпорялочиваниеНаСервере(ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНаправлениеПриИзменении(Элемент)
	ПорядокНаправлениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоляДоступныеДляИтоговПередРазворачиванием(Элемент, Строка, Отказ)
	ТипЭлемента = ПоляДоступныеДляИтогов.НайтиПоИдентификатору(Строка).ТипЗначения;
	Если КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТипЭлемента, "ГруппаВсеПоля") Тогда
		Возврат;
	КонецЕсли;	
	ЗаполнитьДочерниеЭлементыДереваДоступныхПолейИтогов(Строка);
КонецПроцедуры

&НаКлиенте
Процедура ПоляДоступныеДляИтоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДобавитьКонтрольнуюТочкуИтоговНаСервере(ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиИтоговТипКонтрольнойТочкиПриИзменении(Элемент)
	ИзменитьСвойстваКонтрольнойТочкиИтогов(Элементы.КонтрольныеТочкиИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиИтоговДоаолнениеПериодаПриИзменении(Элемент)
	ИзменитьСвойстваКонтрольнойТочкиИтогов(Элементы.КонтрольныеТочкиИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиИтоговПсевдонимПриИзменении(Элемент)
	ИзменитьСвойстваКонтрольнойТочкиИтогов(Элементы.КонтрольныеТочкиИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиИтоговОкончаниеПериодаПриИзменении(Элемент)
	ИзменитьСвойстваКонтрольнойТочкиИтогов(Элементы.КонтрольныеТочкиИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеТочкиИтоговНачалоПериодаПриИзменении(Элемент)
	ИзменитьСвойстваКонтрольнойТочкиИтогов(Элементы.КонтрольныеТочкиИтогов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ИмяВременнойТаблицыПриИзменении(Элемент)
	УстановитьИмяВременнойТаблицы();
КонецПроцедуры

&НаСервере
Процедура УстановитьТипОбъединения(ИндексОператора, ОбъединитьВсе)
	Построитель = ПостроительМоделиЗапроса();
	Построитель.УстановитьТипОбъединения(ИндексОператора, ОбъединитьВсе);
	
	ЗавершитьРедактированиеМодели(Построитель);
КонецПроцедуры

&НаСервере
Процедура ОбъединенияВыборНаСервере(ИдентификаторСтроки)
	СтрокаТаблицы = Объединения.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИндексОператораЗапроса = Объединения.Индекс(СтрокаТаблицы);
	
	Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	
	ОператорЗапросаВДанные(ТекущийОператорЗапроса(Модель));
КонецПроцедуры

Функция СписокВыбораПолейОператораЗапроса(ИндексОператора)
	СписокВыбора = Новый СписокЗначений();
	
	Модель = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	Запрос = ТекущийЗапрос(Модель);
	
	Оператор = Запрос.Операторы[ИндексОператора];
	
	ГенераторТекстов = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	ГенераторТекстов.УстановитьИсточники(Оператор.Источники.Элементы);
	
	ИндексПоля = 0;
	Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл
		Представление = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Поле.Выражение, ГенераторТекстов);
		СписокВыбора.Добавить(ИндексПоля, Представление);
		ИндексПоля = ИндексПоля + 1;
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

// Построитель модели запроса.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ПостроительМоделиЗапроса - Построитель модели запроса
&НаСервере
Функция ПостроительМоделиЗапроса()
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	
	Если ЭтоВложенныйЗапрос Тогда
		СписокДоступныхВТ = ОписаниеДоступныхВТИзВременногоХранилища();
	Иначе	
		СписокДоступныхВТ = Неопределено;
	КонецЕсли;		

	Возврат МодельЗапросаУтилиты.СоздатьПостроительМодели(МодельЗапроса, ИндексЗапроса, ИндексОператораЗапроса, СписокДоступныхВТ);
КонецФункции

&НаСервере
Функция ЗавершитьРедактированиеМодели(Построитель)
	Модель = Построитель.ПолучитьМодель();
	КонструкторЗапросовФормы.МодельЗапросаВоВременноеХранилище(ЭтотОбъект, Модель);
	Модифицированность = Истина;
	Возврат Модель;
КонецФункции

&НаСервере
Функция ПараметрыОткрытияВложенногоЗапроса(ИдентификаторИсточника = Неопределено)
	ПараметрыОткрытия = КонструкторЗапросовКлиентСерверФормы.ПараметрыРедактораВложенногоЗапроса();  
	ПараметрыОткрытия.ИндексЗапросаПакета = ИндексЗапроса;
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	
	Если ЭтоВложенныйЗапрос Тогда
		СписокДоступныхВТ = ОписаниеДоступныхВТИзВременногоХранилища();
	Иначе	
		СписокДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(МодельЗапроса, ИндексЗапроса);
	КонецЕсли;		
	
	ПараметрыОткрытия.АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(СписокДоступныхВТ);
	
	Оператор = ТекущийОператорЗапроса(МодельЗапроса);
	ИсточникиЗапроса = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(Оператор.Источники.Элементы, "ИдентификаторИсточника");
	
	Источник = ИсточникиЗапроса.Получить(ИдентификаторИсточника);
	Если Источник = Неопределено Тогда
		МодельЗапросаВложенногоЗапроса = МодельЗапросаУтилиты.СоздатьВложенныйЗапрос();
	Иначе
		МодельЗапросаВложенногоЗапроса = Источник.Источник.ЗапросВыбора;	
	КонецЕсли; 	
	
	ПараметрыОткрытия.АдресМоделиЗапроса = ПоместитьВоВременноеХранилище(МодельЗапросаВложенногоЗапроса);
	
	Возврат ПараметрыОткрытия;
КонецФункции 

&НаСервере
Функция ПараметрыОткрытияРедактораОписанияВТ(ИндексИсточника = Неопределено)
	ПараметрыРедактора = Новый Структура("АдресСпискаПолей, ИмяТаблицы, ИндексЗапросаСоздания");
	
	Если ИндексИсточника = Неопределено Тогда
		Возврат ПараметрыРедактора;
	КонецЕсли;
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	ТекущийОператор = ТекущийОператорЗапроса(МодельЗапроса);
	
	Источник = ТекущийОператор.Источники.Элементы[ИндексИсточника].Источник;
	Если Источник.Тип <> "ИсточникДанныхВременнаяТаблица" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоляВТ = Новый Массив();
	Для Каждого ИмяПоля Из Источник.ОписаниеВТ.ПорядокКолонок Цикл
		Поле = Новый Структура("Имя, ТипЗначения");
		Поле.Имя = ИмяПоля;
		Поле.ТипЗначения = Источник.ОписаниеВТ.Колонки.Получить(ВРег(ИмяПоля));
		
		ПоляВТ.Добавить(Поле);
	КонецЦикла;	
	ИмяВТ = Источник.ОписаниеВТ.Имя;
	
	ПараметрыРедактора.АдресСпискаПолей = ПоместитьВоВременноеХранилище(ПоляВТ);
	ПараметрыРедактора.ИмяТаблицы = ИмяВТ;
	ПараметрыРедактора.ИндексЗапросаСоздания = Источник.ОписаниеВТ.ИндексЗапросаСоздания; 
	
	Возврат ПараметрыРедактора;
КонецФункции
 
&НаКлиенте
Процедура ЗавершитьРедактированиеВложенногоЗапроса(РезультатРедактирования, ДополнительынеПараметры) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДополнительынеПараметры.ИдентификаторИсточника) Тогда
		ИзменитьВложенныйЗапрос(
			ДополнительынеПараметры.ИдентификаторИсточника, 
			РезультатРедактирования.АдресМоделиЗапроса);
	Иначе
		ДобавитьВложенныйЗапрос(РезультатРедактирования.АдресМоделиЗапроса);
	КонецЕсли;
КонецПроцедуры      

&НаСервере
Процедура ПриДобавленииИсточника(МодельЗапроса)
	ДоступныеТаблицыИБ = ДоступныеТаблицыИБ();
	 
	Оператор = ТекущийОператорЗапроса(МодельЗапроса); 
	ИстчоникОператора = Оператор.Источники.Элементы[Оператор.Источники.Элементы.ВГраница()];
	
	СтрокиДереваПоПсевданимам = Новый Соответствие;
	УзелИсточника = КонструкторЗапросовФормы.ДобавитьТаблицу(Источники, ИстчоникОператора, ДоступныеТаблицыИБ);
	УзелИсточника.ИндексИсточника = Оператор.Источники.Элементы.ВГраница();
	СтрокиДереваПоПсевданимам.Вставить(ИстчоникОператора.Источник.Псевдоним, УзелИсточника);		
		
	ДобавитьУзелИсточникаВСоединения(Соединения.ПолучитьЭлементы()[0], ИстчоникОператора.Источник, СтрокиДереваПоПсевданимам);		
	ОбновитьДанныеФормыПриИзмененииИсточников(Оператор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандТаблицыИсточники()
	ТекущиеДанные = Элементы.Источники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ИзменитьИсточникЗапроса.Доступность = Ложь;
		Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;
		Элементы.ИсточникиУдалить.Доступность = Истина;
		Элементы.ИсточникиМенюУдалить.Доступность = Истина;
		Элементы.ПереименоватьИсточник.Доступность = Истина;	
	ИначеЕсли КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТекущиеДанные.ТипЗначения, "ИсточникДанныхТаблица") Тогда
		Элементы.ИзменитьИсточникЗапроса.Доступность = Ложь;
		Элементы.ИсточникиУдалить.Доступность = Истина;
		Элементы.ИсточникиМенюУдалить.Доступность = Истина;
		Элементы.ПереименоватьИсточник.Доступность = Истина;
		Если СтрРазделить(ТекущиеДанные.Имя, ".").Количество() = 3 Тогда	
			// TODO поддержать установку параметров для виртуальных таблиц
			Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;
		Иначе
			Элементы.ИзменитьИсточникЗапроса.Доступность = Ложь;
			// TODO поддержать установку параметров для виртуальных таблиц
			Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;	
		КонецЕсли;
	ИначеЕсли КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТекущиеДанные.ТипЗначения, "ИсполняемоеПредставление") Тогда 
		Элементы.ИзменитьИсточникЗапроса.Доступность = Ложь;
		Элементы.ОткрытьПараметрыТаблицы.Доступность = Истина;	
		Элементы.ИсточникиУдалить.Доступность = Истина;
		Элементы.ИсточникиМенюУдалить.Доступность = Истина;
		Элементы.ПереименоватьИсточник.Доступность = Истина;
	ИначеЕсли КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТекущиеДанные.ТипЗначения, "ИсточникДанныхВременнаяТаблица") Тогда 
		Элементы.ИзменитьИсточникЗапроса.Доступность = Истина;
		Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;	
		Элементы.ИсточникиУдалить.Доступность = Истина;
		Элементы.ИсточникиМенюУдалить.Доступность = Истина;
		Элементы.ПереименоватьИсточник.Доступность = Истина;
	ИначеЕсли КонструкторЗапросовКлиентСерверФормы.СодержитТип(ТекущиеДанные.ТипЗначения, "ИсточникДанныхВложенныйЗапрос") Тогда 
		Элементы.ИзменитьИсточникЗапроса.Доступность = Истина;
		Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;
		Элементы.ИсточникиУдалить.Доступность = Истина;
		Элементы.ИсточникиМенюУдалить.Доступность = Истина;
		Элементы.ПереименоватьИсточник.Доступность = Истина;
	Иначе
		Элементы.ИзменитьИсточникЗапроса.Доступность = Ложь;
		Элементы.ОткрытьПараметрыТаблицы.Доступность = Ложь;	
		Элементы.ИсточникиУдалить.Доступность = Ложь;
		Элементы.ИсточникиМенюУдалить.Доступность = Ложь;
		Элементы.ПереименоватьИсточник.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
