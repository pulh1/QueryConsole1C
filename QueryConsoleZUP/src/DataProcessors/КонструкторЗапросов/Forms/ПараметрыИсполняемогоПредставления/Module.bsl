
// BSLLS-off

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресМоделиЗапроса = Параметры.АдресМоделиЗапроса;
	ИндексЗапроса = Параметры.ИндексЗапроса;  
	ИндексОператораЗапроса = Параметры.ИндексОператораЗапроса;
	ИмяТаблицыПредставления = Параметры.ИмяТаблицыПредставления;  
	ПсевдонимПредставления = Параметры.ПсевдонимПредставления;  
	
	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениТаблицы(ИмяТаблицыПредставления);	
	ДобавитьЭлементыОтображенияПараметров(ОписаниеПредставления);
	
	Модель = ПолучитьИзВременногоХранилища(АдресМоделиЗапроса);
	КонструкторЗапросовФормы.МодельЗапросаВоВременноеХранилище(ЭтотОбъект, Модель);
	
	Если Модель.Тип = "ЗапросВыбора" Тогда
		Оператор = Модель.Операторы[ИндексОператораЗапроса];
	Иначе
		Оператор = Модель.Элементы[ИндексЗапроса].Операторы[ИндексОператораЗапроса];
	КонецЕсли;
	
	ПараметрыПредставления = Неопределено;
	ВТФильтр = Неопределено;
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Если ВРег(Источник.Источник.Псевдоним) = ВРег(ПсевдонимПредставления) Тогда
			ПараметрыПредставления = Источник.Источник.Параметры; 
			ВТФильтр = Источник.Источник.ВТФильтр;
			Отбор = Источник.Источник.Отбор;
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
		
	Если ЗначениеЗаполнено(Параметры.АдресСпискаДостпныхВТ) Тогда
		СписокДоступныхВТ = ПолучитьИзВременногоХранилища(Параметры.АдресСпискаДостпныхВТ);	
	Иначе
		СписокДоступныхВТ = МодельЗапросаУтилиты.ОписаниеДоступныхВременныхТаблиц(Модель, ИндексЗапроса);
	КонецЕсли;
	КонструкторЗапросовФормы.ОписаниеДоступныхВТВоВременноеХранилище(ЭтотОбъект, СписокДоступныхВТ);
	
	ПараметрыПредставленияВДанные(ПараметрыПредставления, ВТФильтр, Отбор);
КонецПроцедуры   

&НаСервере
Процедура ПараметрыПредставленияВДанные(Знач ПараметрыПредставления, Знач ВТФильтр = Неопределено, Знач Отбор = Неопределено)
	Если ПараметрыПредставления = Неопределено Тогда
		ПараметрыПредставления = Новый Массив();
	КонецЕсли;
		
	Если ВТФильтр <> Неопределено Тогда
		ПараметрВТФильтрВДанныеФормы(ВТФильтр);	
	КонецЕсли;
		
	Для Каждого Параметр Из ПараметрыПредставления Цикл 
		ПараметрКонстантаВДанныеФормы(Параметр);
	КонецЦикла;
	
	Если Отбор <> Неопределено Тогда
		ПараметрОтборВДанныеФормы(Отбор);
	КонецЕсли;
	
	Если ВТФильтр = Неопределено Тогда
		ЗапросВТФильтрВоВременноеХранилище(Неопределено);
	Иначе
		ЗапросВТФильтрВоВременноеХранилище(МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(ВТФильтр.ЗапросВыбора));
	КонецЕсли;
КонецПроцедуры	      

&НаСервере
Процедура ПараметрВТФильтрВДанныеФормы(Параметр)    
	ЭтотОбъект["ЗапросВТФильтр"] = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(Параметр.ЗапросВыбора);   
	 
	Для Индекс = 0 По Параметр.Поля.ВГраница() Цикл 
		Поле = Параметр.Поля[Индекс]; 	
		Отбор = Новый Структура("ПолеФильтраДляПоиска", ВРег(Поле));
		СтрокиТаблицы = ЭтотОбъект["ПоляФильтра"].НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиТаблицы) Тогда
			СтрокиТаблицы[0].ПолеИсточника = Параметр.ЗапросВыбора.Колонки[Индекс].Имя; 
			СтрокиТаблицы[0].Использование = Истина;
		КонецЕсли;	
	КонецЦикла;	
	ЗаполнитьСпискоВыбораПолейФильтра(Параметр.ЗапросВыбора);
КонецПроцедуры

&НаСервере
Процедура ПараметрОтборВДанныеФормы(Параметр)    
	ГенераторТекстовВыражений = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений(); 
	ГенераторТекстовВыражений.УстановитьВыводПсевдонимовИсточников(Ложь);
	ЭтотОбъект["Отбор"] = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Параметр.Выражение, ГенераторТекстовВыражений);
КонецПроцедуры

&НаСервере
Функция ПараметрыИзДанныхФормыВоВременноеХранилище()
	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениТаблицы(ИмяТаблицыПредставления);
	
	ПараметрыПредставления = Новый Структура("ОписаниеВТФильтр, ПараметрыКонстанты, Отбор");
	ПараметрыПредставления.ПараметрыКонстанты = Новый Массив();
	Если ОписаниеПредставления.ОписаниеВТФильтр <> Неопределено Тогда
		ЗапросВТФильтр = ЗапросВТФильтрИзВременногоХранилища();
		Если ЗапросВТФильтр <> Неопределено Тогда
			ПараметрыПредставления.ОписаниеВТФильтр = ПараметрВТФильтрИзДанныхФормы(ОписаниеПредставления.ОписаниеВТФильтр, ЗапросВТФильтр);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ОписаниеПараметра Из ОписаниеПредставления.ОписаниеПараметров Цикл
		Параметр = ПараметрКонтсантаИзДанныхФормы(ОписаниеПараметра);
		
		Если Параметр <> Неопределено Тогда  
			ПараметрыПредставления.ПараметрыКонстанты.Добавить(Параметр);
		КонецЕсли;	
	КонецЦикла;	
	
	ПараметрыПредставления.Отбор = ЭтотОбъект["Отбор"];
		
	Возврат ПоместитьВоВременноеХранилище(ПараметрыПредставления);	
КонецФункции	

&НаСервере
Функция ПараметрВТФильтрИзДанныхФормы(ОписаниеПараметра, ЗапросВТФильтр)
	ПараметрВТФильтр = ЭлементыМоделиЗапроса.НовыйПараметрИсполняемогоПредставленияВТФильтр();	
	
	ПараметрВТФильтр.ЗапросВыбора = ЗапросВТФильтр;
	
	Для Каждого Колонка Из ЗапросВТФильтр.Колонки Цикл
		Отбор = Новый Структура("ПолеИсточника", Колонка.Имя);
		СтрокиТаблицы = ЭтотОбъект["ПоляФильтра"].НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиТаблицы)
			И СтрокиТаблицы[0].Использование Тогда
			
			ПараметрВТФильтр.Поля.Добавить(СтрокиТаблицы[0].ПолеФильтра);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ПараметрВТФильтр;
КонецФункции

Функция ПараметрКонтсантаИзДанныхФормы(ОписаниеПараметра)
	Если Не ЭтотОбъект["ИспользованиеКонстанты" + ОписаниеПараметра.Имя] Тогда
		Возврат Неопределено;     
	КонецЕсли;	
	
	ПараметрПредставления = ОбработкаПредставлениеЗапросов.ПараметрКонстантаПоОписанию(ОписаниеПараметра);
	Если ЭтотОбъект["ТипКонстанты" + ПараметрПредставления.Имя] = "ПараметрЗапроса" Тогда
		ПараметрПредставления.Значение = ЭтотОбъект["ПараметрЗапроса" + ПараметрПредставления.Имя];    
		ПараметрПредставления.ЭтоПараметрЗапроса = Истина;
	Иначе
		ПараметрПредставления.Значение = ЭтотОбъект["ЗначениеКонстанты" + ПараметрПредставления.Имя];
	КонецЕсли;	
	
	Возврат ПараметрПредставления;
КонецФункции

Процедура ПараметрКонстантаВДанныеФормы(Параметр)    
	ЭтотОбъект["ИспользованиеКонстанты" + Параметр.Имя] = Истина;  
	ЭлементСтраницы = Элементы.Найти("СтраницыГруппаКонстанта" + Параметр.Имя);
	Если Параметр.ЭтоПараметрЗапроса Тогда	
		ЭтотОбъект["ТипКонстанты" + Параметр.Имя] = "ПараметрЗапроса";  
		ЭтотОбъект["ПараметрЗапроса" + Параметр.Имя] = Параметр.Значение; 
		
		Если ЭлементСтраницы <> Неопределено Тогда
			ЭлементСтраницы.ТекущаяСтраница = Элементы["СтраницыГруппаПараметрЗапроса" + Параметр.Имя];
		КонецЕсли;	
	Иначе
		ЭтотОбъект["ТипКонстанты" + Параметр.Имя] = "Константа";
		ЭтотОбъект["ЗначениеКонстанты" + Параметр.Имя] = Параметр.Значение; 
		
		Если ЭлементСтраницы <> Неопределено Тогда
			ЭлементСтраницы.ТекущаяСтраница = Элементы["СтраницыКонстантаЗначение" + Параметр.Имя];
		КонецЕсли;
	КонецЕсли;	  
КонецПроцедуры

Процедура ДобавитьЭлементыОтображенияПараметров(ОписаниеПредставления)  
	Если ОписаниеПредставления.ОписаниеВТФильтр <> Неопределено Тогда
		ДобавитьОтборажениеПараметраВТФильтр(ОписаниеПредставления.ОписаниеВТФильтр); 
	КонецЕсли;   
	
	ДобавитьЭлементыОтображенияПараметровКонстант(ОписаниеПредставления.ОписаниеПараметров);
	
	Если ОписаниеПредставления.ОписаниеОтбора <> Неопределено
		И ОписаниеПредставления.ОписаниеОтбора.ДоступенВПараметрах Тогда
		
		ДобавитьОтборажениеПараметраОтбор(ОписаниеПредставления);
	КонецЕсли;
КонецПроцедуры	

Процедура ДобавитьЭлементыОтображенияПараметровКонстант(ОписаниеПараметровКонстант)
	ГруппаКонстант = ДобавитьГруппуКонстант();
	
	Для Каждого ОписаниеПараметра Из ОписаниеПараметровКонстант Цикл		
		ДобавитьОтборажниеПараметраКонстанта(ОписаниеПараметра, ГруппаКонстант);	
	КонецЦикла;		
КонецПроцедуры	

Функция ДобавитьГруппуКонстант()
	ПараметрГруппа = Элементы.Добавить("ПараметрыКонстантаГруппа", Тип("ГруппаФормы"));      
	ПараметрГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПараметрГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	ПараметрГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	//ПараметрГруппа.Заголовок = "Константы";    
	ПараметрГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;   
	
	Возврат ПараметрГруппа;
КонецФункции

Функция ДобавитьГруппуПараметра(ОписаниеПараметра)
	ПараметрГруппа = Элементы.Добавить("ПараметрГруппа" + ОписаниеПараметра.Имя, Тип("ГруппаФормы"));      
	ПараметрГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПараметрГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	ПараметрГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ПараметрГруппа.Заголовок = ОписаниеПараметра.Имя;    
	ПараметрГруппа.РастягиватьПоГоризонтали = Истина;  
	
	Возврат ПараметрГруппа;
КонецФункции

Функция ДобавитьСтраницыТиповПараметра(ОписаниеПараметра, Родитель)
	ДобавляемыеРеквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы("ТипПараметра" + ОписаниеПараметра.Имя, Новый ОписаниеТипов("Строка"), "", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ТипПараметра = Элементы.Добавить("ТипПараметра" + ОписаниеПараметра.Имя, Тип("ПолеФормы"), Родитель);
	ТипПараметра.ПутьКДанным = "ТипПараметра" + ОписаниеПараметра.Имя;
	ТипПараметра.Вид = ВидПоляФормы.ПолеПереключателя;
	ТипПараметра.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;  
	ТипПараметра.ВидПереключателя = ВидПереключателя.Тумблер;
	Для Каждого ДопустимыйТипПараметра Из ОписаниеПараметра.ДопустимыеТипы Цикл
		ТипПараметра.СписокВыбора.Добавить(ДопустимыйТипПараметра.Тип, ПредставлениеТипаПараметра(ДопустимыйТипПараметра.Тип));	
	КонецЦикла;	
	
	СтраницыГруппа = Элементы.Добавить("СтраницыГруппа" + ОписаниеПараметра.Имя, Тип("ГруппаФормы"), Родитель);      
	СтраницыГруппа.Вид = ВидГруппыФормы.Страницы;
	СтраницыГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	СтраницыГруппа.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;    
	
	Возврат СтраницыГруппа;
КонецФункции		

Процедура ДобавитьОтборажениеПараметраВТФильтр(ОписаниеВТФильтр)
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ЗапросВТФильтр", Новый ОписаниеТипов("Строка"), "", , Истина);     
	ДобавляемыеРеквизиты.Добавить(Реквизит);     
	Реквизит = Новый РеквизитФормы("ПоляФильтра", Новый ОписаниеТипов("ТаблицаЗначений"), "", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("Обязательный", Новый ОписаниеТипов("Булево"), "ПоляФильтра", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПолеФильтра", Новый ОписаниеТипов("Строка"), "ПоляФильтра", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);   
	Реквизит = Новый РеквизитФормы("ПолеФильтраДляПоиска", Новый ОписаниеТипов("Строка"), "ПоляФильтра", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ПолеИсточника", Новый ОписаниеТипов("Строка"), "ПоляФильтра", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит); 
	Реквизит = Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), "ПоляФильтра", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ОписаниеФильтраГруппа = Элементы.Добавить("ОписаниеФильтраГруппа", Тип("ГруппаФормы"));      
	ОписаниеФильтраГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ОписаниеФильтраГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;   
	ОписаниеФильтраГруппа.РастягиватьПоГоризонтали = Истина;
	
	ЗапросВТФильтрГруппа = Элементы.Добавить("ЗапросВТФильтрГруппа", Тип("ГруппаФормы"), ОписаниеФильтраГруппа);      
	ЗапросВТФильтрГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//ЗапросВТФильтрГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	//ЗапросВТФильтрГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЗапросВТФильтрГруппа.Заголовок = "Запрос"; 
	ЗапросВТФильтрГруппа.РастягиватьПоГоризонтали = Истина;
	
	ПоляФильтраГруппа = Элементы.Добавить("ПоляФильтраГруппа", Тип("ГруппаФормы"), ОписаниеФильтраГруппа);      
	ПоляФильтраГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//ПоляФильтраГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	//ПоляФильтраГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение; 
	ПоляФильтраГруппа.РастягиватьПоГоризонтали = Ложь;
	ПоляФильтраГруппа.Заголовок = "Поля фильтра";  
	
	ЗапросВТФильтр = Элементы.Добавить("ЗапросВТФильтр", Тип("ПолеФормы"), ЗапросВТФильтрГруппа);
	ЗапросВТФильтр.ПутьКДанным = "ЗапросВТФильтр";
	ЗапросВТФильтр.Вид = ВидПоляФормы.ПолеВвода;
	ЗапросВТФильтр.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;  
	ЗапросВТФильтр.МногострочныйРежим = Истина;    
	ЗапросВТФильтр.РастягиватьПоГоризонтали = Истина;    
	ЗапросВТФильтр.РастягиватьПоВертикали = Истина; 
	ЗапросВТФильтр.Ширина = 150;
	ЗапросВТФильтр.Высота = 10;
	ЗапросВТФильтр.МаксимальнаяШирина = 500; 
	ЗапросВТФильтр.КнопкаВыбора = Истина;    
	ЗапросВТФильтр.УстановитьДействие("НачалоВыбора", "ТекстЗапросаНачалоВыбора");
	ЗапросВТФильтр.УстановитьДействие("ПриИзменении", "ПриИзмененииТекстаЗапроса");
		
	Кнопка = Элементы.Добавить("КонструкторЗапроса", Тип("КнопкаФормы"), ЗапросВТФильтр.КонтекстноеМеню);
	Кнопка.ИмяКоманды = "ОткрытьРасширеннйКонструкторЗапросов";
		
	ПоляФильтра = Элементы.Добавить("ПоляФильтра", Тип("ТаблицаФормы"), ПоляФильтраГруппа);
	ПоляФильтра.ПутьКДанным = "ПоляФильтра";
	ПоляФильтра.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;   
	ПоляФильтра.ИзменятьПорядокСтрок = Ложь;
	ПоляФильтра.ИзменятьСоставСтрок = Ложь;
	ПоляФильтра.Ширина = 32;
	ПоляФильтра.РастягиватьПоГоризонтали = Ложь;
	ПоляФильтра.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;		
	ПоляФильтра.Высота = 12; 
	
	ПолеФильтраИспользование = Элементы.Добавить("ПолеФильтраИспользование", Тип("ПолеФормы"), ПоляФильтра);
	ПолеФильтраИспользование.ПутьКДанным = "ПоляФильтра" + ".Использование"; 
	ПолеФильтраИспользование.Вид = ВидПоляФормы.ПолеФлажка;     
	ПолеФильтраИспользование.ОтображатьВШапке = Ложь;	
	
	ПолеФильтра = Элементы.Добавить("ПолеФильтра", Тип("ПолеФормы"), ПоляФильтра);
	ПолеФильтра.ПутьКДанным = "ПоляФильтра" + ".ПолеФильтра";  
	
	ПолеИсточника = Элементы.Добавить("ПолеИсточника", Тип("ПолеФормы"), ПоляФильтра);
	ПолеИсточника.ПутьКДанным = "ПоляФильтра" + ".ПолеИсточника"; 
	ПолеИсточника.Вид = ВидПоляФормы.ПолеВвода;     
	ПолеИсточника.РежимВыбораИзСписка = Истина;  
	ПолеИсточника.КнопкаОчистки = Истина;   
	ПолеИсточника.РедактированиеТекста = Ложь;
	
	ДобавитьУсловноеОформлениеДляПолейФильтра();
	
	ЕстьНеобязательныеПоляФильтра = Ложь;
	Для Каждого ОписаниеПараметраФильтра Из ОписаниеВТФильтр.ПоляФильтра Цикл 
		СтрокаТаблицы = ЭтотОбъект["ПоляФильтра"].Добавить();
		СтрокаТаблицы.ПолеФильтра = ОписаниеПараметраФильтра.Имя; 
		СтрокаТаблицы.ПолеФильтраДляПоиска = ВРег(ОписаниеПараметраФильтра.Имя); 
		СтрокаТаблицы.Обязательный = ОписаниеПараметраФильтра.Обязательный;  
		СтрокаТаблицы.Использование = ОписаниеПараметраФильтра.Обязательный;
		Если Не ОписаниеПараметраФильтра.Обязательный Тогда
			ЕстьНеобязательныеПоляФильтра = Истина;
		КонецЕсли;		
	КонецЦикла;	 
	
	ПолеФильтраИспользование.Видимость = ЕстьНеобязательныеПоляФильтра; 
КонецПроцедуры	   

Процедура ДобавитьОтборажениеПараметраОтбор(ОписаниеОтбора)
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("Отбор", Новый ОписаниеТипов("Строка"), "", , Истина);     
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ОписаниеОтбораГруппа = Элементы.Добавить("ОписаниеОтбораГруппа", Тип("ГруппаФормы"));      
	ОписаниеОтбораГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ОписаниеОтбораГруппа.РастягиватьПоГоризонтали = Истина;
	ОписаниеОтбораГруппа.Заголовок = "Отбор"; 
	
	
	ЭлементОтбор = Элементы.Добавить("Отбор", Тип("ПолеФормы"), ОписаниеОтбораГруппа);
	ЭлементОтбор.ПутьКДанным = "Отбор";
	ЭлементОтбор.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОтбор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;  
	ЭлементОтбор.МногострочныйРежим = Истина;    
	ЭлементОтбор.РастягиватьПоГоризонтали = Истина;    
	ЭлементОтбор.РастягиватьПоВертикали = Истина; 
	ЭлементОтбор.Ширина = 150;
	ЭлементОтбор.Высота = 10;
	ЭлементОтбор.МаксимальнаяШирина = 500; 
	ЭлементОтбор.КнопкаВыбора = Истина;    
	ЭлементОтбор.УстановитьДействие("НачалоВыбора", "Подключаемый_ОтборНачалоВыбора");		
КонецПроцедуры	   

Процедура ДобавитьУсловноеОформлениеДляПолейФильтра()
	ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоляФильтра" + ".Использование");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;    
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоляФильтра" + ".ПолеИсточника");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование = Истина;   
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолеИсточника");
	ОформляемоеПоле.Использование = Истина;   
	
	ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// TODO  если фильтр не обязательный и текст запроса не заполнен, то не подсвечивать
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоляФильтра" + ".Обязательный");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;   
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПолеФильтраИспользование");
	ОформляемоеПоле.Использование = Истина;	
КонецПроцедуры	

Процедура ДобавитьОтборажниеПараметраКонстанта(ОписаниеПараметра, Родитель)
	ИмяПараметра = ОписаниеПараметра.Имя;
	
	ДобавляемыеРеквизиты = Новый Массив;  
	
	ДопустимВводЗначения = ДопустимВводЗначенияКонстанты(ОписаниеПараметра.ТипКонстанты);
	
	Реквизит = Новый РеквизитФормы("ЗначениеКонстанты" + ИмяПараметра, ОписаниеПараметра.ТипКонстанты, "", , Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);   
	
	Реквизит = Новый РеквизитФормы("ТипКонстанты" + ИмяПараметра, Новый ОписаниеТипов("Строка"), "", , Истина); 
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("ИспользованиеКонстанты" + ИмяПараметра, Новый ОписаниеТипов("Булево"), "", , Истина);
	ДобавляемыеРеквизиты.Добавить(Реквизит);  
	
	Реквизит = Новый РеквизитФормы("ПараметрЗапроса" + ИмяПараметра, Новый ОписаниеТипов("Строка"), "", , Истина);     
	ДобавляемыеРеквизиты.Добавить(Реквизит);   

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ПараметрГруппа = Элементы.Добавить("ПараметрГруппа" + ОписаниеПараметра.Имя, Тип("ГруппаФормы"), Родитель);      
	ПараметрГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПараметрГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	ПараметрГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;  
	ПараметрГруппа.РастягиватьПоГоризонтали = Истина;   
	ПараметрГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;  
	ПараметрГруппа.Заголовок = ИмяПараметра;
	
	ФлагИспользование = Элементы.Добавить("ИспользованиеКонстанты" + ИмяПараметра, Тип("ПолеФормы"), ПараметрГруппа);
	ФлагИспользование.ПутьКДанным = "ИспользованиеКонстанты" + ИмяПараметра;
	ФлагИспользование.Вид = ВидПоляФормы.ПолеФлажка;
	ФлагИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;  
	
	Страницы = Новый Массив;
	
	СтраницыГруппа = Элементы.Добавить("СтраницыГруппаКонстанта" + ИмяПараметра, Тип("ГруппаФормы"), ПараметрГруппа);      
	СтраницыГруппа.Вид = ВидГруппыФормы.Страницы;
	СтраницыГруппа.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	СтраницыГруппа.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;   
		
	СтраницаКонстанты = Элементы.Добавить("СтраницыКонстантаЗначение" + ИмяПараметра, Тип("ГруппаФормы"), СтраницыГруппа);      
	СтраницаКонстанты.Вид = ВидГруппыФормы.Страница;
	СтраницаКонстанты.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;

	СтраницаПараметр =  Элементы.Добавить("СтраницыГруппаПараметрЗапроса" + ИмяПараметра, Тип("ГруппаФормы"), СтраницыГруппа);      
	СтраницаПараметр.Вид = ВидГруппыФормы.Страница;
	СтраницаПараметр.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	
	СтраницыГруппа.ТекущаяСтраница = СтраницаКонстанты;  

	ТипПараметра = Элементы.Добавить("ТипКонстанты" + ИмяПараметра, Тип("ПолеФормы"), ПараметрГруппа);
	ТипПараметра.ПутьКДанным = "ТипКонстанты" + ИмяПараметра;
	ТипПараметра.Вид = ВидПоляФормы.ПолеПереключателя;
	ТипПараметра.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;  
	ТипПараметра.ВидПереключателя = ВидПереключателя.Тумблер;   
	ТипПараметра.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	ТипПараметра.СписокВыбора.Добавить("Константа", "Константа"); 
	ТипПараметра.СписокВыбора.Добавить("ПараметрЗапроса", "Параметр запроса");  
	ТипПараметра.УстановитьДействие("ПриИзменении", "Подключаемый_ТипКонстантыПриИзменении");
	ТипПараметра.Доступность = Ложь;
	
	ЭтотОбъект["ТипКонстанты" + ИмяПараметра] = "Константа";
	
	ПараметрЗапроса = Элементы.Добавить("ПараметрЗапроса" + ИмяПараметра, Тип("ПолеФормы"), СтраницаПараметр);      
	ПараметрЗапроса.Вид = ВидПоляФормы.ПолеВвода;
	ПараметрЗапроса.ПутьКДанным = "ПараметрЗапроса" + ИмяПараметра; 
	ПараметрЗапроса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет; 
	ПараметрЗапроса.Ширина = 4;    
	ПараметрЗапроса.РастягиватьПоГоризонтали = Истина;
	ПараметрЗапроса.МаксимальнаяШирина = 7; 
	ПараметрЗапроса.ПодсказкаВвода = "Введите имя параметра запроса";
	
	ЗначениеКонстанты = Элементы.Добавить("ЗначениеКонстанты" + ИмяПараметра, Тип("ПолеФормы"), СтраницаКонстанты);       
	ЗначениеКонстанты.Вид = ВидПоляФормы.ПолеВвода;
	ЗначениеКонстанты.ПутьКДанным = "ЗначениеКонстанты" + ИмяПараметра;           
	ЗначениеКонстанты.Ширина = 4;   
	ЗначениеКонстанты.РастягиватьПоГоризонтали = Истина;  
	ЗначениеКонстанты.МаксимальнаяШирина = 7;
	ЗначениеКонстанты.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;	 
	Если ОписаниеПараметра.ДоступныеЗначения.Количество() > 0 Тогда
		ЗначениеКонстанты.КнопкаВыпадающегоСписка = Истина;
		Для Каждого Значение Из ОписаниеПараметра.ДоступныеЗначения Цикл
			ЗначениеКонстанты.СписокВыбора.Добавить(Значение, Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ДопустимВводЗначения И ОписаниеПараметра.ДопустимПараметрЗапроса Тогда
		ТипПараметра.Доступность = Истина;
	ИначеЕсли ОписаниеПараметра.ДопустимПараметрЗапроса Тогда 
		СтраницыГруппа.ТекущаяСтраница = СтраницаПараметр;  
		ЭтотОбъект["ТипКонстанты" + ИмяПараметра] = "ПараметрЗапроса";
	КонецЕсли;	
	
	
	Если ЗначениеЗаполнено(ОписаниеПараметра.ЗначениеПоУмолчанию) Тогда
		ЭтотОбъект["ЗначениеКонстанты" + ИмяПараметра] = ОписаниеПараметра.ЗначениеПоУмолчанию;
	КонецЕсли; 
			
	Если ОписаниеПараметра.Обязательный Тогда
		ЭтотОбъект["ИспользованиеКонстанты" + ИмяПараметра] = Истина;   
		ФлагИспользование.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	ДобавитьУсловноеОформлениеПараметраКонстанты(ИмяПараметра, Истина, ОписаниеПараметра.ДопустимПараметрЗапроса);	
КонецПроцедуры  

Функция ДопустимВводЗначенияКонстанты(ТипКонстанты)
	Если ТипКонстанты.Типы().Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = ТипКонстанты.Типы()[0];
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Булево") Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

Процедура ДобавитьУсловноеОформлениеПараметраКонстанты(ИмяПараметра, ДопустимВводЗначения, ДопустимПараметрЗапроса)	
	Если ДопустимВводЗначения Тогда      
		ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;	
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользованиеКонстанты" + ИмяПараметра);
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;    

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначениеКонстанты" + ИмяПараметра);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;   
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗначениеКонстанты" + ИмяПараметра);
		ОформляемоеПоле.Использование = Истина;  
	КонецЕсли;
	
	Если ДопустимПараметрЗапроса Тогда
		ЭлементОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;	
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользованиеКонстанты" + ИмяПараметра);
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;    

		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначениеКонстанты" + ИмяПараметра);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;   
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗначениеКонстанты" + ИмяПараметра);
		ОформляемоеПоле.Использование = Истина;  	
	КонецЕсли;		
КонецПроцедуры	
	
Функция ПредставлениеТипаПараметра(Тип)
	Возврат Тип;	
КонецФункции	

Функция ОписаниеПараметровВТФильтр(ОписаниеПредставления)
	ОписаниеПараметров = Новый Массив;
	Для Каждого ОписаниеПараметра Из ОписаниеПредставления Цикл
		Если ОписаниеПараметра.Тип = "ОписаниеПараметраФильтр" Тогда
			ОписаниеПараметров.Добавить(ОписаниеПараметра);	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ОписаниеПараметров;
КонецФункции

Функция ОписаниеПараметровКонстант(ОписаниеПредставления)
	Результат = Новый Массив;
	ОписаниеОбязательныхПараметров = Новый Массив;  
	ОписаниеНеОбязательныхПараметров = Новый Массив;

	Для Каждого ОписаниеПараметра Из ОписаниеПредставления Цикл
		Если ОписаниеПараметра.Тип = "ОписаниеПараметраКонстанта" Тогда 
			Если ОписаниеПараметра.Обязательный Тогда
				ОписаниеОбязательныхПараметров.Добавить(ОписаниеПараметра);	
			Иначе
				ОписаниеНеОбязательныхПараметров.Добавить(ОписаниеПараметра);			
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ОписаниеПараметра Из ОписаниеОбязательныхПараметров Цикл
		Результат.Добавить(ОписаниеПараметра);
	КонецЦикла;	
	Для Каждого ОписаниеПараметра Из ОписаниеНеОбязательныхПараметров Цикл
		Результат.Добавить(ОписаниеПараметра);
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

Функция ЗапросВТФильтрИзВременногоХранилища(ДляИзменения = Ложь) 
	ЗапросВТФильтр = ПолучитьИзВременногоХранилища(АдресЗапросовВТФильтр);
	Если Не ДляИзменения Тогда
		ЗапросВТФильтрВоВременноеХранилище(ЗапросВТФильтр);	
	КонецЕсли;
	
	Возврат ЗапросВТФильтр;
КонецФункции	   

Процедура ЗапросВТФильтрВоВременноеХранилище(ЗапросВТФильтр) 
	АдресЗапросовВТФильтр = ПоместитьВоВременноеХранилище(ЗапросВТФильтр, УникальныйИдентификатор);
КонецПроцедуры	 

&НаКлиенте
Процедура ТекстЗапросаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	ПараметрыОткрытия = ПараметрыОткрытияВложенногоЗапроса();     
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеЗапросаФильтра", ЭтотОбъект);
	
	КонструкторЗапросовКлиент.ОткрытьРедакторЗапроса(ПараметрыОткрытия, ЭтотОбъект, Оповещение); 		  
КонецПроцедуры  

&НаКлиенте
Процедура Подключаемый_ОтборНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	ПараметрыОткрытия = ПараметрыОткрытияРедактораВыражений();    
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеОтбора", ЭтотОбъект);
	
	КонструкторЗапросовКлиент.ОткрытьРедакторВыражений(ПараметрыОткрытия, Оповещение);	  
КонецПроцедуры  

&НаКлиенте
Процедура ЗавершитьРедактированиеОтбора(РезультатРедактирования, ДополнительынеПараметры = Неопределено) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;	
	
	Модифицированность = Истина;
	ЭтотОбъект["Отбор"] = РезультатРедактирования.ТекстВыражения;
КонецПроцедуры  

&НаСервере
Функция ПараметрыОткрытияРедактораВыражений()
	ПараметрыОткрытия = КонструкторЗапросовФормы.НовыйПараметрыРедактораВыражений();   
	
	МодельЗапроса = КонструкторЗапросовФормы.МодельЗапросаИзВременногоХранилища(ЭтотОбъект);
	Если МодельЗапроса.Тип = "ЗапросВыбора" Тогда
		Оператор = МодельЗапроса.Операторы[ИндексОператораЗапроса];
	Иначе
		Оператор = МодельЗапроса.Элементы[ИндексЗапроса].Операторы[ИндексОператораЗапроса];
	КонецЕсли;
		
	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениТаблицы(ИмяТаблицыПредставления);
	
	МодельДляРедактора = МодельЗапросаУтилиты.СоздатьВложенныйЗапрос();
	Источник = ЭлементыМоделиЗапроса.НовыйИсточник();
	МодельДляРедактора.Операторы[0].Источники.Элементы.Добавить(Источник);
	Источник.Источник = ОбработкаПредставлениеЗапросов.ИсполняемоеПредставлениеПоОписанию(ОписаниеПредставления);
	
	Постоитель = МодельЗапросаУтилиты.СоздатьПостроительМодели(МодельДляРедактора);
	Для Каждого Поле Из ОписаниеПредставления.ОписаниеОтбора.ДоступныеПоля Цикл
		Постоитель.ДобавитьПолеВЗапрос(Поле, Поле);
	КонецЦикла;
	
	МодельДляРедактора = Постоитель.ПолучитьМодель();
	
	ПараметрыОткрытия.АдресМоделиЗапроса = ПоместитьВоВременноеХранилище(МодельДляРедактора, УникальныйИдентификатор);
	ПараметрыОткрытия.АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(Новый Массив(), УникальныйИдентификатор);
	ПараметрыОткрытия.ИндексЗапроса = 0;
	ПараметрыОткрытия.ИндексОператораЗапроса = 0;
	ПараметрыОткрытия.ЭтоВложенныйЗапрос = Истина;
	ПараметрыОткрытия.ТекстВыражения = ЭтотОбъект["Отбор"];
	ПараметрыОткрытия.ДоступныПоляВсехИсточников = Ложь;
	ПараметрыОткрытия.ИспользоватьПсевдонимИсточника = Ложь;
	
	Возврат ПараметрыОткрытия; 
КонецФункции

&НаКлиенте
Процедура ОткрытьРасширеннйКонструкторЗапросов(Команда)
	ПараметрыОткрытия = ПараметрыОткрытияВложенногоЗапроса();     
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеЗапросаФильтра", ЭтотОбъект);
	
	КонструкторЗапросовКлиент.ОткрытьРедакторЗапроса(ПараметрыОткрытия, ЭтотОбъект, Оповещение); 	
КонецПроцедуры  
	
&НаКлиенте
Процедура ПриИзмененииТекстаЗапроса(Элемент) 
	ТекстЗапроса = ЭтотОбъект["ЗапросВТФильтр"];  
	ПриИзмененииТекстаЗапросаНаСервере(ТекстЗапроса);
КонецПроцедуры  

&НаКлиенте
Процедура ЗавершитьРедактированиеЗапросаФильтра(РезультатРедактирования, ДополнительынеПараметры = Неопределено) Экспорт 
	Если РезультатРедактирования = Неопределено
		Или Не РезультатРедактирования.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;	
	
	ЗавершитьРедактированиеЗапросаФильтраНаСервере(РезультатРедактирования.АдресМоделиЗапроса);
КонецПроцедуры      

Процедура ЗавершитьРедактированиеЗапросаФильтраНаСервере(АдресМоделиЗапроса) Экспорт 
	ВТФильтр = ПолучитьИзВременногоХранилища(АдресМоделиЗапроса);
	УстановитьЗапросВТФильтр(ВТФильтр);	
	
	ЭтотОбъект["ЗапросВТФильтр"] = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(ВТФильтр);
КонецПроцедуры   

Процедура ПриИзмененииТекстаЗапросаНаСервере(ТекстЗапроса)  
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		СписокДостпныхВТ = КонструкторЗапросовФормы.ОписаниеДоступныхВТИзВременногоХранилища(ЭтотОбъект);
		МодельЗапроса = ОбработкаМоделиЗапроса.РазобратьТекстВложенногоЗапроса(ТекстЗапроса, СписокДостпныхВТ, ИндексЗапроса); 	
		УстановитьЗапросВТФильтр(МодельЗапроса);
	Иначе
		УстановитьЗапросВТФильтр(Неопределено);	
	КонецЕсли;
КонецПроцедуры	

Процедура УстановитьЗапросВТФильтр(МодельЗапроса)
	Модифицированность = Истина;
	
	ЗапросВТФильтрВоВременноеХранилище(МодельЗапроса);
	
	ТаблицаПолейФильтра = ЭтотОбъект["ПоляФильтра"];
	
	ИспользуемыеПоля = Новый Соответствие;
	ИспользуемыеСтрокиФильтра = Новый Соответствие();
	
	Для Каждого Колонка Из МодельЗапроса.Колонки Цикл  
		Если ИспользуемыеПоля.Получить(Колонка.Имя) = Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		Отбор = Новый Структура("ПолеИсточника", Колонка.Имя);
		СтрокиТаблицы = ТаблицаПолейФильтра.НайтиСтроки(Отбор);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ИспользуемыеПоля.Вставить(Колонка.Имя, Истина);  
			СтрокиТаблицы[0].Использование = Истина;
			ИспользуемыеСтрокиФильтра.Вставить(СтрокиТаблицы[0], Истина);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ПолеФильтраДляПоиска", ВРег(Колонка.Имя));
		СтрокиТаблицы = ТаблицаПолейФильтра.НайтиСтроки(Отбор);
		Если СтрокиТаблицы.Количество() > 0 Тогда    
			СтрокиТаблицы[0].ПолеИсточника = Колонка.Имя;
			СтрокиТаблицы[0].Использование = Истина;
			ИспользуемыеПоля.Вставить(Колонка.Имя, Истина);
			ИспользуемыеСтрокиФильтра.Вставить(СтрокиТаблицы[0], Истина);
			Продолжить;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПолейФильтра Цикл
		Если ИспользуемыеСтрокиФильтра.Получить(СтрокаТаблицы) = Неопределено Тогда
			СтрокаТаблицы.ПолеИсточника = "";
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСпискоВыбораПолейФильтра(МодельЗапроса);
КонецПроцедуры	

Процедура ЗаполнитьСпискоВыбораПолейФильтра(МодельЗапроса)
	Элемент = Элементы["ПолеИсточника"];
	Элемент.СписокВыбора.Очистить();
	Для Каждого Колонка Из МодельЗапроса.Колонки Цикл
		Элемент.СписокВыбора.Добавить(Колонка.Имя, Колонка.Имя);
	КонецЦикла;	
КонецПроцедуры	

Функция ПараметрыОткрытияВложенногоЗапроса()
	ПараметрыОткрытия = КонструкторЗапросовКлиентСерверФормы.ПараметрыРедактораВложенногоЗапроса();
	ПараметрыОткрытия.ИндексЗапросаПакета = ИндексЗапроса;  
	
	СпискоДостпныхВТ = КонструкторЗапросовФормы.ОписаниеДоступныхВТИзВременногоХранилища(ЭтотОбъект);
	ПараметрыОткрытия.АдресСпискаДоступныхВТ = ПоместитьВоВременноеХранилище(СпискоДостпныхВТ);
	
	МодельЗапроса = ЗапросВТФильтрИзВременногоХранилища();  
	Если МодельЗапроса = Неопределено Тогда
		МодельЗапроса = МодельЗапросаУтилиты.СоздатьВложенныйЗапрос();
	КонецЕсли; 	
	
	ПараметрыОткрытия.АдресМоделиЗапроса = ПоместитьВоВременноеХранилище(МодельЗапроса);
	
	Возврат ПараметрыОткрытия;
КонецФункции  

Функция ПараметрПредстпавленияПоИмени(ИмяПараметра, СписокПараметров)	
	Для Каждого Параметр Из СписокПараметров Цикл
		Если Параметр.Имя = ИмяПараметра Тогда
			Возврат Параметр;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипКонстантыПриИзменении(Элемент)
	ИмяПараметра = Сред(Элемент.Имя, СтрДлина("ТипКонстанты") + 1); 
	ТипКонстанты = ЭтотОбъект["ТипКонстанты" + ИмяПараметра];
		
	Если ТипКонстанты = "Константа" Тогда   
		Элементы["СтраницыГруппаКонстанта" + ИмяПараметра].ТекущаяСтраница = Элементы["СтраницыКонстантаЗначение" + ИмяПараметра];	
	Иначе
		Элементы["СтраницыГруппаКонстанта" + ИмяПараметра].ТекущаяСтраница = Элементы["СтраницыГруппаПараметрЗапроса" + ИмяПараметра];	
	КонецЕсли;				
КонецПроцедуры   

&НаКлиенте
Процедура ОК(Команда)
	Если Не Модифицированность Тогда
		Закрыть();  
		Возврат;
	КонецЕсли;
	
	ПезультатРедактирования = Новый Структура("АдресПараметровПредставления, Модифицированность", 
		ПараметрыИзДанныхФормыВоВременноеХранилище(), Модифицированность);	  
		
	ВыполнитьОбработкуОповещения(ЭтотОбъект.ОписаниеОповещенияОЗакрытии, ПезультатРедактирования);
	
	Закрыть();
КонецПроцедуры
