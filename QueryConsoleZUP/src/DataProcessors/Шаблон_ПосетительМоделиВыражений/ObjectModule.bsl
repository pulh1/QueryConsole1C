#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Этот метод является частью "контракта" для обработки вложенных запросов.
// Он должен быть реализован в тех посетителях, которые могут встретить вложенный запрос.
//
// Параметры:
//  УзелЗапроса - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура ПосетитьВложенныйЗапрос(УзелЗапроса) Экспорт
	
	//
	
КонецПроцедуры

// Бинарная операция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура БинарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Бинарная операция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
Процедура БинарнаяОперацияПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Оператор между при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорМежду
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорМеждуПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор между при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорМежду
Процедура ОператорМеждуПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Оператор проверки типа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиТипа
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПроверкиТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки типа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиТипа
Процедура ОператорПроверкиТипаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Оператор проверки на NULL при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиНаNULL
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПроверкиНаNULLПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки на NULL при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиНаNULL
Процедура ОператорПроверкиНаNULLПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Список выражений при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйСписокВыражений
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура СписокВыраженийПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Список выражений при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйСписокВыражений
Процедура СписокВыраженийПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Оператор В при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорВ
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорВПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор В при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорВ
Процедура ОператорВПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Логическое отрицание при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйЛогическоеОтрицание
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ЛогическоеОтрицаниеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Логическое отрицание при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйЛогическоеОтрицание
Процедура ЛогическоеОтрицаниеПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Унарная операция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйУнарнаяОперация
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура УнарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Унарная операция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйУнарнаяОперация
Процедура УнарнаяОперацияПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Оператор подобно при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПодобно
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПодобноПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор подобно при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПодобно
Процедура ОператорПодобноПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Разыменование при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйРазыменование
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура РазыменованиеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Разыменование при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйРазыменование
Процедура РазыменованиеПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Приведение типа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ПриведениеТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Приведение типа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
Процедура ПриведениеТипаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Выбор при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыбор
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ВыборПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выбор при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыбор
Процедура ВыборПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Константа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйКонстанта
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура КонстантаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Константа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйКонстанта
Процедура КонстантаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Параметр запроса при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПараметрЗапроса
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ПараметрЗапросаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Параметр запроса при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПараметрЗапроса
Процедура ПараметрЗапросаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Агрегатная функция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункция
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура АгрегатнаяФункцияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Агрегатная функция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункция
Процедура АгрегатнаяФункцияПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Агрегатная функция количество при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура АгрегатнаяФункцияКоличествоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Агрегатная функция количество при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество
Процедура АгрегатнаяФункцияКоличествоПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция часть периода числом при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияЧастьПериодаЧисломПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция часть периода числом при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
Процедура ФункцияЧастьПериодаЧисломПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция начало периода при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияНачалоПериода
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияНачалоПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция начало периода при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияНачалоПериода
Процедура ФункцияНачалоПериодаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция конец периода при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияКонецПериода
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияКонецПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция конец периода при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияКонецПериода
Процедура ФункцияКонецПериодаПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция добавить к дате при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДобавитьКДате
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияДобавитьКДатеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция добавить к дате при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДобавитьКДате
Процедура ФункцияДобавитьКДатеПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция дата время при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДатаВремя
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияДатаВремяПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция дата время при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДатаВремя
Процедура ФункцияДатаВремяПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция IsNull при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияIsNull
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияIsNullПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция IsNull при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияIsNull
Процедура ФункцияIsNullПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция представление при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставление
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияПредставлениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция представление при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставление
Процедура ФункцияПредставлениеПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция представление ссылки при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставлениеСсылки
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияПредставлениеСсылкиПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция представление ссылки при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставлениеСсылки
Процедура ФункцияПредставлениеСсылкиПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция тип значения при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТипЗначения
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияТипЗначенияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция тип значения при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТипЗначения
Процедура ФункцияТипЗначенияПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция значение при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЗначение
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияЗначениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция значение при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЗначение
Процедура ФункцияЗначениеПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция тип при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТип
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияТипПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция тип при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТип
Процедура ФункцияТипПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Функция разность дат при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияРазностьДат
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияРазностьДатПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция разность дат при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияРазностьДат
Процедура ФункцияРазностьДатПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

// Выражение все поля при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеВсеПоля
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ВыражениеВсеПоляПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выражение все поля при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеВсеПоля
Процедура ВыражениеВсеПоляПриВыходе(Выражение) Экспорт
	//
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли