Перем ИсходнаяСтрока;
Перем НомерТекущегоСимвола;
Перем ОбрабатываемыйСимвол;
Перем СимволБуфера;
Перем ТаблицаСлов;

Перем НомерТекущейСтроки;
Перем НомерСтрокиНачало;

Перем Цифры;
Перем НачальныеСимволыИдентфикаторов;
Перем ДопустимыеСимволыИдентфикаторов;
Перем МассивСимволовИдентифкаторов;
Перем МассивНачальныхСимволовИдентфикаторов;
Перем МассивСимволовЦифр;   
Перем ШаблонИдентфикатора;  
Перем ШаблонЛеескмы1;
Перем ШаблонЛеескмы2;  
Перем ШаблонЛеескмы1_1;

Перем КлючевыеСлова;
Перем Лексемы;

Перем ВремяПолученияИдентификатора Экспорт;
Перем ВремяУстановкиСимволов Экспорт;

#Region Ицниализация

Функция Иницализировать() Экспорт 
	ЗаполнитьКлючевыеСлова();
КонецФункции	

Процедура УстановитьОбрабатываемыйТекст(Текст) Экспорт
	ИсходнаяСтрока = Текст;
	НомерТекущегоСимвола = 0;
	НомерТекущейСтроки = 1;
	
	СимволБуфера = Сред(ИсходнаяСтрока, 1, 1);
	
	УстановитьОбрабатываемыйСимвол();
КонецПроцедуры	

Процедура ЗаполнитьКлючевыеСлова()
	КлючевыеСлова = Новый Соответствие;

	КлючевыеСлова.Вставить("ДОБАВИТЬКДАТЕ", Истина);
	КлючевыеСлова.Вставить("ПОМЕСТИТЬ", Истина);
	КлючевыеСлова.Вставить("ЗНАЧЕНИЕ", Истина);
	КлючевыеСлова.Вставить("ГОД", Истина);
	КлючевыеСлова.Вставить("ВЫРАЗИТЬ", Истина);
	КлючевыеСлова.Вставить("СРЕДНЕЕ", Истина);
	КлючевыеСлова.Вставить("ВСЕ", Истина);
	КлючевыеСлова.Вставить("ЕСТЬ", Истина);
	КлючевыеСлова.Вставить("ЧисловаяКонстанта", Истина);
	КлючевыеСлова.Вставить("ЧАС", Истина);
	КлючевыеСлова.Вставить("КОНЕЦПЕРИОДА", Истина);
	КлючевыеСлова.Вставить("СЕКУНДА", Истина);
	КлючевыеСлова.Вставить("ДЕНЬГОДА", Истина);
	КлючевыеСлова.Вставить("КВАРТАЛ", Истина);
	КлючевыеСлова.Вставить("НЕДЕЛЯ", Истина);
	КлючевыеСлова.Вставить("ПОДОБНО", Истина);
	КлючевыеСлова.Вставить("КОНЕЦ", Истина);
	КлючевыеСлова.Вставить("ОБЪЕДИНИТЬ", Истина);
	КлючевыеСлова.Вставить("УБЫВ", Истина);
	КлючевыеСлова.Вставить("СУММА", Истина);
	КлючевыеСлова.Вставить("ССЫЛКА", Истина);
	КлючевыеСлова.Вставить("ГДЕ", Истина);
	КлючевыеСлова.Вставить("ПО", Истина);
	КлючевыеСлова.Вставить("ИНДЕКСИРОВАТЬ", Истина);
	КлючевыеСлова.Вставить("МЕСЯЦ", Истина);
	КлючевыеСлова.Вставить("ПРЕДСТАВЛЕНИЕ", Истина);
	КлючевыеСлова.Вставить("ПЕРВЫЕ", Истина);
	КлючевыеСлова.Вставить("НАЧАЛОПЕРИОДА", Истина);
	КлючевыеСлова.Вставить("ЛОЖЬ", Истина);
	КлючевыеСлова.Вставить("НЕОПРЕДЕЛЕНО", Истина);
	КлючевыеСлова.Вставить("РАЗЛИЧНЫЕ", Истина);
	КлючевыеСлова.Вставить("ИМЕЮЩИЕ", Истина);
	КлючевыеСлова.Вставить("МИНИМУМ", Истина);
	КлючевыеСлова.Вставить("ДЕКАДА", Истина);
	КлючевыеСлова.Вставить("НЕ", Истина);
	КлючевыеСлова.Вставить("ТИПЗНАЧЕНИЯ", Истина);
	КлючевыеСлова.Вставить("ТОГДА", Истина);
	КлючевыеСлова.Вставить("КОГДА", Истина);
	КлючевыеСлова.Вставить("СГРУППИРОВАТЬ", Истина);
	КлючевыеСлова.Вставить("МИНУТА", Истина);
	КлючевыеСлова.Вставить("ВНУТРЕННЕЕ", Истина);
	КлючевыеСлова.Вставить("СтроковаяКонстанта", Истина);
	КлючевыеСлова.Вставить("ИЛИ", Истина);
	КлючевыеСлова.Вставить("ИЗ", Истина);
	КлючевыеСлова.Вставить("ID", Истина);
	КлючевыеСлова.Вставить("БУЛЕВО", Истина);
	КлючевыеСлова.Вставить("ДЕНЬНЕДЕЛИ", Истина);
	КлючевыеСлова.Вставить("КАК", Истина);
	КлючевыеСлова.Вставить("ТИП", Истина);
	КлючевыеСлова.Вставить("ТОЛЬКО", Истина);
	КлючевыеСлова.Вставить("КОЛИЧЕСТВО", Истина);
	КлючевыеСлова.Вставить("ДЕНЬ", Истина);
	КлючевыеСлова.Вставить("NULL", Истина);
	КлючевыеСлова.Вставить("РАЗРЕШЕННЫЕ", Истина);
	КлючевыеСлова.Вставить("СТРОКА", Истина);
	КлючевыеСлова.Вставить("ПРЕДСТАВЛЕНИЕССЫЛКИ", Истина);
	КлючевыеСлова.Вставить("ИЕРАРХИИ", Истина);
	КлючевыеСлова.Вставить("ПОЛУГОДИЕ", Истина);
	КлючевыеСлова.Вставить("ИТОГИ", Истина);
	КлючевыеСлова.Вставить("ЛЕВОЕ", Истина);
	КлючевыеСлова.Вставить("ДАТА", Истина);
	КлючевыеСлова.Вставить("В", Истина);
	КлючевыеСлова.Вставить("ПОДСТРОКА", Истина);
	КлючевыеСлова.Вставить("МЕЖДУ", Истина);
	КлючевыеСлова.Вставить("ЕСТЬNULL", Истина);
	КлючевыеСлова.Вставить("ДАТАВРЕМЯ", Истина);
	КлючевыеСлова.Вставить("ВЫБОР", Истина);
	КлючевыеСлова.Вставить("И", Истина);
	КлючевыеСлова.Вставить("МАКСИМУМ", Истина);
	КлючевыеСлова.Вставить("СОЕДИНЕНИЕ", Истина);
	КлючевыеСлова.Вставить("ВОЗР", Истина);
	КлючевыеСлова.Вставить("ПОЛНОЕ", Истина);
	КлючевыеСлова.Вставить("АВТОУПОРЯДОЧИВАНИЕ", Истина);
	КлючевыеСлова.Вставить("УПОРЯДОЧИТЬ", Истина);
	КлючевыеСлова.Вставить("ИСТИНА", Истина);
	КлючевыеСлова.Вставить("ЧИСЛО", Истина);
	КлючевыеСлова.Вставить("ИЕРАРХИЯ", Истина);
	КлючевыеСлова.Вставить("ВЫБРАТЬ", Истина);
	КлючевыеСлова.Вставить("ПРАВОЕ", Истина);
	КлючевыеСлова.Вставить("РАЗНОСТЬДАТ", Истина);
	КлючевыеСлова.Вставить("ИНАЧЕ", Истина);
	КлючевыеСлова.Вставить("УНИЧТОЖИТЬ", Истина);
	КлючевыеСлова.Вставить("ОБЩИЕ", Истина);
	
КонецПроцедуры

#EndRegion

#Region СистемаТипов
Функция Токен()
	Токен = Новый Структура("Класс, Тип, Лексема, НомерСтроки, НомерСимвола");
	Токен.НомерСтроки = НомерСтрокиНачало;    
	Токен.НомерСимвола = НомерТекущегоСимвола; 
	
	Возврат Токен;
КонецФункции

Функция ТокенЛексема(Лексема)
	Токен = Токен();
	Токен.Класс = "Лексема";
	Токен.Тип = Лексема;
	Токен.Лексема = Лексема;
	
	Возврат Токен;
КонецФункции

Функция ТокенСтроковаяКонстанта(Значение)
	ТокенКонстанта = Токен();	
	ТокенКонстанта.Класс = "СтроковаяКонстанта";
	ТокенКонстанта.Тип = "СтроковаяКонстанта";
	ТокенКонстанта.Лексема = "СтроковаяКонстанта";
	ТокенКонстанта.Вставить("Значение", Значение);
	
	Возврат ТокенКонстанта;
КонецФункции

Функция ТокенЧисловаяКонстанта(Значение)
	ТокенКонстанта = Токен();	
	ТокенКонстанта.Класс = "ЧисловаяКонстанта";
	ТокенКонстанта.Тип = "ЧисловаяКонстанта";
	ТокенКонстанта.Лексема = "ЧисловаяКонстанта";
	ТокенКонстанта.Вставить("Значение", Значение);
	
	Возврат ТокенКонстанта;
КонецФункции

Функция ТокенСлово(Лексема)
	ТокенСлово = Токен();	
	ТокенСлово.Класс = "Слово";	
	Если КлючевыеСлова[ВРег(Лексема)] = Истина Тогда
		ТокенСлово.Тип = ВРег(Лексема);
	Иначе
		ТокенСлово.Тип = "ID";
	КонецЕсли;	
	
	ТокенСлово.Лексема = Лексема;
	
	Возврат ТокенСлово;
КонецФункции	

Функция ТокенИдентификаторСРешеткой(Лексема)
	ТокенСлово = Токен();	
	ТокенСлово.Класс = "Слово";
	ТокенСлово.Тип = "ID_СРешеткой";
	ТокенСлово.Лексема = Лексема;
	
	Возврат ТокенСлово;
КонецФункции	


#EndRegion

#Region РазборВходящейСтроки

Функция МассивКодовСимволов(СтрокаСимволов)
	МаскимальныйКодСимвола = МаскимальныйКодСимволаСтроки(СтрокаСимволов);
	
	МассивКодов = Новый Массив(МаскимальныйКодСимволаСтроки(СтрокаСимволов) + 1);
	
	Для Сч = 0 По МаскимальныйКодСимвола Цикл
		МассивКодов[Сч] = Ложь;		
	КонецЦикла;	
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(Сред(СтрокаСимволов, Сч, 1));
		
		МассивКодов[КодСимвола] = Истина;
	КонецЦикла;	
	
	Возврат МассивКодов;
	
КонецФункции

Функция МаскимальныйКодСимволаСтроки(СтрокаСимволов)
	Максимум = 0;
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(Сред(СтрокаСимволов, Сч, 1));
		
		Если КодСимвола > Максимум Тогда
			Максимум = КодСимвола;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Максимум;
КонецФункции	

Процедура УстановитьОбрабатываемыйСимвол()		
	НомерТекущегоСимвола = НомерТекущегоСимвола + 1;
	ОбрабатываемыйСимвол = СимволБуфера;
	
	Если ОбрабатываемыйСимвол = Символы.ПС Тогда
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЕсли;	
	
	СимволБуфера = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + 1, 1); 
КонецПроцедуры	

Функция ЭтоКонстанта()
	Возврат ЭтоНачалаЧисла()
		Или ЭтоНачалоЛитерала()
КонецФункции	

Функция КонстантаИзСтроки()
	Константа = Новый Структура("Тип, Значение");
	
	Если ЭтоНачалаЧисла() Тогда
		Константа.Тип = Тип("Число");
		Константа.Значение = ЧислоИзСтроки();
	ИначеЕсли ЭтоНачалоЛитерала() Тогда
		Константа.Тип = Тип("Строка");
		Константа.Значение = ЛитералИзСтроки();
	Иначе
		ВызватьИсключение "Ожидается либо число лиюо строка";
	КонецЕсли;	
	
	Возврат Константа;	
КонецФункции	

Функция ЭтоНачалаЧисла()
	Если ЭтоЦифра(ОбрабатываемыйСимвол) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ЭтоЦифра(Символ)
	Если Символ = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодСимвола = КодСимвола(Символ);
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ЧислоИзСтроки()
	ЦелаяЧасть = ЦелаяЧастьЧислаИзСтроки();	
	
	Если ОбрабатываемыйСимвол = "." Тогда
		УстановитьОбрабатываемыйСимвол();
		ДробнаяЧасть = ДробнаяЧастьЧислаИзСтроки();
	Иначе
		ДробнаяЧасть = 0;
	КонецЕсли;
	
	Возврат ЦелаяЧасть + ДробнаяЧасть;
		
КонецФункции	

Функция ЦелаяЧастьЧислаИзСтроки()
	ЦелаяЧасть = 0;
	Множитель = 1;
	
	Если ОбрабатываемыйСимвол = "." Тогда
		Возврат 0;
	КонецЕсли;	
	
	Пока ЭтоЦифра(ОбрабатываемыйСимвол) Цикл
		ЦелаяЧасть = ЦелаяЧасть * 10 + Число(ОбрабатываемыйСимвол);
			
		УстановитьОбрабатываемыйСимвол();	
	КонецЦикла;	
	
	Возврат ЦелаяЧасть;
КонецФункции	

Функция ДробнаяЧастьЧислаИзСтроки()
	ДробнаяЧасть = 0;
	Множитель = 0.1;
	
	Пока ЭтоЦифра(ОбрабатываемыйСимвол) Цикл
		ДробнаяЧасть = ДробнаяЧасть + Число(ОбрабатываемыйСимвол) * Множитель;
		
		Множитель = Множитель * 0.1;
		
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;	
	
	Возврат ДробнаяЧасть;
КонецФункции	

Функция ЭтоНачалоИдентфикатора() 
	
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//КодСимвола = КодСимвола(ОбрабатываемыйСимвол);
	//
	//Если (КодСимвола >= 65 И КодСимвола <= 90)
	//	Или (КодСимвола >= 97 И КодСимвола <= 122) 
	//	Или (КодСимвола >= 97 И КодСимвола <= 122) 
	//	Или (КодСимвола = 1025)
	//	Или (КодСимвола = 95)
	//	Или (КодСимвола >= 1040 И КодСимвола <= 1105) Тогда
	//	
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
	Рез = СтрНайти(НачальныеСимволыИдентфикаторов, НРег(ОбрабатываемыйСимвол)) > 0;
		
	Возврат Рез;

КонецФункции

Функция ЭтоНачалоИдентфикатораCРешектой() 	
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Рез = ОбрабатываемыйСимвол = "#" И СимволБуфера <> "" И СтрНайти(ДопустимыеСимволыИдентфикаторов, НРег(СимволБуфера)) > 0;	
	
	Возврат Рез;

КонецФункции

Функция ЭтоСимволИдентфикатор(Символ) 
	
	Если Символ = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//КодСимвола = КодСимвола(Символ);
	//
	//Если ЭтоНачалоИдентфикатора() или ЭтоЦифра(Символ)  Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;	

	Рез = СтрНайти(ДопустимыеСимволыИдентфикаторов, НРег(Символ)) > 0;

	Возврат Рез;
КонецФункции

Функция ИдентфикаторСРешеткойИзСтроки();
		
	НомерСимволаНачала = НомерТекущегоСимвола;
	КоличествоСимволов = 1;
	
	УстановитьОбрабатываемыйСимвол();	
	Если СтрНайти(ДопустимыеСимволыИдентфикаторов, НРег(ОбрабатываемыйСимвол)) > 0 Тогда
		КоличествоСимволов = КоличествоСимволов + 1;
		УстановитьОбрабатываемыйСимвол();
	Иначе
		ВызватьИсключение "Некорректный идентфикатор с #";
	КонецЕсли;	
	
	Пока СтрНайти(ДопустимыеСимволыИдентфикаторов, НРег(ОбрабатываемыйСимвол)) > 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		
		УстановитьОбрабатываемыйСимвол();
		
		Если ОбрабатываемыйСимвол = "" Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
		
	Рез = Сред(ИсходнаяСтрока, НомерСимволаНачала, КоличествоСимволов);
		
	Возврат Рез; 
КонецФункции

Функция ИдентфикаторИзСтроки()
		
	//НомерСимволаНачала = НомерТекущегоСимвола;
	//КоличествоСимволов = 1;
	//
	//УстановитьОбрабатываемыйСимвол();
	//
	//Пока СтрНайти(ДопустимыеСимволыИдентфикаторов, НРег(ОбрабатываемыйСимвол)) > 0 Цикл
	//	КоличествоСимволов = КоличествоСимволов + 1;
	//	
	//	УстановитьОбрабатываемыйСимвол();
	//	
	//	Если ОбрабатываемыйСимвол = "" Тогда
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;
	//	
	//Рез = Сред(ИсходнаяСтрока, НомерСимволаНачала, КоличествоСимволов);    
	
	РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИсходнаяСтрока, ШаблонИдентфикатора,,НомерТекущегоСимвола, 1);
	Если РезультатПоиска.НачальнаяПозиция <> Макс(НомерТекущегоСимвола, 1) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	ОбрабатываемыйСимвол = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + РезультатПоиска.Длина, 1);
	НомерТекущегоСимвола = НомерТекущегоСимвола + РезультатПоиска.Длина;   
	СимволБуфера = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + 1, 1);
	
	//УстановитьОбрабатываемыйСимвол();
		
	Возврат РезультатПоиска.Значение; 
КонецФункции

Функция ЭтоНачалоЛитерала()
	Возврат ОбрабатываемыйСимвол = """";	
КонецФункции	

Функция ЛитералИзСтроки()
	Литерал = "";
	УстановитьОбрабатываемыйСимвол();
	
	Пока Не (ОбрабатываемыйСимвол = """" И СимволБуфера <> """") Цикл
		Если ОбрабатываемыйСимвол = "" Тогда
			ВызватьИсключение "Ожидается закрывающая кавычка";
		КонецЕсли;	
		Если ОбрабатываемыйСимвол = """" И СимволБуфера = """" Тогда
			Литерал = Литерал + """";
			УстановитьОбрабатываемыйСимвол();
		Иначе	
			Литерал = Литерал + ОбрабатываемыйСимвол;
		КонецЕсли;	
		
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;	
	
	УстановитьОбрабатываемыйСимвол();
	
	Возврат Литерал;
КонецФункции

Функция ЭтоКомментарий()
	Возврат ЭтоКлассическийКомментарий();
КонецФункции	

Функция ЭтоКлассическийКомментарий()
	Если ОбрабатываемыйСимвол = "/"
		И СимволБуфера = "/"  Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		                              	
КонецФункции

Функция КомментарийИзСтроки()
	Если ЭтоКлассическийКомментарий() Тогда
		Возврат КлассическийКомменрарийИзСтроки();
	Иначе 
		Возврат "";	
	КонецЕсли;		
КонецФункции

Функция КлассическийКомменрарийИзСтроки()
	Комментраий = "";
	
	УстановитьОбрабатываемыйСимвол();
	УстановитьОбрабатываемыйСимвол();
		
	Пока ОбрабатываемыйСимвол <> Символы.ПС И ОбрабатываемыйСимвол <> "" Цикл
		Комментраий = Комментраий + ОбрабатываемыйСимвол;
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	УстановитьОбрабатываемыйСимвол();
	
	Пока ЭтоНезначащийСимвол() Цикл
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	Если ЭтоКлассическийКомментарий() Тогда
		Комментраий = Комментраий + КлассическийКомменрарийИзСтроки();
	Иначе
		Возврат Комментраий;
	КонецЕсли;	
	
КонецФункции

Функция ЛексемаИзСтроки()
	РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИсходнаяСтрока, ШаблонЛеескмы1,,Макс(НомерТекущегоСимвола, 1), 1);
	Если РезультатПоиска.НачальнаяПозиция <> Макс(НомерТекущегоСимвола, 1) Тогда
		РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИсходнаяСтрока, ШаблонЛеескмы2,,Макс(НомерТекущегоСимвола, 1), 1);;
	КонецЕсли;   
	Если РезультатПоиска.НачальнаяПозиция <> Макс(НомерТекущегоСимвола, 1) Тогда
		РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИсходнаяСтрока, ШаблонЛеескмы1_1,,Макс(НомерТекущегоСимвола, 1), 1);;
	КонецЕсли;

	Если РезультатПоиска.НачальнаяПозиция <> Макс(НомерТекущегоСимвола, 1) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОбрабатываемыйСимвол = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + РезультатПоиска.Длина, 1);
	НомерТекущегоСимвола = НомерТекущегоСимвола + РезультатПоиска.Длина;   
	СимволБуфера = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + 1, 1);
	
	//УстановитьОбрабатываемыйСимвол();
		
	Возврат РезультатПоиска.Значение; 
КонецФункции	

Функция ЭтоНезначащийСимвол()
	Возврат СтрПодобнаПоРегулярномуВыражению(ОбрабатываемыйСимвол, "\s");
	
	//Возврат ОбрабатываемыйСимвол = " "
	//	Или ОбрабатываемыйСимвол = Символы.Таб
	//	Или ОбрабатываемыйСимвол = Символы.НПП
	//	Или ОбрабатываемыйСимвол = Символы.ПС
	//	Или ОбрабатываемыйСимвол = Символы.ВК
	//	Или ОбрабатываемыйСимвол = Символы.ВТаб
	//	Или ОбрабатываемыйСимвол = Символы.ПФ;

КонецФункции	

Функция ПропуститьНезначящийСимвол()
	
	
КонецФункции

#EndRegion

#Region РазборВходящейСтроки

Функция СледующийТокен() Экспорт
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Токен();
	КонецЕсли;	
	
	Пока ЭтоНезначащийСимвол() Цикл
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
		
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Токен();
	КонецЕсли;	
	
	НомерСтрокиНачало = НомерТекущейСтроки; 
	
	Идекнтификатор = ИдентфикаторИзСтроки();
	Если Идекнтификатор <> Неопределено Тогда
		Возврат ТокенСлово(Идекнтификатор);  
	КонецЕсли;
	Лексема = ЛексемаИзСтроки();
	Если Лексема <> Неопределено Тогда 
		Возврат ТокенЛексема(Лексема);   
	ИначеЕсли ЭтоКонстанта() Тогда
		Коннстанта = КонстантаИзСтроки();
		
		Если Коннстанта.Тип = Тип("Число") Тогда
			Токен = ТокенЧисловаяКонстанта(Коннстанта.Значение);
		Иначе
			Токен = ТокенСтроковаяКонстанта(Коннстанта.Значение);
		КонецЕсли;	
	ИначеЕсли ЭтоКомментарий() Тогда
		КомментарийИзСтроки();	
	ИначеЕсли ЭтоНачалоИдентфикатораCРешектой() Тогда
		Идекнтификатор = ИдентфикаторСРешеткойИзСтроки();
		Токен = ТокенИдентификаторСРешеткой(Идекнтификатор);	
	Иначе 
		ВызватьИсключение "Не удалось разобрать запрос";
	КонецЕсли; 	
		
	Возврат Токен;	
КонецФункции	

#EndRegion

Функция ПолучитьТекстЗапроса() Экспорт
	ТекстЗапроса = ПолучитьМакет("Макет").ПолучитьТекст();   
	Иницализировать();
	УстановитьОбрабатываемыйТекст(ТекстЗапроса);
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока Истина Цикл
		Токен = СледующийТокен();
		
		Если Токен.Класс = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		//ПредставлениеТокена = ПредставлениеТокена(Токен);
		//
		//Если ПредставлениеТокена = "." или ПредставлениеТокена = "," или ПредставлениеТокена = "&"
		//	Или ПредставлениеПредыдущегоТокена = "." или ПредставлениеПредыдущегоТокена = "," или ПредставлениеПредыдущегоТокена = "&" Тогда
		//	
		//	Рвзделитель = "";
		//Иначе
		//	Рвзделитель = " ";
		//КонецЕсли;	
		//
		//ТекстЗапроса = ТекстЗапроса + Рвзделитель + ПредставлениеТокена;
		//
		//ПредставлениеПредыдущегоТокена = ПредставлениеТокена; 
	КонецЦикла;	
	
	Время = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;     
	ВызватьИсключение Время;
	// 6112, 6091, 6151  
	// 5117, 5142, 5160
	
	//Схема = Новый СхемаЗапроса;d
	//Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	//Возврат Схема.ПолучитьТекстЗапроса();
КонецФункции	

Цифры = "0123456789";
НачальныеСимволыИдентфикаторов = "_qwertyuiopasdfghjklzxcvbnmёйцукенгшщзхъфывапролджэячсмитьбю";
НачальныеСимволыИдентфикаторов = НачальныеСимволыИдентфикаторов;
ДопустимыеСимволыИдентфикаторов = НачальныеСимволыИдентфикаторов + Цифры; 

ШаблонИдентфикатора = "[a-zA-Zа-яA-Я_][a-zA-Zа-яA-Я_\d]*";  
ШаблонЛеескмы1 = ".|//|\{|\}|\<|\%|=|&|\>|\(|\)|\*|\+|,|\-|;"; 
ШаблонЛеескмы1_1 = "\<|\>"; 
ШаблонЛеескмы2 = "<=|<>|>=";


МассивСимволовИдентифкаторов = МассивКодовСимволов(ДопустимыеСимволыИдентфикаторов);
МассивНачальныхСимволовИдентфикаторов = МассивКодовСимволов(НачальныеСимволыИдентфикаторов);
МассивСимволовЦифр = МассивКодовСимволов(Цифры);

ВремяПолученияИдентификатора = 0;

ВремяУстановкиСимволов = 0;
	