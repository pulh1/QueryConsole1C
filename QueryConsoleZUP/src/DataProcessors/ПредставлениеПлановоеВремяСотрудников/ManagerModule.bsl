
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание() Экспорт
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	Описание.Имя = ИмяПредставления(); 
	
	Описание.ПоддерживаютсяИндексы = Ложь;
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Ложь; 
	Описание.ИмяФормируемойВТПоУмолчанию = "ВТПлановоеВремя";
	Описание.ДоступноВМеханизмеПредставленийСКД = Истина;
	Описание.ИмяВТДляСКД = "Представления_ПлановоеВремя";  
	Описание.ПоддерживаютсяИндексы = Ложь;
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Сотрудник";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Дата";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПериодРегистрацииВремени";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВидУчетаВремени";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ДниПлан";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ЧасыПлан";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ЧасыНорма";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВЦеломЗаПериод";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Смена";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников");
	Описание.Поля.Добавить(Поле);     
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПереходящаяЧастьПредыдущейСмены";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПереходящаяЧастьТекущейСмены";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле);  
	
	Описание.ОписаниеВТФильтр =  ЭлементыМоделиОписанияПредставлений.НовыйОписаниеВТФильтр();
	
	Описание.ОписаниеВТФильтр.Обязательный = Истина; 
	
	Описание.ОписаниеВТФильтр.ПоддерживаютсяПсевдонимы = Ложь;;
	// TODO в мехнизме представлений для СКД имя ВТФильтр для Представление_ПлановоеВремя не поддерживается
	Описание.ОписаниеВТФильтр.ПоддерживаетсяИмяВТФильтр = Ложь;   
	Описание.ОписаниеВТФильтр.ИмяВТПоУмолчанию = "ВТСотрудники";
	
	Описание.ОписаниеВТФильтр.ПоддерживаетсяТЗФильтр = Ложь; 	 
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "Сотрудник";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "Месяц";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "ДатаАктуальности";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	 
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "ДатаНачала";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "ДатаОкончания";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);  
		
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ОтноситьПереходящуюЧастьСменыКДнюНачала", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Ложь,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);		
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ПолучатьПлановоеВремяЗаПолныйМесяц", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Ложь,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);	
	
	Возврат Описание;	
КонецФункции

Функция Справка() Экспорт
	Справка = ЭлементыМоделиОписанияПредставлений.НовыйСправка();	
	Справка.Имя = ИмяПредставления();
	Справка.Описание = "Обеспечивает доступ к методу ""УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя"".
	|Позволяет получить данные о запланированном рабочем времени сотрудников.
	|Учитываются данные общих и индивидуальных графиков. При получении нормы времени также учитывается информация о графиках полного времени.";
	
	Возврат Справка;
КонецФункции

Функция ИмяПредставления() Экспорт
	Возврат "ИсполняемоеПредставление.ПлановоеВремяСотрудников";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	РезультатЗапроса, Неопределено 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	
	ПараметрыПолученияДанных.ИмяВТСотрудники = ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ;
	
	ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ОтноситьПереходящуюЧастьСменыКДнюНачала");
	Если ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала <> Неопределено Тогда
		ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала.Значение;
	КонецЕсли;	
	
	ПараметрПолучатьПлановоеВремяЗаПолныйМесяц= ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ПолучатьПлановоеВремяЗаПолныйМесяц");
	Если ПараметрПолучатьПлановоеВремяЗаПолныйМесяц <> Неопределено Тогда
		ПараметрыПолученияДанных.ПолучатьПлановоеВремяЗаПолныйМесяц = ПараметрПолучатьПлановоеВремяЗаПолныйМесяц.Значение;
	КонецЕсли;	
		
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(
		Запрос.МенеджерВременныхТаблиц,
		ПараметрыВыполнения.ТолькоРазрешенные,
		ПараметрыПолученияДанных);
		
	Возврат Неопределено;
КонецФункции

Функция ИсполняемыйКод(ПараметрыВыполнения, ТекущиеТабуляции) Экспорт
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	Строка = "ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияЗначения(
		"ПараметрыПолученияДанных.ИмяВТСотрудники", 
		ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ,
		ТекущиеТабуляции);	
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	
	ИменаПараметров = Новый Структура();
	ИменаПараметров.Вставить("ОтноситьПереходящуюЧастьСменыКДнюНачала", "ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала");
	ИменаПараметров.Вставить("ПолучатьПлановоеВремяЗаПолныйМесяц", "ПараметрыПолученияДанных.ПолучатьПлановоеВремяЗаПолныйМесяц");
	
	ГенерацияИсполняемогоКодаПредставленийУтилиты.КодПрисвоенияПараметровВТекстовыйДокумент(
		ТекстовыйДокумент, 
		ПараметрыВыполнения, 
		Описание(), 
		ИменаПараметров,
		ТекущиеТабуляции);
	
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(");
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + "Запрос.МенеджерВременныхТаблиц,");
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрыВыполнения.ТолькоРазрешенные) + ",");
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + "ПараметрыПолученияДанных);");
		
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция ТекстЗапросаДляСКД(ПараметрыВыполнения) Экспорт
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	
	Модель = ГенерацияИсполняемогоКодаПредставленийУтилиты.МодельЗапросаДляСКД(ПараметрыВыполнения, Описание);
	Построитель = МодельЗапросаУтилиты.СоздатьПостроительМодели(Модель);
	
	УстанавливаемыеПараметры = Новый Структура();
	УстанавливаемыеПараметры.Вставить("ОтноситьПереходящуюЧастьСменыКДнюНачала", "ОтноситьПереходящуюЧастьСменыКДнюНачала");
	УстанавливаемыеПараметры.Вставить("ПолучатьПлановоеВремяЗаПолныйМесяц", "ПолучатьПлановоеВремяЗаПолныйМесяц");
	
	ГенерацияИсполняемогоКодаПредставленийУтилиты.УстановитьПараметраПредставленияВМодельЗапросаДляСКД(
		Построитель, 
		ПараметрыВыполнения, 
		Описание, 
		УстанавливаемыеПараметры);
		
	Выражение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаНачала") 
		+ " = &НачалоПериода";
	Построитель.ДобавитьОтбор(Выражение);
	
	Выражение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаОкончания") 
		+ " = &ОкончаниеПериода";
	Построитель.ДобавитьОтбор(Выражение);
	
	Выражение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаАктуальности") 
		+ " = &ОкончаниеПериода";
	Построитель.ДобавитьОтбор(Выражение);
	
	Запрос = Построитель.ПолучитьМодель().Элементы[0];
	ТекстЗапроса = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(Запрос);
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецЕсли
