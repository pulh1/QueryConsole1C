
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ГенераторТекстовВыражений;
Перем ТекстовыйДокумент;
	
Процедура УстановитьГенераторТекстовВыражений(Генератор) Экспорт
	ГенераторТекстовВыражений = Генератор;
КонецПроцедуры
	
Процедура УстановитьТекстовыйДокумент(УстанавливаемыйДокумент) Экспорт
	ТекстовыйДокумент = УстанавливаемыйДокумент;
КонецПроцедуры
	
// Сценарий создания пакета запроса в тек док.
// 
// Параметры:
//  ТекстовыйДокумент - ТекстовыйДокумент
//  ТекстЗапроса - Строка
Процедура СценарийСозданияПакетаЗапросаВТекДок(ТекстЗапроса, ТекущиеТабуляции = "") Экспорт
	ГенераторВыражений = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	УстановитьГенераторТекстовВыражений(ГенераторВыражений);
	
	МодельПакета = ОбработкаМоделиЗапроса.РазобратьЗапрос(ТекстЗапроса);
	Если МодельПакета.Элементы.Количество() = 1 Тогда
		Если МодельПакета.Элементы[0].Тип = "ЗапросВыбора" Тогда
			СценарийСозданияЗапросаВыбораВТекДок(МодельПакета.Элементы[0], ТекущиеТабуляции);
		Иначе
			// TODO
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если МодельПакета.Элементы[0].Тип = "ЗапросВыбора" Тогда
		Если ЗначениеЗаполнено(МодельПакета.Элементы[0].ТаблицаДляПомещения) Тогда
			Сценарий = "* Создание временной таблицы " + МодельПакета.Элементы[0].ТаблицаДляПомещения;		
		Иначе
			Сценарий = "* Создание запроса получения данных";	
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Сценарий);
		СценарийСозданияЗапросаВыбораВТекДок(МодельПакета.Элементы[0], ТекущиеТабуляции + Символы.Таб);
	Иначе
		Сценарий = "* Уничтожение временной таблицы " + МодельПакета.Элементы[0].ИмяТаблицы;		
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Сценарий);
		СценарийСозданияЗапросаУничтоженияВТВТекДок(МодельПакета.Элементы[0], ТекущиеТабуляции);	
	КонецЕсли;
	
	Для Индекс = 1 По МодельПакета.Элементы.ВГраница() Цикл
		Если МодельПакета.Элементы[Индекс].Тип = "ЗапросВыбора" Тогда
			Если ЗначениеЗаполнено(МодельПакета.Элементы[Индекс].ТаблицаДляПомещения) Тогда
				Сценарий = "* Создание временной таблицы " + МодельПакета.Элементы[Индекс].ТаблицаДляПомещения;		
			Иначе
				Сценарий = "* Создание запроса получения данных";	
			КонецЕсли;
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Сценарий);
			Шаг = "И Я добавляю запрос получения данных";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + Шаг);
			СценарийСозданияЗапросаВыбораВТекДок(МодельПакета.Элементы[Индекс], ТекущиеТабуляции + Символы.Таб);
		Иначе
			Сценарий = "* Уничтожение временной таблицы " + МодельПакета.Элементы[Индекс].ИмяТаблицы;		
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Сценарий);
			СценарийСозданияЗапросаУничтоженияВТВТекДок(МодельПакета.Элементы[Индекс], ТекущиеТабуляции + Символы.Таб);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СценарийСозданияЗапросаВыбораВТекДок(МодельЗапроса, ТекущиеТабуляции = "") Экспорт
	ГенераторТекстовВыражений.УстановитьКолонки(МодельЗапроса.Колонки);
	
	Если МодельЗапроса.ВыбиратьРазрешенные Тогда
		ДобавитьУстановкуФлагаРазрешенныеТекДок(ТекущиеТабуляции);
	КонецЕсли;
	
	Если МодельЗапроса.Операторы.Количество() = 1 Тогда
		СценарийСозданияОператораЗапросаВыбораВТекДок(МодельЗапроса.Операторы[0], ТекущиеТабуляции);
	Иначе
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "* Создание оператора запроса");
		СценарийСозданияОператораЗапросаВыбораВТекДок(МодельЗапроса.Операторы[0], ТекущиеТабуляции + Символы.Таб);
		
		Для Индекс = 1 По МодельЗапроса.Операторы.ВГраница() Цикл
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "* Создание оператора запроса");
			Если МодельЗапроса.Операторы[Индекс].ТипОбъединения = ЭлементыМоделиЗапроса.НовыйТипОбъединение() Тогда
				ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + "И Я добавляю объединяемый запрос без дублирования записей");
			Иначе
				ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + "И Я добавляю объединяемый запрос");
			КонецЕсли;	
			СценарийСозданияОператораЗапросаВыбораВТекДок(МодельЗапроса.Операторы[Индекс], ТекущиеТабуляции + Символы.Таб);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МодельЗапроса.ТаблицаДляПомещения) Тогда
		ДобавитьУстановкуИмениВременнойТаблицыВТекДок(МодельЗапроса.ТаблицаДляПомещения, ТекущиеТабуляции);	
	КонецЕсли;
	
	УстановкаУпорядочиванияВТекДок(МодельЗапроса, ТекущиеТабуляции);
	УстановкаИндексированияВТекДок(МодельЗапроса, ТекущиеТабуляции);
КонецПроцедуры

Процедура СценарийСозданияЗапросаУничтоженияВТВТекДок(МодельЗапроса, ТекущиеТабуляции = "") Экспорт
	Шаг = "И Я добавляю запрос уничтожения временной таблицы """ + МодельЗапроса.ИмяТаблицы + """";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Функция СоздатьГенераторДляВложенногоЗапроса() 
	УстановитьПривилегированныйРежим(Истина);
	Генератор = Обработки.ГенераторFeatureФайлов.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ГенераторВыражений = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений();
	Генератор.УстановитьГенераторТекстовВыражений(ГенераторВыражений);
	
	Генератор.УстановитьТекстовыйДокумент(ТекстовыйДокумент);
	
	Возврат Генератор;
КонецФункции

Процедура СценарийСозданияОператораЗапросаВыбораВТекДок(МодельОператораЗапроса, Знач ТекущиеТабуляции = "")
	ГенераторТекстовВыражений.УстановитьИсточники(МодельОператораЗапроса.Источники.Элементы);
	
	Если МодельОператораЗапроса.КоличествоПолучаемыхЗаписей <> Неопределено Тогда
		ДобавитьУстановкуФлагаКоличестваЗаписейВТекДок(МодельОператораЗапроса.КоличествоПолучаемыхЗаписей, ТекущиеТабуляции);
	КонецЕсли;	
	Если МодельОператораЗапроса.ВыбиратьРазличные Тогда
		ДобавитьУстановкуФлагаРазличныеТекДок(ТекущиеТабуляции);
	КонецЕсли;
	
	ИсточникиЗапросаВТекстовыйДокумент(МодельОператораЗапроса.Источники.Элементы, ТекущиеТабуляции);
	
	ИсточникиПоИдентификаторам = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(МодельОператораЗапроса.Источники.Элементы, "ИдентификаторИсточника");
	Для Каждого Источник Из МодельОператораЗапроса.Источники.Элементы Цикл
		СоединенияИсточникаВТекДок(Источник, ИсточникиПоИдентификаторам, ТекущиеТабуляции);	
	КонецЦикла;
	
	ПоляОператораВТекДок(МодельОператораЗапроса.ВыбираемыеПоля, ТекущиеТабуляции);
	
	ПоляГруппировкиВТекДок(МодельОператораЗапроса.Группировка.Элементы, МодельОператораЗапроса.ВыбираемыеПоля, ТекущиеТабуляции);
	УстановкаАгрегатныхФункцийВТекДок(МодельОператораЗапроса.ВыбираемыеПоля, ТекущиеТабуляции);
	
	ОтборВТекДок(МодельОператораЗапроса.Отбор, ТекущиеТабуляции);
	ОтборВТекДок(МодельОператораЗапроса.ОтборСгруппированных, ТекущиеТабуляции);
КонецПроцедуры

Процедура ИсточникиЗапросаВТекстовыйДокумент(ИсточникиЗапроса, Знач ТекущиеТабуляции = "")
	Для Каждого ТекущийИсточник Из ИсточникиЗапроса Цикл
		Если ТекущийИсточник.Источник.Тип = "ИсточникДанныхТаблица"
			Или (ТекущийИсточник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" 
				И ТекущийИсточник.Источник.ОписаниеВТ.ИндексЗапросаСоздания <> -1) Тогда	
			
			Шаг = "И Я добавляю источник """ + ТекущийИсточник.Источник.ИмяТаблицы + """ как """ 
				+ ТекущийИсточник.Источник.Псевдоним + """ в конструкторе запроса";
			
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
		ИначеЕсли ТекущийИсточник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" 
			Или ТекущийИсточник.Источник.Тип = "ИсточникДанныхТаблицаЗначений"  Тогда  
			
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции +  "И Я запоминаю в переменную ""ПоляВТ"" значение");
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции +  "|'Поле'|");
			Для Каждого Поле Из ТекущийИсточник.Источник.ОписаниеВТ.ПорядокКолонок Цикл
				ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции +  "|'" + Поле + "'|");
			КонецЦикла;
			Шаг = "И Я добавляю описание временной таблицы """ + ТекущийИсточник.Источник.ИмяТаблицы + """ как """ 
				+ ТекущийИсточник.Источник.Псевдоним + """ с полями ""$ПоляВТ$""";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
		ИначеЕсли ТекущийИсточник.Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда 
			СценарийДобавленияВложенногоЗапросаВМассивСтрок(ТекущийИсточник.Источник, ТекущиеТабуляции);	
		ИначеЕсли ТекущийИсточник.Источник.Тип = "ИсполняемоеПредставление" Тогда 
			СценарийДобавленияИсполняемогоПредставленияВТекДок(ТекущийИсточник.Источник, ТекущиеТабуляции);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СценарийДобавленияВложенногоЗапросаВМассивСтрок(Источник, Знач ТекущиеТабуляции = "")
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "* Вложенный запрос");	
	
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + "И Я добавляю вложенный запрос");
	
	Генератор = СоздатьГенераторДляВложенногоЗапроса();
	Генератор.СценарийСозданияЗапросаВыбораВТекДок(Источник.ЗапросВыбора, ТекущиеТабуляции + Символы.Таб);
	Шаг = "И Я завершаю редактирование текущего запроса в конструкторе";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + Шаг);
	
	Шаг = "И Я устанавливаю Псевдоним """ + Источник.Псевдоним + """ для текущего источника";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

// Сценарий добавления исполняемого представления в массив строк.
// 
// Параметры:
//  ТекстовыйДокумент - ТекстовыйДокумент
//  Источник - см. ЭлементыМоделиЗапроса.НовыйИсполняемоеПредставление
//  ТекущиеТабуляции - Строка - Текушие табуляции
Процедура СценарийДобавленияИсполняемогоПредставленияВТекДок(Источник, Знач ТекущиеТабуляции = "")
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "* Добавление " + Источник.ИмяТаблицы);	
	ТекущиеТабуляции = ТекущиеТабуляции + Символы.Таб;
	Шаг = "И Я добавляю источник """ + Источник.ИмяТаблицы + """ в конструкторе запроса";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	
	Для Каждого Параметр Из Источник.Параметры Цикл
		Если Параметр.ЭтоПараметрЗапроса Тогда
			Шаг = "И Я присваиваю параметр запроса """ + Параметр.Значение + """ параметру """ + Параметр.Имя + """ исполняемого представления";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
		Иначе
			Если ТипЗнч(Параметр.Значение) = Тип("Булево") Тогда
				Если Параметр.Значение Тогда
					Значение = "Истина";
				Иначе
					Значение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Число") Тогда 
				Значение = Формат(Параметр.Значение, "ЧРД=.; ЧГ=;");
			Иначе
				Значение = Параметр.Значение;
			КонецЕсли;
			Шаг = "И Я присваиваю значение выражения '" + Значение + "' параметру """ + Параметр.Имя + """ исполняемого представления";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
		КонецЕсли;
	КонецЦикла;
	
	Если Источник.ВТФильтр <> Неопределено Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + "* Установка запроса фильтра");	
		Шаг = "И Я открываю конструктор запроса-фильтра исполняемого представления";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + Шаг);
		
		Генератор = СоздатьГенераторДляВложенногоЗапроса();
		Генератор.СценарийСозданияЗапросаВыбораВТекДок(Источник.ВТФильтр.ЗапросВыбора, ТекущиеТабуляции + Символы.Таб);
		Шаг = "И Я завершаю редактирование текущего запроса в конструкторе";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + Шаг);
		
		Для Индекс = 0 По Источник.ВТФильтр.Поля.ВГраница() Цикл
			Если Источник.ВТФильтр.Поля[Индекс] <> Источник.ВТФильтр.ЗапросВыбора.Колонки[Индекс].Имя Тогда
				Шаг = "И Я устанавливаю соответствие поля """ + Источник.ВТФильтр.ЗапросВыбора.Колонки[Индекс].Имя 
					+ """ полю фильтра """ + Источник.ВТФильтр.Поля[Индекс] + """";	
				ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Символы.Таб + Шаг);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Шаг = "И Я завершаю редактирование параметров исполняемого представления";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	Шаг = "И Я устанавливаю Псевдоним """ + Источник.Псевдоним + """ для текущего источника";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Процедура СоединенияИсточникаВТекДок(Источник, ИсточникиПоИдентификаторам, Знач ТекущиеТабуляции = "")
	Для Каждого Соединение Из Источник.Соединения Цикл
		ВладелецСвязи = Источник.Источник.Псевдоним;
		ПрисоединяемаяТаблица = ИсточникиПоИдентификаторам[Соединение.Источник].Источник.Псевдоним;
		УсловиеСвязи = ГенерацияТекстовЗапросов.ВыражениеВСтроку(Соединение.Условие, ГенераторТекстовВыражений);
		ТипСоединения = Соединение.ТипСоединения;
		
		Шаг = "И Я устанавливаю """ + ТипСоединения + """ соединение источника """ 
			+ ВладелецСвязи + """ с источником """ + ПрисоединяемаяТаблица + """ по условию ";
			
		Если СтрЧислоСтрок(УсловиеСвязи) = 1 Тогда
			Шаг = Шаг + "'" + УсловиеСвязи + "'";
		Иначе
			ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(УсловиеСвязи, "УсловиеСвязи", ТекущиеТабуляции);
			Шаг = Шаг + "'$УсловиеСвязи$'";
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	КонецЦикла;
КонецПроцедуры

Процедура ПоляОператораВТекДок(ПоляОператора, ТекущиеТабуляции)
	Для Каждого Поле Из ПоляОператора Цикл
		АгрегатнаяФункция = Неопределено;
		Если Поле.Выражение.Значение.Тип = "АгрегатнаяФункция" Тогда
			ВыражениеПоля = Поле.Выражение.Значение.Аргумент;	
			АгрегатнаяФункция = Поле.Выражение.Значение.ИмяФункции;
		ИначеЕсли Поле.Выражение.Значение.Тип = "АгрегатнаяФункцияКоличество" Тогда
			ВыражениеПоля = Поле.Выражение.Значение.Аргумент;
			Если Поле.Выражение.Значение.Различные Тогда
				АгрегатнаяФункция = "КоличествоРазличных";
			Иначе
				АгрегатнаяФункция = "Количество";
			КонецЕсли;
		Иначе
			ВыражениеПоля = Поле.Выражение.Значение;
		КонецЕсли;
		ТекстВыражения = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ВыражениеПоля, ГенераторТекстовВыражений);
		
		Если ЭтоПолеИсточника(ВыражениеПоля) Тогда
			Шаг = "И Я добавляю поле запроса """ + ТекстВыражения + """ как """ + Поле.Псевдоним + """ в конструкторе запроса";	
		Иначе
			Если СтрЧислоСтрок(ТекстВыражения) = 1 Тогда
				Шаг = "И Через редактор выражений я добавляю поле запроса '" + ТекстВыражения + "' как """ + Поле.Псевдоним + """";	
			Иначе
				ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(ТекстВыражения, "ВыражениеПоля", ТекущиеТабуляции);
				Шаг = "И Через редактор выражений я добавляю поле запроса ""$ВыражениеПоля$"" как """ + Поле.Псевдоним + """";
			КонецЕсли;		
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	КонецЦикла; 
КонецПроцедуры

Процедура ПоляГруппировкиВТекДок(ПоляГруппировки, ПоляЗапроса, ТекущиеТабуляции)
	ВыражениеПолей = Новый Соответствие();
	Для Каждого Поле Из ПоляЗапроса Цикл
		ВыражениеПолей.Вставить(ГенерацияТекстовЗапросов.ВыражениеВСтроку(Поле.Выражение, ГенераторТекстовВыражений), Истина);	
	КонецЦикла;
	
	Для Каждого ЭлементГруппировки Из ПоляГруппировки Цикл
		ВыражениеГруппировки = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ЭлементГруппировки, ГенераторТекстовВыражений);
		Если ВыражениеПолей.Получить(ВыражениеГруппировки) <> Неопределено Тогда
			Если СтрЧислоСтрок(ВыражениеГруппировки) = 1 Тогда
				Шаг = "И Я добавляю группировку по выражению '" + ВыражениеГруппировки + "' поля запроса";
			Иначе
				ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(ВыражениеГруппировки, "ВыражениеПоля", ТекущиеТабуляции);
				Шаг = "И Я добавляю группировку по выражению ""$ВыражениеПоля$"" поля запроса";
			КонецЕсли;	
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг); 	
			
			ВыражениеПолей.Удалить(ВыражениеГруппировки);
		ИначеЕсли ЭтоПолеИсточника(ЭлементГруппировки.Значение) Тогда 
			Шаг = "И Я добавляю группировку по полю  источника '" + ВыражениеГруппировки + "'";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг); 
		Иначе
			ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(ВыражениеГруппировки, "ВыражениеПоля", ТекущиеТабуляции);
			Шаг = "И Через редактор выражений я добавляю поле запроса ""$ВыражениеПоля$""";	
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг); 	
			Шаг = "И Я добавляю группировку по выражению ""$ВыражениеПоля$"" поля запроса";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
			Шаг = "И Я удаляю последнее поле оператора";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

Процедура ОтборВТекДок(ЭлементыОтбора, ТекущиеТабуляции)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ТекстВыражения = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ЭлементОтбора, ГенераторТекстовВыражений);
		Если ЭтоОборПоПолюИсточника(ЭлементОтбора.Значение) Тогда
			Шаг = "И Я добавляю условие на поле источника '" + ТекстВыражения + "' в конструкторе запроса"	
		Иначе
			Если СтрЧислоСтрок(ТекстВыражения) = 1 Тогда
				Шаг = "И Через редактор выражений я добавляю условие '" + ТекстВыражения + "'";
			Иначе
				ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(ТекстВыражения, "ВыражениеОтбора", ТекущиеТабуляции);
				Шаг = "И Через редактор выражений я добавляю условие '$ВыражениеОтбора$'";
			КонецЕсли;	
		КонецЕсли;
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	КонецЦикла;	
КонецПроцедуры

Процедура УстановкаАгрегатныхФункцийВТекДок(ПоляОператора, ТекущиеТабуляции)
	Для Каждого Поле Из ПоляОператора Цикл
		АгрегатнаяФункция = Неопределено;
		Если Поле.Выражение.Значение.Тип = "АгрегатнаяФункция" Тогда
			ВыражениеПоля = Поле.Выражение.Значение.Аргумент;	
			АгрегатнаяФункция = Поле.Выражение.Значение.ИмяФункции;
		ИначеЕсли Поле.Выражение.Значение.Тип = "АгрегатнаяФункцияКоличество" Тогда
			ВыражениеПоля = Поле.Выражение.Значение.Аргумент;
			Если Поле.Выражение.Значение.Различные Тогда
				АгрегатнаяФункция = "КоличествоРазличных";
			Иначе
				АгрегатнаяФункция = "Количество";
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		ТекстВыражения = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ВыражениеПоля, ГенераторТекстовВыражений);
		
		Если АгрегатнаяФункция <> Неопределено Тогда
			Если СтрЧислоСтрок(ТекстВыражения) = 1 Тогда
				Шаг = "И Я устанавливаю агрегатную функцию """ + АгрегатнаяФункция + """ для поля с выражением '" + ТекстВыражения + "'";
			Иначе
				ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(ТекстВыражения, "ВыражениеПоля", ТекущиеТабуляции);
				Шаг = "И Я устанавливаю агрегатную функцию """ + АгрегатнаяФункция + """ для поля с выражением ""$ВыражениеПоля$""";
			КонецЕсли;	
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
		КонецЕсли;	
	КонецЦикла; 
КонецПроцедуры

// Установка упорядочивания в тек док.
// 
// Параметры:
//  МодельЗапроса - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора 
//  ТекущиеТабуляции - Строка
Процедура УстановкаУпорядочиванияВТекДок(МодельЗапроса, ТекущиеТабуляции)
	КолонкиПоИД = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(МодельЗапроса.Колонки, "Идентификатор");
	Для Каждого ЭлементПорядка Из МодельЗапроса.Порядок Цикл
		Если ЭлементПорядка.Направление = ЭлементыМоделиЗапроса.НовыйНаправлениеВозрастание() Тогда
			Направление = "Возрастание";
		Иначе
			Направление = "Убывание";
		КонецЕсли;
			
		Если ЭлементПорядка.Иерархия Тогда
			Направление = Направление + " иерархии";
		КонецЕсли;	
			
		Если ЭлементПорядка.Выражение.Значение.Тип = "СсылкаНаКолонкуЗапроса" Тогда
			ИмяКолонки = КолонкиПоИД.Получить(ЭлементПорядка.Выражение.Значение.Идентификатор).Имя;
			Шаг = "И Я добавляю упорядочивание по колонке запроса """ + ИмяКолонки + """ по """ + Направление +  """";
		ИначеЕсли ЭтоПолеИсточника(ЭлементПорядка.Выражение) Тогда 
			ТекстВыражения = ГенерацияТекстовЗапросов.ВыражениеВСтроку(ЭлементПорядка.Выражение, ГенераторТекстовВыражений);
			Шаг = "И Я добавляю упорядочивание по полю источника """ + ТекстВыражения + """ по """ + Направление +  """";
		Иначе
			ВызватьИсключение "Данный запрос не может быть создан в конструкторе. Не возможно добавить упорядочивание";
		КонецЕсли;
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	КонецЦикла;
КонецПроцедуры

// Установка индексирования в тек док.
// 
// Параметры:
//  МодельЗапроса - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора 
//  ТекущиеТабуляции - Строка
Процедура УстановкаИндексированияВТекДок(МодельЗапроса, ТекущиеТабуляции)
	КолонкиПоИД = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(МодельЗапроса.Колонки, "Идентификатор");
	Для Каждого Индекс Из МодельЗапроса.Индекс.Элементы Цикл
		ИмяКолонки = КолонкиПоИД.Получить(Индекс.Идентификатор).Имя;
		Шаг = "И Я добавляю колонку запроса """ + ИмяКолонки + """ в индекс";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьУстановкуФлагаКоличестваЗаписейВТекДок(КоличествоЗаписей, ТекущиеТабуляции)
	Шаг = "И Я устанавливаю выбор " + Формат(КоличествоЗаписей, "ЧГ=;") + " первых записей";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Процедура ДобавитьУстановкуФлагаРазличныеТекДок(ТекущиеТабуляции)
	Шаг = "И Я устанавливаю выбор уникальных записей";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Процедура ДобавитьУстановкуФлагаРазрешенныеТекДок(ТекущиеТабуляции)
	Шаг = "И Я устанавливаю выбор только разрешенных записей";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Процедура ДобавитьУстановкуИмениВременнойТаблицыВТекДок(ИмяВТ, ТекущиеТабуляции)
	Шаг = "И Я устанавливаю имя создаваемой временной таблицы """ + ИмяВТ + """";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
КонецПроцедуры

Процедура ПрисвоениеМногострочногоВыраженияПеременнойВТекДок(Выражение, ИмяПеременнной, Знач ТекущиеТабуляции)
	Шаг = "И Я запоминаю в переменную """ + ИмяПеременнной + """ значение";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Шаг);
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + """""""");
	Для НомерСтроки = 1 По СтрЧислоСтрок(Выражение) Цикл
//		Строка = "|'" + СтрПолучитьСтроку(Выражение, НомерСтроки) + "'|";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + СтрПолучитьСтроку(Выражение, НомерСтроки));
	КонецЦикла;
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + """""""");
КонецПроцедуры

Функция ЭтоОборПоПолюИсточника(Выражение)
	Если ЭтоПолеИсточника(Выражение) Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Если Не (Выражение.Тип = "БинарнаяОперация"
		И Выражение.Операция = "="
		И ЭтоПолеИсточника(Выражение.ЛеваяЧасть)) Тогда
			
		Возврат Ложь;
	КонецЕсли;
	
	Если Выражение.ЛеваяЧасть.Тип = "ПолеИсточника" Тогда
		ИмяПоля = Выражение.ЛеваяЧасть.ИмяПоля;
	Иначе
		ИмяПоля = Выражение.ЛеваяЧасть.Элементы[Выражение.ЛеваяЧасть.Элементы.ВГраница()];
	КонецЕсли;
	
	Если ТипЗнч(Выражение.ПраваяЧасть) = Тип("Структура")
		И Выражение.ПраваяЧасть.Тип = "ПараметрЗапроса"
		И Выражение.ПраваяЧасть.Имя = ИмяПоля Тогда
			
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции

Функция ЭтоПолеИсточника(Выражение)
	Если ТипЗнч(Выражение) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоПроизвольныйТип = Ложь;
	Если Выражение.Тип = "ВыражениеМоделиЗапроса" Тогда
		ТекущееВыражение = Выражение.Значение;
		ЭтоПроизвольныйТип = Выражение.ТипЗначения.Типы().Количество() = 1
			И МодельЗапросаТипы.СодержитПроизвольныйТип(Выражение.ТипЗначения);
	Иначе
		ТекущееВыражение = Выражение;
		ЭтоПроизвольныйТип = Истина;
	КонецЕсли;	
	
	Если ТекущееВыражение.Тип <> "Разыменование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущееВыражение.Элементы[0].Тип <> "ПолеИсточника" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Индекс = 1 По ТекущееВыражение.Элементы.ВГраница() Цикл
		Если ЭтоПроизвольныйТип Или ТипЗнч(ТекущееВыражение.Элементы[Индекс]) <> Тип("Строка") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецЕсли
