
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание(ИмяРегистра) Экспорт
	МетаданныеРегистра = Метаданные.РегистрыРасчета.Найти(ИмяРегистра);
	
	Если МетаданныеРегистра.Имя <> "Начисления"
		И МетаданныеРегистра.Имя <> "Удержания" Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	Описание.Имя = ИмяПредставления(ИмяРегистра);
	
	Описание.ПоддерживаютсяИндексы = Истина; 
	Описание.ПоддерживаетсяПолучениеРезультатаЗапроса = Ложь;
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Истина;  
	Описание.ПоддерживаетсяПсевдонимыПолей = Истина;
	Описание.ДоступноВМеханизмеПредставленийСКД = Ложь;
		
	ОписаниеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеВТФильтр();
	Описание.ОписаниеВТФильтр = ОписаниеФильтра;
	ОписаниеФильтра.Обязательный = Истина;
	ОписаниеФильтра.ПоддерживаетсяИмяВТФильтр = Истина;
	ОписаниеФильтра.ПоддерживаютсяПсевдонимы = Истина;
	
	ПолеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();
	ПолеФильтра.Имя = "Регистратор";
	ПолеФильтра.Обязательный = Ложь;
	ОписаниеФильтра.ПоляФильтра.Добавить(ПолеФильтра);
	
	ПолеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();
	ПолеФильтра.Имя = "НомерСтроки";
	ПолеФильтра.Обязательный = Ложь;
	ОписаниеФильтра.ПоляФильтра.Добавить(ПолеФильтра);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Регистратор";
	Поле.ТипЗначения = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип; 
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "НомерСтроки";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число"); 
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПериодРегистрации";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число"); 
	Описание.Поля.Добавить(Поле);
	
	ПолеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();
	ПолеФильтра.Имя = "ПериодРегистрации";
	ПолеФильтра.Обязательный = Ложь;
	ОписаниеФильтра.ПоляФильтра.Добавить(ПолеФильтра);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВидРасчета";
	Поле.ТипЗначения = МетаданныеРегистра.СтандартныеРеквизиты.ВидРасчета.Тип;
	Описание.Поля.Добавить(Поле);
	
	Если МетаданныеРегистра.ПериодДействия Тогда
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействия";
		Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		Описание.Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействияНачало";
		Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		Описание.Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействияКонец";
		Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		Описание.Поля.Добавить(Поле);
		
		ПолеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();
		ПолеФильтра.Имя = "ПериодДействия";
		ПолеФильтра.Обязательный = Ложь;
		ОписаниеФильтра.ПоляФильтра.Добавить(ПолеФильтра);
	КонецЕсли;
	
	Если МетаданныеРегистра.БазовыйПериод Тогда		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "БазовыйПериодНачало";
		Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		Описание.Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "БазовыйПериодКонец";
		Поле.ТипЗначения = Новый ОписаниеТипов("Дата"); 
		Описание.Поля.Добавить(Поле);
	КонецЕсли;
		
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Измерение.Имя;
		Поле.ТипЗначения = Измерение.Тип;
		Описание.Поля.Добавить(Поле);	
		
		ПолеФильтра = ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();
		ПолеФильтра.Имя = Измерение.Имя;
		ПолеФильтра.Обязательный = Ложь;
		ОписаниеФильтра.ПоляФильтра.Добавить(ПолеФильтра);
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Ресурс.Имя;
		Поле.ТипЗначения = Ресурс.Тип;
		Описание.Поля.Добавить(Поле);	
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = Реквизит.Имя;
		Поле.ТипЗначения = Реквизит.Тип;
		Описание.Поля.Добавить(Поле);	
		
		Отбор = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеОтбора();
		Отбор.Поле = Реквизит.Имя;
		Отбор.ДоступноРазыменование = Истина;
		Описание.ДоступныеОтборы.Добавить(Отбор);	
	КонецЦикла;
		
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "РезультатБаза";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);	
	
	Если ИмяРегистра = "Удержания" Тогда
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "РезультатБазаВЦеломЗаМесяц";
		Поле.ТипЗначения = Новый ОписаниеТипов("Число");
		Описание.Поля.Добавить(Поле);	
	КонецЕсли;
			
	Для Каждого Поле Из ПоляРазрезы(ИмяРегистра) Цикл
		Описание.Поля.Добавить(Поле);
	КонецЦикла;
		
	Возврат Описание;
КонецФункции

Функция ИмяПредставления(ИмяРегистра) Экспорт
	Возврат "ИсполняемоеПредставление.РегистрРасчета." + ИмяРегистра + ".База";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	- РезультатЗапроса 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	ЧастиИмени = СтрРазделить(ПараметрыВыполнения.ИмяИсполняемогоПредставления, ".");
	ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	
	ЗапросПолученияДанныхРегистра = ЗапросПолученияДанныхРегистра(ПараметрыВыполнения, ИмяРегистра);
	ЗапросПолученияДанныхРегистра.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	Для Каждого Отбор Из ПараметрыВыполнения.Отборы Цикл
		Если Отбор.ЗначениеОтбора.ЭтоПараметрЗапроса Тогда
			Значение = Запрос.Параметры[Отбор.ЗначениеОтбора.Значение];
			ЗапросПолученияДанныхРегистра.УстановитьПараметр(Отбор.ЗначениеОтбора.Значение, Значение);
		КонецЕсли;	
	КонецЦикла;
	
	ДанныеРегистра = ЗапросПолученияДанныхРегистра.Выполнить().Выгрузить();
	
	Если ИмяРегистра = "Начисления" Тогда
		ОписаниеРассчитываемогоНабора = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораНачисленийТаблица();
	Иначе
		ОписаниеРассчитываемогоНабора = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораУдержанийТаблица();
	КонецЕсли;
	
	Для Каждого СтрокаРегистра Из ДанныеРегистра Цикл
		СтрокаРасчитываемогоНабора = ОписаниеРассчитываемогоНабора.РассчитываемыеЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасчитываемогоНабора, СтрокаРегистра);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетБазыНачислений = Обработки.РасчетБазыНачисленийУдержаний.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерРасчетаЗП = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(
		КонецМесяца(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()), 
		Справочники.Организации.ПустаяСсылка());
		
	Если ИмяРегистра = "Начисления" Тогда
		НастройкиРасчетаБазы = Обработки.РасчетБазыНачисленийУдержаний.НовыйНастройкиРасчетаБазыНачислений();
		НастройкиРасчетаБазы.ПолучатьПодробнуюРасшифровку = НеобходимаРасшифровкаБазы(ПараметрыВыполнения.ИспользуемыеПоля, ИмяРегистра);	
		РасчетБазыНачислений.ИнициализироватьРасчетБазыНачислений(
			ОписаниеРассчитываемогоНабора, 
			МенеджерРасчетаЗП, 
			НастройкиРасчетаБазы);	
		РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаНачислений();
	Иначе
		НастройкиРасчетаБазы = Обработки.РасчетБазыНачисленийУдержаний.НовыйНастройкиРасчетаБазыУдержаний();
		РасчетБазыНачислений.ИнициализироватьРасчетБазыУдержаний(
			ОписаниеРассчитываемогоНабора, 
			МенеджерРасчетаЗП, 
			НастройкиРасчетаБазы);	
		РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаУдержаний();
	КонецЕсли;	
	
	ПоляГруппировки = ИменаИспользуемыхПолейРазрезов(ПараметрыВыполнения, ИмяРегистра);
	ПоляГруппировки.Добавить("Регистратор");
	ПоляГруппировки.Добавить("НомерСтроки");
	
	Если ИмяРегистра = "Начисления" Тогда
		СуммиуемыеПоля = "РезультатБаза";
	Иначе
		СуммиуемыеПоля = "РезультатБаза, РезультатБазаВЦеломЗаМесяц";
	КонецЕсли;
	ПоляГруппировкиСтрокой = СтрСоединить(ПоляГруппировки, ",");
	РасчетнаяБаза.Свернуть(ПоляГруппировкиСтрокой, СуммиуемыеПоля);
	
	Результат = Новый ТаблицаЗначений();
	Для Каждого КлючЗначение Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		ОписаниеПоля = Описание.ПоляПоИменам.Получить(КлючЗначение.Ключ);
		Результат.Колонки.Добавить(ОписаниеПоля.Имя, ОписаниеПоля.ТипЗначения);
	КонецЦикла;
	
	ДанныеРегистра.Индексы.Добавить("Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	Для Каждого СтрокаБазы Из РасчетнаяБаза Цикл
		СтрокаРезультат = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаБазы);
		СтруктураПоиска.НомерСтроки = СтрокаБазы.НомерСтроки;
		СтруктураПоиска.Регистратор = СтрокаБазы.Регистратор;
		
		СтрокаДанныхРегистра = ДанныеРегистра.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДанныхРегистра);
	КонецЦикла;
	
	ЗапросРезультат = Новый Запрос();
	ЗапросРезультат.Текст = ТекстРезультирующегоЗапрос(ПараметрыВыполнения, Описание);
	ЗапросРезультат.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросРезультат.УстановитьПараметр("РегистрРасчетаБаза", Результат);
	
	Возврат ЗапросРезультат.Выполнить();
КонецФункции

Функция ИсполняемыйКод(ПараметрыВыполнения, Знач ТекущиеТабуляции) Экспорт
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	Утилиты = ГенерацияИсполняемогоКодаПредставленийУтилиты;
	
	ЧастиИмени = СтрРазделить(ПараметрыВыполнения.ИмяИсполняемогоПредставления, ".");
	ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	
	Строка = "ЗапросПолученияДанныхРегистра = Новый Запрос;";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Строка = "ЗапросПолученияДанныхРегистра.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Строка = "ЗапросПолученияДанныхРегистра.Текст = ";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	ЗапросПолученияДанныхРегистра = ЗапросПолученияДанныхРегистра(ПараметрыВыполнения, ИмяРегистра);
	ТекстЗапроса = Утилиты.ПримитивноеЗначениеВСтроку(ЗапросПолученияДанныхРегистра.Текст) + ";";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, ТекстЗапроса, ТекущиеТабуляции);
		
	Для Каждого Отбор Из ПараметрыВыполнения.Отборы Цикл
		Если Отбор.ЗначениеОтбора.ЭтоПараметрЗапроса Тогда
			Строка = "ЗапросПолученияДанныхРегистра.УстановитьПараметр(""" 
				+ Отбор.ЗначениеОтбора.Значение + """, " + Отбор.ЗначениеОтбора.Значение + ");";
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
		КонецЕсли;	
	КонецЦикла;
	ТекстовыйДокумент.ДобавитьСтроку("");

	Строка = "ДанныеРегистра = ЗапросПолученияДанныхРегистра.Выполнить().Выгрузить();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Если ИмяРегистра = "Начисления" Тогда
		Строка = "ОписаниеРассчитываемогоНабора = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораНачисленийТаблица();";
	Иначе
		Строка = "ОписаниеРассчитываемогоНабора = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораУдержанийТаблица();";
	КонецЕсли;
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Строка = "Для Каждого СтрокаРегистра Из ДанныеРегистра Цикл
	|	СтрокаРасчитываемогоНабора = ОписаниеРассчитываемогоНабора.РассчитываемыеЗаписи.Добавить();
	|	ЗаполнитьЗначенияСвойств(СтрокаРасчитываемогоНабора, СтрокаРегистра);
	|КонецЦикла;
	|
	|УстановитьПривилегированныйРежим(Истина);
	|РасчетБазыНачислений = Обработки.РасчетБазыНачисленийУдержаний.Создать();
	|УстановитьПривилегированныйРежим(Ложь);
	|
	|МенеджерРасчетаЗП = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(
	|	КонецМесяца(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()), 
	|	Справочники.Организации.ПустаяСсылка());";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, ТекущиеТабуляции);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	Если ИмяРегистра = "Начисления" Тогда
		НеобходимаРасшифровкаБазы = НеобходимаРасшифровкаБазы(ПараметрыВыполнения.ИспользуемыеПоля, ИмяРегистра);
		Строка = "НастройкиРасчетаБазы = Обработки.РасчетБазыНачисленийУдержаний.НовыйНастройкиРасчетаБазыНачислений();
		|НастройкиРасчетаБазы.ПолучатьПодробнуюРасшифровку = " + Утилиты.ПримитивноеЗначениеВСтроку(НеобходимаРасшифровкаБазы) + ";	
		|РасчетБазыНачислений.ИнициализироватьРасчетБазыНачислений(
		|	ОписаниеРассчитываемогоНабора, 
		|	МенеджерРасчетаЗП, 
		|	НастройкиРасчетаБазы);	
		|РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаНачислений();";
	Иначе
		Строка = "НастройкиРасчетаБазы = Обработки.РасчетБазыНачисленийУдержаний.НовыйНастройкиРасчетаБазыУдержаний();
		|РасчетБазыНачислений.ИнициализироватьРасчетБазыУдержаний(
		|	ОписаниеРассчитываемогоНабора, 
		|	МенеджерРасчетаЗП, 
		|	НастройкиРасчетаБазы);	
		|РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаУдержаний();";
	КонецЕсли;	
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, ТекущиеТабуляции);
	
	ПоляГруппировки = ИменаИспользуемыхПолейРазрезов(ПараметрыВыполнения, ИмяРегистра);
	ПоляГруппировки.Добавить("Регистратор");
	ПоляГруппировки.Добавить("НомерСтроки");
	
	Если ИмяРегистра = "Начисления" Тогда
		СуммиуемыеПоля = "РезультатБаза";
	Иначе
		СуммиуемыеПоля = "РезультатБаза, РезультатБазаВЦеломЗаМесяц";
	КонецЕсли;
	ПоляГруппировкиСтрокой = СтрСоединить(ПоляГруппировки, ",");
	Строка = "РасчетнаяБаза.Свернуть(""" + ПоляГруппировкиСтрокой + """,""" + СуммиуемыеПоля + """);";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	Строка = "Результат = Новый ТаблицаЗначений;";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	Строка = "ИспользуемыеПоля = Новый Соответствие();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Для Каждого КлючЗначение Из ПараметрыВыполнения.ИспользуемыеПоля Цикл
		Строка = "ИспользуемыеПоля.Вставить(""" + КлючЗначение.Ключ + """, Истина);";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);	
	КонецЦикла;
	
	Строка = "Для Каждого Колонка Из ДанныеРегистра.Колонки Цикл
	|	Если ИспользуемыеПоля.Получить(ВРег(Колонка.Имя)) <> Неопределено Тогда
	|		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	|	КонецЕсли;
	|КонецЦикла;
	|Для Каждого Колонка Из РасчетнаяБаза.Колонки Цикл
	|	Если ИспользуемыеПоля.Получить(ВРег(Колонка.Имя)) <> Неопределено Тогда
	|		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	|	КонецЕсли;
	|КонецЦикла;
	|
	|ДанныеРегистра.Индексы.Добавить(""Регистратор, НомерСтроки"");
	|СтруктураПоиска = Новый Структура(""Регистратор, НомерСтроки"");
	|
	|Для Каждого СтрокаБазы Из РасчетнаяБаза Цикл
	|	СтрокаРезультат = Результат.Добавить();
	|	ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаБазы);
	|	СтруктураПоиска.НомерСтроки = СтрокаБазы.НомерСтроки;
	|	СтруктураПоиска.Регистратор = СтрокаБазы.Регистратор;
	|	
	|	СтрокаДанныхРегистра = ДанныеРегистра.НайтиСтроки(СтруктураПоиска)[0];
	|	ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаДанныхРегистра);
	|КонецЦикла;";
	
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, ТекущиеТабуляции);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	ЗапросРезультатТекст = ТекстРезультирующегоЗапрос(ПараметрыВыполнения, Описание);
	
	Строка = "ЗапросРезультат = Новый Запрос();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	Строка = "ЗапросРезультат.Текст = ";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	ТекстЗапроса = Утилиты.ПримитивноеЗначениеВСтроку(ЗапросРезультатТекст) + ";";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, ТекстЗапроса, ТекущиеТабуляции);
	
	Строка = "ЗапросРезультат.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	|ЗапросРезультат.УстановитьПараметр(""РегистрРасчетаБаза"", Результат);";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, ТекущиеТабуляции);
	
	Строка = "ЗапросРезультат.Выполнить();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);

	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

// Текст запроса для СКД.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
// 
// Возвращаемое значение:
//  - Строка
Функция ТекстЗапросаДляСКД(ПараметрыВыполнения) Экспорт
	
КонецФункции

Функция ПоляРазрезы(ИмяРегистра)
	Поля = Новый Массив();
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВидРасчетаРазрез";
	Поле.ТипЗначения =  Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления");
	Поля.Добавить(Поле);
	
	Если ИмяРегистра = "Начисления" Тогда
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "РегистраторРазрез";
		Поле.ТипЗначения = Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип;
		Поля.Добавить(Поле);	
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "НомерСтрокиРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Число");
		Поля.Добавить(Поле);	
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "СотрудникРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Поля.Добавить(Поле);	
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ГоловнаяОрганизацияРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("СправочникСсылка.Организации");
		Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ИдентификаторСтрокиРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Число");
		Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодРегистрацииРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Дата");
		Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействияРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Дата");
		Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействияНачалоРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Дата");
		Поля.Добавить(Поле);
		
		Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
		Поле.Имя = "ПериодДействияКонецРазрез";
		Поле.ТипЗначения =  Новый ОписаниеТипов("Дата");
		Поля.Добавить(Поле);
	КонецЕсли;
	
	Возврат Поля;
КонецФункции

Функция ЗапросПолученияДанныхРегистра(ПараметрыВыполнения, ИмяРегистра)
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	МетаданныеРегистра = Метаданные.РегистрыРасчета.Найти(ИмяРегистра);
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	ЗапросСхемы.ВыбиратьРазрешенные = ПараметрыВыполнения.ТолькоРазрешенные;
	
	Оператор = ЗапросСхемы.Операторы[0];
	ИсточникРегистр = Оператор.Источники.Добавить(ЗапросСхемы.ДоступныеТаблицы.Найти(МетаданныеРегистра.ПолноеИмя()), "РегистрРасчета");
	
	ИсточникФильтр = Оператор.Источники.Добавить(
		Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ, "Фильтр");
	
	УсловияСоединения = Новый Массив();
	Для Каждого ПолеФильтра Из Описание.ОписаниеВТФильтр.ПоляФильтра Цикл
		ИмяПоляТаблицыФильтра = ПараметрыВыполнения.ОписаниеВТФильтр.ПсевдонимыПолей.Получить(ПолеФильтра.Имя);
		Если ИмяПоляТаблицыФильтра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникФильтр.Источник.ДоступныеПоля.Добавить(ИмяПоляТаблицыФильтра);
		УсловияСоединения.Добавить("РегистрРасчета." + ПолеФильтра.Имя + " = Фильтр." + ИмяПоляТаблицыФильтра);	
	КонецЦикла;
	
	УсловияСоединения.Добавить("РегистрРасчета.ВидРасчета.ТребуетсяРасчетБазы");
	УсловиеСвязи = СтрСоединить(УсловияСоединения, " И ");
	ИсточникРегистр.Соединения.Добавить(ИсточникФильтр, УсловиеСвязи);
	ИсточникРегистр.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	ЗапросПолученияДанныхРегистра = Новый Запрос();

	Для Каждого Отбор Из ПараметрыВыполнения.Отборы Цикл
		Если Отбор.ЗначениеОтбора.ЭтоПараметрЗапроса Тогда
			ЗначениеСтрокой = "&" + Отбор.ЗначениеОтбора.Значение;
			Если ВРег(Отбор.ВидСравнения) = "В"
				Или ВРег(Отбор.ВидСравнения) = "НЕ В"
				Или ВРег(Отбор.ВидСравнения) = "В ИЕРАРХИИ"
				Или ВРег(Отбор.ВидСравнения) = "НЕ В ИЕРАРХИИ" Тогда 
					
				ЗначениеСтрокой = "(" + ЗначениеСтрокой + ")";
			КонецЕсли;
		Иначе
			ЗначениеСтрокой = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(Отбор.ЗначениеОтбора.Значение);
		КонецЕсли;	
		
		Выражение = "РегистрРасчета." + СтрСоединить(Отбор.ПутьКПолю, ".") + Отбор.ВидСравнения + ЗначениеСтрокой;
		Оператор.Отбор.Добавить(Выражение);
	КонецЦикла;
	
	ОбязательныеПоляОтбора = ОбязательынеПоляРегистра(ИмяРегистра);
			
	Для Каждого Поле Из ОбязательныеПоляОтбора Цикл
		Оператор.ВыбираемыеПоля.Добавить("РегистрРасчета." + Поле);
	КонецЦикла;
		
	Для Каждого Поле Из Описание.Поля Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОбязательныеПоляОтбора.Найти(Поле.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Если ИсточникРегистр.Источник.ДоступныеПоля.Найти(Поле.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Оператор.ВыбираемыеПоля.Добавить("РегистрРасчета." + Поле.Имя);
	КонецЦикла;
	
	Если ИмяРегистра = "Удержания" Тогда
		Выражение = "НАЧАЛОПЕРИОДА(РегистрРасчета.БазовыйПериодНачало, МЕСЯЦ)";
		Оператор.ВыбираемыеПоля.Добавить(Выражение);
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество() - 1].Псевдоним = "МесяцУдержания";
	КонецЕсли;
	
	ЗапросПолученияДанныхРегистра.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ЗапросПолученияДанныхРегистра;
КонецФункции

Функция ОбязательынеПоляРегистра(ИмяРегистра)
	ОбязательынеПоля = Новый Массив();
	
	Если ИмяРегистра = "Начисления" Тогда
		Таблица = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораНачисленийТаблица().РассчитываемыеЗаписи;
	Иначе
		Таблица = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораУдержанийТаблица().РассчитываемыеЗаписи;
	КонецЕсли;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если ИмяРегистра = "Удержания"
			И (Колонка.Имя = "МесяцУдержания"
			Или Колонка.Имя = "СторнируемыйДокумент"
			Или Колонка.Имя = "РассчитыватьПоРазовымНачислениямДокумента"
			Или Колонка.Имя = "РегистраторРазовогоНачисления") Тогда
				
			Продолжить;
		КонецЕсли;
		
		ОбязательынеПоля.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат ОбязательынеПоля;
КонецФункции

Функция НеобходимаРасшифровкаБазы(ИспользуемыеПоля, ИмяРегистра)
	Для Каждого Поле Из ПоляРазрезы(ИмяРегистра) Цикл
		Если ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ТекстРезультирующегоЗапрос(ПараметрыВыполнения, ОписаниеПредставления)
	ПсевдонисыПолейВРег  = Новый Соответствие();
	Для Каждого КлючЗначение Из ПараметрыВыполнения.ПсевдонисыПолей Цикл
		ПсевдонисыПолейВРег.Вставить(ВРег(КлючЗначение.Ключ), КлючЗначение.Значение);	
	КонецЦикла;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];

	ИсточникТЗ  = Оператор.Источники.Добавить(
		Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		"&РегистрРасчетаБаза", 
		"РегистрРасчетаБаза");
		
	Для Каждого Поле Из ОписаниеПредставления.Поля Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Псевдоним = ПсевдонисыПолейВРег.Получить(ВРег(Поле.Имя));	
		ИсточникТЗ.Источник.ДоступныеПоля.Добавить(Поле.Имя);
		Оператор.ВыбираемыеПоля.Добавить("РегистрРасчетаБаза." + Поле.Имя);
		Если Псевдоним <> Неопределено Тогда
			ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество() - 1].Псевдоним = Псевдоним;
		КонецЕсли;		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ИмяВТРезультат) Тогда
		Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	ЗапросСхемы.ТаблицаДляПомещения = ПараметрыВыполнения.ИмяВТРезультат;
	Для Каждого Индекс Из ПараметрыВыполнения.Индексы Цикл
		ЗапросСхемы.Индекс.Добавить(Индекс);
	КонецЦикла;
	
	Возврат ЗапросСхемы.ПолучитьТекстЗапроса();
КонецФункции

Функция ИменаИспользуемыхПолейРазрезов(ПараметрыВыполнения, ИмяРегистра)
	Имена = Новый Массив();
	Для Каждого Поле Из ПоляРазрезы(ИмяРегистра) Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) <> Неопределено Тогда
			Имена.Добавить(Поле.Имя);
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Имена;
КонецФункции

#КонецОбласти

#КонецЕсли
