
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание() Экспорт
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	Описание.Имя = ИмяПредставления(); 
	
	Описание.ПоддерживаютсяИндексы = Ложь;
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Истина; 
	Описание.ДоступноВМеханизмеПредставленийСКД = Истина;
	Описание.ИмяВТДляСКД = "Представления_ДанныеУчетаВремениИСостоянийСотрудников";  
	Описание.ПоддерживаютсяИндексы = Ложь;
	Описание.Подсказка = "Обеспечивает доступ к методу ""УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников"".
	|Получает данные о фактическом рабочем времени сотрудников, включая отклонения.
	|При получении данных учитываются общие и индивидуальные графики, табели, документы отклонения (как внутрисменные так и целосменные). Также можно получить время в разрезе территорий выполнения работ и условий труда.
	|В типовой конфигурации запрос используемый в этом методе используется для формирования отчета Т-13 и заполнения документа ""Табель учета рабочего времени"".";
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Сотрудник";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Организация";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Подразделение";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Должность";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Должности");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Дата";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВидУчетаВремени";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Дни";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Часы";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Отклонение";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Смена";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников");
	Описание.Поля.Добавить(Поле);     
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Территория";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот");
	Описание.Поля.Добавить(Поле);
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "УсловияТруда";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УсловияТруда");
	Описание.Поля.Добавить(Поле);   
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "НормаЧасов";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле); 
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПереходящаяЧастьПредыдущейСмены";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле);  
	
	Поле =  ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ПереходящаяЧастьТекущейСмены";
	Поле.ТипЗначения = Новый ОписаниеТипов("Булево");
	Описание.Поля.Добавить(Поле);  
	
	Описание.ОписаниеВТФильтр =  ЭлементыМоделиОписанияПредставлений.НовыйОписаниеВТФильтр();
	
	Описание.ОписаниеВТФильтр .Обязательный = Истина; 
	
	Описание.ОписаниеВТФильтр.ПоддерживаютсяПсевдонимы = Ложь;;
	Описание.ОписаниеВТФильтр.ПоддерживаетсяИмяВТФильтр = Истина;   
	Описание.ОписаниеВТФильтр.ПоддерживаниетсяТЗФильтр = Ложь; 	 
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "Сотрудник";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	 
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "ДатаНачала";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);
	
	ПолеФильтра =  ЭлементыМоделиОписанияПредставлений.НовыйПолеФильтра();  
	ПолеФильтра.Имя = "ДатаОкончания";
	ПолеФильтра.Обязательный = Истина;	
	Описание.ОписаниеВТФильтр.ПоляФильтра.Добавить(ПолеФильтра);  

	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ДатаНачала", 
		ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеТипаДата(), 
		Истина);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);  
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ДатаОкончания", 
		ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеТипаДата(), 
		Истина);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);  
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ДатаАктуальности", 
		ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеТипаДата(), 
		Истина);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);   
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"Организация", 
		Новый ОписаниеТипов("СправочникСсылка.Организации"), 
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра); 
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"Подразделение", 
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), 
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ВыделятьВыходныеВПериодыОтклонений", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Истина,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);  
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"УчитыватьТабельныеДанныеОТерриториях", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Истина,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра); 
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ОтноситьПереходящуюЧастьСменыКДнюНачала", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Ложь,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);		
	
	ОписаниеПараметра =  ОписаниеИсполняемыхПредставленийУтилиты.ОписаниеПараметраКонстанта(
		"ПолучатьНормуВремениЗаПолныйМесяц", 
		Новый ОписаниеТипов("Булево"), 
		Ложь, 
		Ложь,
		Ложь);
	Описание.ОписаниеПараметров.Добавить(ОписаниеПараметра);	
	
	Возврат Описание;	
КонецФункции

Функция ИмяПредставления() Экспорт
	Возврат "ИсполняемоеПредставление.ДанныеУчетаВремениСотрудников";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	РезультатЗапроса, Неопределено 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	
	ПараметрыПолученияДанных.ИмяВТСотрудники = ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ;
	ПараметрыПолученияДанных.ИмяВТРезультат = ПараметрыВыполнения.ИмяВТРезультат;
	
	ПараметрОрганизация = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Организация");
	Если ПараметрОрганизация <> Неопределено Тогда
		ПараметрыПолученияДанных.Организация  = Запрос.Параметры[ПараметрОрганизация.Значение];
	КонецЕсли;
	ПараметрПодразделение = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Подразделение");
	Если ПараметрПодразделение <> Неопределено Тогда
		ПараметрыПолученияДанных.Подразделение = Запрос.Параметры[ПараметрПодразделение.Значение];
	КонецЕсли;
	
	ПараметрДатаНачала = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаНачала");
	Если ПараметрДатаНачала.ЭтоПараметрЗапроса Тогда
		ПараметрыПолученияДанных.ДатаНачала = Запрос.Параметры[ПараметрДатаНачала.Значение];
	Иначе
		ПараметрыПолученияДанных.ДатаНачала = ПараметрДатаНачала.Значение;
	КонецЕсли;	
	ПараметрыПолученияДанных.МесяцДатаНачала = НачалоМесяца(ПараметрыПолученияДанных.ДатаНачала);
	
	ПараметрДатаОкончания = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаОкончания");
	Если ПараметрДатаОкончания.ЭтоПараметрЗапроса Тогда
		ПараметрыПолученияДанных.ДатаОкончания = Запрос.Параметры[ПараметрДатаОкончания.Значение];
	Иначе
		ПараметрыПолученияДанных.ДатаОкончания = ПараметрДатаОкончания.Значение;
	КонецЕсли;
	ПараметрыПолученияДанных.МесяцДатаОкончания = КонецМесяца(ПараметрыПолученияДанных.ДатаОкончания);
	
	ПараметрДатаАктуальности = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаАктуальности");
	Если ПараметрДатаАктуальности.ЭтоПараметрЗапроса Тогда
		ПараметрыПолученияДанных.ДатаАктуальности = Запрос.Параметры[ПараметрДатаАктуальности.Значение];
	Иначе
		ПараметрыПолученияДанных.ДатаАктуальности = ПараметрДатаАктуальности.Значение;
	КонецЕсли;
	
	ПараметрВыделятьВыходныеВПериодыОтклонений = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ВыделятьВыходныеВПериодыОтклонений");
	Если ПараметрВыделятьВыходныеВПериодыОтклонений <> Неопределено Тогда
		ПараметрыПолученияДанных.ВыделятьВыходныеВПериодыОтклонений = ПараметрВыделятьВыходныеВПериодыОтклонений.Значение;
	КонецЕсли;
	
	ПараметрУчитыватьТабельныеДанныеОТерриториях = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("УчитыватьТабельныеДанныеОТерриториях");
	Если ПараметрУчитыватьТабельныеДанныеОТерриториях <> Неопределено Тогда
		ПараметрыПолученияДанных.УчитыватьТабельныеДанныеОТерриториях = ПараметрУчитыватьТабельныеДанныеОТерриториях.Значение;
	КонецЕсли;
	
	ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ОтноситьПереходящуюЧастьСменыКДнюНачала");
	Если ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала <> Неопределено Тогда
		ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала.Значение;
	КонецЕсли;	
	
	Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег("Территория")) <> Неопределено
		Или ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег("УсловияТруда")) <> Неопределено Тогда
		
		ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории = Истина;
	КонецЕсли;	
	
	ПараметрыПолученияДанных.РассчитыватьПлановоеВремя = ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег("НормаЧасов")) <> Неопределено;
		
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		ПараметрыВыполнения.ТолькоРазрешенные,
		ПараметрыПолученияДанных);
		
	Возврат Неопределено;
КонецФункции

Функция ИсполняемыйКод(ПараметрыВыполнения, ТекущиеТаблцляции) Экспорт
	МассивСтрок = Новый ТекстовыйДокумент();
	
	Строка = "ПараметрыПолученияДанных = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();";
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияЗначения(
		"ПараметрыПолученияДанных.ИмяВТСотрудники", 
		ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияЗначения(
		"ПараметрыПолученияДанных.ИмяВТРезультат", 
		ПараметрыВыполнения.ИмяВТРезультат ,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияЗначения(
		"ПараметрыПолученияДанных.РассчитыватьПлановоеВремя", 
		ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег("НормаЧасов")) <> Неопределено,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.Организация", 
		"Организация",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.Подразделение", 
		"Подразделение",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.ДатаНачала", 
		"ДатаНачала",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	Строка = "ПараметрыПолученияДанных.МесяцДатаНачала = НачалоМесяца(ПараметрыПолученияДанных.ДатаНачала);";
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.ДатаОкончания", 
		"ДатаОкончания",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	Строка = "ПараметрыПолученияДанных.МесяцДатаОкончания = КонецМесяца(ПараметрыПолученияДанных.ДатаОкончания);";
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Строка);

	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.ДатаАктуальности", 
		"ДатаАктуальности",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	ПолучатьУсловияТрудаИТерритории = ИсполнительПредставленийУтилиты.ИспользуютсяПоляПредставления(
		"Территория, УсловияТруда",
		ПараметрыВыполнения);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияЗначения(
		"ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории", 
		ПолучатьУсловияТрудаИТерритории,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.ВыделятьВыходныеВПериодыОтклонений", 
		"ВыделятьВыходныеВПериодыОтклонений",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.УчитыватьТабельныеДанныеОТерриториях", 
		"УчитыватьТабельныеДанныеОТерриториях",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	Строка = ГенерацияИсполняемогоКодаПредставленийУтилиты.СтрокаПрисвоенияПараметровПеременной(
		"ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала", 
		"ОтноситьПереходящуюЧастьСменыКДнюНачала",
		ПараметрыВыполнения,
		ТекущиеТаблцляции);	
	МассивСтрок.ДобавитьСтроку(Строка);
	
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + "УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(");
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Символы.Таб + "Запрос.МенеджерВременныхТаблиц,");
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Символы.Таб + ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрыВыполнения.ТолькоРазрешенные) + ",");
	МассивСтрок.ДобавитьСтроку(ТекущиеТаблцляции + Символы.Таб + "ПараметрыПолученияДанных);");
		
	Возврат МассивСтрок.ПолучитьТекст();
КонецФункции

Функция ТекстЗапросаДляСКД(ПараметрыВыполнения) Экспорт
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	
	Модель = ГенерацияИсполняемогоКодаПредставленийУтилиты.МодельЗапросаДляСКД(ПараметрыВыполнения, Описание);
	Построитель = МодельЗапросаУтилиты.СоздатьПостроительМодели(Модель);
	
//	TODO не работает из за ошибки в типовй
	
//	РассчитыватьПлановоеВремя = ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег("НормаЧасов")) <> Неопределено;
//	ВыражениеПараметра = 
//		ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("РассчитыватьПлановоеВремя") 
//		+ " = "
//		+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(РассчитыватьПлановоеВремя);
//	
//	Построитель.ДобавитьОтбор(ВыражениеПараметра);
	
	ПараметрОрганизация = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Организация");
	Если ПараметрОрганизация <> Неопределено Тогда
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("Организация") 
			+ " = " + "&" + ПараметрОрганизация.Значение;
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПараметрПодразделение = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("Подразделение");
	Если ПараметрПодразделение <> Неопределено Тогда
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("Подразделение") 
			+ " = " + "&" + ПараметрПодразделение.Значение;
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПараметрДатаНачала = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаНачала");
	Если ПараметрДатаНачала <> Неопределено Тогда
		Если ПараметрДатаНачала.ЭтоПараметрЗапроса Тогда
			Значение = "&" + ПараметрДатаНачала.Значение;
		Иначе
			Значение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрДатаНачала.Значение);
		КонецЕсли; 	
		
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаНачала") 
			+ " = " + Значение;
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
		
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("МесяцДатаНачала") 
			+ " = "
			+ "НАЧАЛОПЕРИОДА(" + Значение + ", МЕСЯЦ)";
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПараметрДатаОкончания = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаОкончания");
	Если ПараметрДатаОкончания <> Неопределено Тогда
		Если ПараметрДатаНачала.ЭтоПараметрЗапроса Тогда
			Значение = "&" + ПараметрДатаОкончания.Значение;
		Иначе
			Значение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрДатаОкончания.Значение);
		КонецЕсли; 	
		
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаОкончания") 
			+ " = " + Значение;
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
		
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("МесяцДатаОкончания") 
			+ " = "
			+ "КОНЕЦПЕРИОДА(" + Значение + ", МЕСЯЦ)";
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПараметрДатаАктуальности = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ДатаАктуальности");
	Если ПараметрДатаАктуальности <> Неопределено Тогда
		Если ПараметрДатаНачала.ЭтоПараметрЗапроса Тогда
			Значение = "&" + ПараметрДатаАктуальности.Значение;
		Иначе
			Значение = ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрДатаАктуальности.Значение);
		КонецЕсли; 	
		
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ДатаАктуальности") 
			+ " = " + Значение;
			
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПолучатьУсловияТрудаИТерритории = ИсполнительПредставленийУтилиты.ИспользуютсяПоляПредставления(
		"Территория, УсловияТруда",
		ПараметрыВыполнения);
		
	ВыражениеПараметра = 
		ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ПолучатьУсловияТрудаИТерритории") 
		+ " = "
		+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПолучатьУсловияТрудаИТерритории);
	
	Построитель.ДобавитьОтбор(ВыражениеПараметра);
	
	ПараметрВыделятьВыходныеВПериодыОтклонений = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ВыделятьВыходныеВПериодыОтклонений");
	Если ПараметрВыделятьВыходныеВПериодыОтклонений <> Неопределено Тогда
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ВыделятьВыходныеВПериодыОтклонений") 
			+ " = "
			+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрВыделятьВыходныеВПериодыОтклонений.Значение);
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
	ПараметрУчитыватьТабельныеДанныеОТерриториях = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("УчитыватьТабельныеДанныеОТерриториях");
	Если ПараметрУчитыватьТабельныеДанныеОТерриториях <> Неопределено Тогда
		ВыражениеПараметра = 
			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("УчитыватьТабельныеДанныеОТерриториях") 
			+ " = "
			+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрУчитыватьТабельныеДанныеОТерриториях.Значение);
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли; 
	
// TODO не работает из за ошибки в типовй	
	
//	ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала= ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить("ОтноситьПереходящуюЧастьСменыКДнюНачала");
//	Если ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала <> Неопределено Тогда
//		ВыражениеПараметра = 
//			ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку("ОтноситьПереходящуюЧастьСменыКДнюНачала") 
//			+ " = "
//			+ ГенерацияИсполняемогоКодаПредставленийУтилиты.ПримитивноеЗначениеВСтроку(ПараметрОтноситьПереходящуюЧастьСменыКДнюНачала.Значение);
//		
//		Построитель.ДобавитьОтбор(ВыражениеПараметра);
//	КонецЕсли; 
	
	
	Запрос = Построитель.ПолучитьМодель().Элементы[0];
	ТекстЗапроса = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(Запрос);
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецЕсли
