#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ИспользоватьСтандартныйОбход;
Перем Посетитель;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьУзел(Узел) Экспорт 
	Если Узел.Тип = "БинарнаяОперация" Тогда
		СтандартыйОбход = Истина;
		Посетитель.БинарнаяОперацияПриВходе(Узел, СтандартыйОбход);
		Если СтандартыйОбход Тогда
			ОбработатьУзел(Узел.ЛеваяЧасть);
			ОбработатьУзел(Узел.ПраваяЧасть);
		КонецЕсли;
		Посетитель.БинарнаяОперация.ПриВходе(Узел);
	ИначеЕсли Узел.Тип = "ОператорМежду" Тогда        
		Если ИспользоватьСтандартныйОбход Тогда
			ОбработатьУзел(Узел.Операнд);
			ОбработатьУзел(Узел.НачалоИнтервала);
			ОбработатьУзел(Узел.КонецИнтервала);
		КонецЕсли;
		Посетитель.ОператорМеждуОбработать(Узел);
	ИначеЕсли Узел.Тип = "ОператорПроверкиТипа" Тогда  
		Если ИспользоватьСтандартныйОбход Тогда
			ОбработатьУзел(Узел.Операнд);
		КонецЕсли;
		Посетитель.ОператорПроверкиТипаОбработать(Узел);
	ИначеЕсли Узел.Тип = "ОператорПроверкиНаNULL" Тогда  
		Если ИспользоватьСтандартныйОбход Тогда
			ОбработатьУзел(Узел.Операнд);
		КонецЕсли;
		Посетитель.ОператорПроверкиНаNULLОбработать(Узел);
	ИначеЕсли Узел.Тип = "СписокВыражений" Тогда
		Если ИспользоватьСтандартныйОбход Тогда
			Для Каждого Выражение Из Узел.Элементы Цикл
				ОбработатьУзел(Выражение);
			КонецЦикла;
		КонецЕсли;
		Посетитель.СписокВыраженийОбработать(Узел);
	ИначеЕсли Узел.Тип = "ОператорВ" Тогда
		Если ИспользоватьСтандартныйОбход Тогда
			ОбработатьУзел(Узел.Операнд);
			Если Выражение.Список.Тип = "СписокВыражений" Тогда
				ОбработатьУзел(Выражение.Список);	
			Иначе
				// TODO
			КонецЕсли;
		КонецЕсли;
		Посетитель.ОператорВОбработать(Узел);
	КонецЕсли;
КонецПроцедуры
		
//		Если Выражение.Список.Тип = "СписокВыражений" Тогда
//			ТипОперанда = РассчитываемыеСвойства.ТипЗначения;
//			ОбработатьВыражение(Выражение.Список, Контекст, РассчитываемыеСвойства);
//			ПараметрСписокЗначений = Выражение.Список.Элементы.Количество() = 1;
//			Для Каждого ЭлементСписка Из Выражение.Список.Элементы Цикл
//				УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, ЭлементСписка, ТипОперанда, ПараметрСписокЗначений);
//			КонецЦикла;
//		Иначе
//			ВложенныйКонтекст = КонтекстОбработкиВложенногоЗапроса(Контекст, Истина);
//			ОбработатьЗапрос(Выражение.Список, ВложенныйКонтекст);
//		КонецЕсли;
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
//	ИначеЕсли Выражение.Тип = "ЛогическоеОтрицание" Тогда  
//		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Выражение, РассчитываемыеСвойства.ТипЗначения);
//	ИначеЕсли Выражение.Тип = "УнарнаяОперация" Тогда    
//		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);
//
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Выражение, РассчитываемыеСвойства.ТипЗначения);
//	ИначеЕсли Выражение.Тип = "ОператорПодобно" Тогда   
//		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства);
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Операнд, Новый ОписаниеТипов("Строка"));
//		ОбработатьВыражение(Выражение.Шаблон, Контекст, РассчитываемыеСвойства);
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Шаблон, Новый ОписаниеТипов("Строка"));
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
//	ИначеЕсли Выражение.Тип = "Разыменование" Тогда
//		ОбработатьВыражениеРазыменования(Выражение, Контекст, РассчитываемыеСвойства);
//	ИначеЕсли Выражение.Тип = "ПриведениеТипа" Тогда 
//		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);
//		
//		// TODO Проверить Выражение.Выражение
//		РассчитываемыеСвойства.ТипЗначения = ТипИзОписанияТипаЗапроса(Выражение.ОписаниеТипа);
//	ИначеЕсли Выражение.Тип = "ТипСсылочногоПоля" Тогда
//		РассчитываемыеСвойства.ТипЗначения = ТипСсылочногоПоля(Выражение)	
//	ИначеЕсли Выражение.Тип = "ОписаниеТипаБулево" Тогда
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
//	ИначеЕсли Выражение.Тип = "ОписаниеТипаДата" Тогда
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
//	ИначеЕсли Выражение.Тип = "ОписаниеТипаЧисло" Тогда
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
//	ИначеЕсли Выражение.Тип = "ОписаниеТипаСтрока" Тогда
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
//	ИначеЕсли Выражение.Тип = "Выбор" Тогда	
//		ТипЗначенияОператораВыбора(Выражение, Контекст, РассчитываемыеСвойства);
//	ИначеЕсли Выражение.Тип = "Константа" Тогда	
//		Типы = Новый Массив;
//		Типы.Добавить(ТипЗнч(Выражение.Значение));
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов(Типы);
//	ИначеЕсли Выражение.Тип = "ПараметрЗапроса" Тогда	
//		РассчитываемыеСвойства.ТипЗначения = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
//		Если РассчитываемыеСвойства.ПараметрыЗапроса.Получить(ВРег(Выражение.Имя)) = Неопределено Тогда
//			ОписаниеПараметра = ЭлементыМоделиЗапроса.НовыйОписаниеПараметраЗапроса();	
//			ОписаниеПараметра.Имя = Выражение.Имя;
//			РассчитываемыеСвойства.ПараметрыЗапроса.Вставить(ВРег(Выражение.Имя), ОписаниеПараметра);
//		КонецЕсли;
//	ИначеЕсли Выражение.Тип = "АгрегатнаяФункция" Тогда   
//		// TODO нельзя использовать вложенные агрегатные функции
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
//		
//		Если Выражение.ИмяФункции <> "МИНИМУМ"
//			И Выражение.ИмяФункции <> "МАКСИМУМ" Тогда
//			РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");
//		КонецЕсли;
//		
//		Если РассчитываемыеСвойства.Свойство("АгрегатныеФункции") Тогда
//			РассчитываемыеСвойства.АгрегатныеФункции.Добавить(Выражение);
//		КонецЕсли;	
//	ИначеЕсли Выражение.Тип = "АгрегатнаяФункцияКоличество" Тогда  
//		// TODO нельзя использовать вложенные агрегатные функции
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");
//
//	ИначеЕсли Выражение.Тип = "ФункцияЧастьПериодаЧислом" Тогда 
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Аргумент, Новый ОписаниеТипов("Дата"));
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
//	ИначеЕсли Выражение.Тип = "ФункцияНачалоПериода" Тогда  
//		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
//	ИначеЕсли Выражение.Тип = "ФункцияКонецПериода" Тогда 
//		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");	
//	ИначеЕсли Выражение.Тип = "ФункцияДобавитьКДате" Тогда 
//		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
//		ОбработатьВыражение(Выражение.Сдвиг, Контекст, РассчитываемыеСвойства);
//		
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Сдвиг, Новый ОписаниеТипов("Число"));
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");	
//	ИначеЕсли Выражение.Тип = "ФункцияДатаВремя" Тогда
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
//	ИначеЕсли Выражение.Тип = "ФункцияIsNull" Тогда  
//		ОбработатьВыражение(Выражение.ПроверяемоеЗначение, Контекст, РассчитываемыеСвойства); 
//		ТипПервогоАргумента = РассчитываемыеСвойства.ТипЗначения;
//		ОбработатьВыражение(Выражение.Действие, Контекст, РассчитываемыеСвойства);
//		ТипВторогоАргумента = РассчитываемыеСвойства.ТипЗначения;
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов(ТипПервогоАргумента, ТипВторогоАргумента.Типы());
//	ИначеЕсли Выражение.Тип = "ФункцияПредставление" Тогда    
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
//	ИначеЕсли Выражение.Тип = "ФункцияПредставлениеСсылки" Тогда 
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
//	ИначеЕсли Выражение.Тип = "ФункцияТипЗначения" Тогда   
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Тип");
//	ИначеЕсли Выражение.Тип = "ФункцияЗначение" Тогда
//		РассчитываемыеСвойства.ТипЗначения = ТипФункцииЗначение(Выражение);	
//	ИначеЕсли Выражение.Тип = "ФункцияТип" Тогда   
//		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Тип");
//	ИначеЕсли Выражение.Тип = "ФункцияРазностьДат" Тогда   
//		ОбработатьВыражение(Выражение.Дата1, Контекст, РассчитываемыеСвойства);
//		ОбработатьВыражение(Выражение.Дата2, Контекст, РассчитываемыеСвойства);
//		
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата1, Новый ОписаниеТипов("Дата"));
//		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата2, Новый ОписаниеТипов("Дата"));
//		
//		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");		
//	ИначеЕсли Выражение.Тип = "ВыражениеВсеПоля" Тогда 
//		// TODO если не раскрываем список полей, то добавить все поля в используемые
//		Возврат;
//	Иначе 
//		ВызватьИсключение "Не известный тип выражения";
//	КонецЕсли;	
//КонецПроцедуры	       




#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли