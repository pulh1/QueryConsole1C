#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытийОбхода

Перем Контекст Экспорт;
Перем СтэкТипов Экспорт;
Перем РассчитываемыеСвойства Экспорт;

// Этот метод является частью "контракта" для обработки вложенных запросов.
// Он должен быть реализован в тех посетителях, которые могут встретить вложенный запрос.
Процедура ПосетитьВложенныйЗапрос(УзелЗапроса) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура БинарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура БинарнаяОперацияПриВыходе(Выражение) Экспорт
	ТипЛевойЧасти = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	ТипПравойЧасти = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
		
	Если Выражение.Операция = "+" Тогда
		// TODO проверить типы, разрешена строка и число	
		ТипЗначения = ТипЛевойЧасти;
	ИначеЕсли Выражение.Операция = "-" 
		Или Выражение.Операция = "/"
		Или Выражение.Операция = "*" Тогда
		
		ТипЗначения = Новый ОписаниеТипов("Число"); 
	ИначеЕсли Выражение.Операция = "=" 
		Или Выражение.Операция = "<>"  
		Или Выражение.Операция = ">"   
		Или Выражение.Операция = "<"
		Или Выражение.Операция = ">="
		Или Выражение.Операция = "<=" Тогда 
		// TODO проверить типы левой и правой части
		ТипЗначения = Новый ОписаниеТипов("Булево");
	Иначе			
		Если Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипЛевойЧасти)
			Или Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипПравойЧасти) Тогда
				
			ВызватьИсключение "Не корректный тип условия";
		КонецЕсли;
		ТипЗначения = Новый ОписаниеТипов("Булево"); 
	КонецЕсли;	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорМеждуПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорМеждуПриВыходе(Выражение) Экспорт
	ТипЛевойЧасти = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ТипНачалоИнтервала = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ТипНачалоКонецИнтервала = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());	
	
	//TODO проверить тип Операнд и НачалоИнтервала И  КонецИнтервала
	ТипЗначения = Новый ОписаниеТипов("Булево");
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПроверкиТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорПроверкиТипаПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПроверкиНаNULLПриВходе(УзВыражениеел, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорПроверкиНаNULLПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура СписокВыраженийПриВходе(Выражение) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура СписокВыраженийПриВыходе(Выражение) Экспорт
	Если Выражение.Элементы.Количество() = 1 Тогда
		ТипЗначения = СтэкТипов[СтэкТипов.ВГраница()];
		СтэкТипов.Удалить(СтэкТипов.ВГраница());
	Иначе	
		Для Индекс = 0 По Выражение.Элементы.ВГраница() Цикл
			СтэкТипов.Удалить(СтэкТипов.ВГраница());
		КонецЦикла;		
		ТипЗначения =  Новый ОписаниеТипов("СписокЗначений");
	КонецЕсли;	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорВПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорВПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
		
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ЛогическоеОтрицаниеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ЛогическоеОтрицаниеПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура УнарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура УнарнаяОперацияПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	ТипЗначения = Новый ОписаниеТипов("Число");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПодобноПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорПодобноПриВыходе(Выражение) Экспорт
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура РазыменованиеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Ложь;
КонецПроцедуры

Процедура РазыменованиеПриВыходе(Выражение) Экспорт
	СтартовыйИндекс = 0; 
	ТекущийТип = Неопределено;
	Если ТипЗнч(Выражение.Элементы[0]) = Тип("Строка") Тогда
		Если ОбработатьОбращениеКПолюИсточника(Выражение.Элементы) Тогда
			ТекущийТип = СтэкТипов[СтэкТипов.ВГраница()];
			СтэкТипов.Удалить(СтэкТипов.ВГраница());
		КонецЕсли;
		СтартовыйИндекс = 1;    
	КонецЕсли;	
	
	Для Индекс = СтартовыйИндекс По Выражение.Элементы.ВГраница() Цикл  
		ЭлементРазыменования = Выражение.Элементы[Индекс];
		Если ЭлементРазыменования = "*" Тогда 
			// TODO как то отработать эту ситуацию   
			ВызватьИсключение "Выражение ИмяТаблицы.* пока не поддерживается";
		ИначеЕсли ТипЗнч(ЭлементРазыменования) = Тип("Строка") Тогда
			Если ТекущийТип = Неопределено Тогда
				ВызватьИсключение "Поле не найдено " + ЭлементРазыменования; 
			КонецЕсли;	  
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить что в табличной части есть нужные поля
				ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
				СтэкТипов.Добавить(ТипЗначения);
				Возврат;
			Иначе	
				ТекущийТип = ТипЭлементаРазыменованияИзОписанияТипов(ЭлементРазыменования, ТекущийТип, Контекст.ДоступныеТаблицыИБ);		
			КонецЕсли;				
		ИначеЕсли ЭлементРазыменования.Тип = "ПриведениеТипа" Тогда
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			ТекущийТип = СтэкТипов.Удалить(СтэкТипов.ВГраница());  
			СтэкТипов.Удалить(СтэкТипов.ВГраница());
		ИначеЕсли ЭлементРазыменования.Тип = "СписокВыражений" Тогда
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			ТекущийТип = СтэкТипов.Удалить(СтэкТипов.ВГраница());  
			СтэкТипов.Удалить(СтэкТипов.ВГраница());
		ИначеЕсли ЭлементРазыменования.Тип = "ПоляВложеннойТаблицы" Тогда
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить поля
				ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
				СтэкТипов.Добавить(ТипЗначения);
				Возврат;
			Иначе
				ВызватьИсключение "Список полей не найден";
			КонецЕсли;	
		ИначеЕсли ЭлементРазыменования.Тип = "ПолеИсточника" Тогда 
			Источник = Контекст.ИсточникиПоИдентификаторам.Получить(ЭлементРазыменования.ИдентификаторИсточника);
			ТекущийТип = ТипПоляПоИмени(ЭлементРазыменования.ИмяПоля, Источник.Источник);	
			РассчитываемыеСвойства.ПоляИсточников.Вставить(
				Строка(ЭлементРазыменования.ИдентификаторИсточника) + "." + ВРег(ЭлементРазыменования.ИмяПоля), 
				ЭлементРазыменования.ИмяПоля);
		Иначе
			ВызватьИсключение "Недопустимый узел";	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТекущийТип = Неопределено Тогда
		// TODO ИСТОЧНИКИ оператора, или обойтись без генерации текста выражения
		ВызватьИсключение "Поле " + ГенерацияТекстовЗапросов.ВыражениеВСтроку(Выражение, , Новый Массив()) + " не найдено";	
	КонецЕсли;
	
	СтэкТипов.Добавить(ТекущийТип);
КонецПроцедуры

Процедура ПриведениеТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Приведение типа при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
Процедура ПриведениеТипаПриВыходе(Выражение) Экспорт	
	ТипВыражения = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	ЦелевойТип = ТипВыражения = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	СтэкТипов.Добавить(ЦелевойТип);
КонецПроцедуры

Процедура ТипСсылочногоПоляПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ТипСсылочногоПоляПриВыходе(Выражение) Экспорт
	ТипЗначения = ТипСсылочногоПоля(Выражение);
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОписаниеТипаБулевоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОписаниеТипаБулевоПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОписаниеТипаДатаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОписаниеТипаДатаПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Дата");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОписаниеТипаЧислоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОписаниеТипаЧислоПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Число");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОписаниеТипаСтрокаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Ложь;
КонецПроцедуры

Процедура ОписаниеТипаСтрокаПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Строка");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ВыборПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ВыборПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура КонстантаПриВходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура КонстантаПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ПараметрЗапросаПриВходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ПараметрЗапросаПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияЧастьПериодаЧисломПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияЧастьПериодаЧисломПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияДатаВремяПриВходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияДатаВремяПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияIsNullПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияIsNullПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияПредставлениеПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияПредставлениеПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияЗначениеПриВходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияЗначениеПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияТипПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияТипПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияРазностьДатПриВходе(Узел, ВыполнятьСтандартныйОбход) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ФункцияРазностьДатПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВыходе(Узел) Экспорт
	// Пустая реализация
КонецПроцедуры

#КонецОбласти

Функция ОбработатьОбращениеКПолюИсточника(ЭлементыРазыменования)
	ПервыйЭлементРазыменования = ЭлементыРазыменования[0]; 

	Если ТипЗнч(ПервыйЭлементРазыменования) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;	

	ПолеИсточникаЗапроса = ЭлементыМоделиЗапроса.НовыйПолеИсточника();

	Источник = Контекст.ИспользуемыеТаблицы.Получить(ВРег(ПервыйЭлементРазыменования));
	Если Источник = Неопределено Или Не Контекст.ДоступныПсевдонимыИсточников Тогда
		Результат = НайтиПолеВоВсехИсточниках(ПервыйЭлементРазыменования);
		Если Результат.Поле = Неопределено Тогда
			ВызватьИсключение "Таблица " + ПервыйЭлементРазыменования + " не найдена";   
		КонецЕсли;  

		ПолеИсточникаЗапроса.ИдентификаторИсточника = Результат.Источник.ИдентификаторИсточника;
		ПолеИсточникаЗапроса.ИмяПоля = Результат.Поле.Имя;

		ТипЗначения = Результат.Поле.ТипЗначения;
	Иначе	  
		Если ЭлементыРазыменования.Количество() = 1  Тогда
			ВызватьИсключение "Поле " + ПервыйЭлементРазыменования + " не найдено";		 
		КонецЕсли;	
		
		ПолеИсточникаЗапроса.ИдентификаторИсточника = Источник.ИдентификаторИсточника;	  
		ПолеИсточникаЗапроса.ИмяПоля = ЭлементыРазыменования[1];
		
		ТипЗначения = ТипПоляПоИмени(ЭлементыРазыменования[1], Источник.Источник);	
		ЭлементыРазыменования.Удалить(0);
	КонецЕсли; 
	
	РассчитываемыеСвойства.ПоляИсточников.Вставить(
		Строка(ПолеИсточникаЗапроса.ИдентификаторИсточника) + "." + ВРег(ПолеИсточникаЗапроса.ИмяПоля), 
		ПолеИсточникаЗапроса.ИмяПоля);
	
	ЭлементыРазыменования[0] = ПолеИсточникаЗапроса;
	
	СтэкТипов.Добавить(Результат.Поле.ТипЗначения);
	Возврат Истина;
КонецФункции	

Функция НайтиПолеВоВсехИсточниках(ИмяПоля) 
	РезультатПоиска = Новый Структура("Поле, Источник");
	
	Поле = Неопределено;     
	Источник = Неопределено;
	Для Каждого КлючЗначение Из Контекст.ИспользуемыеТаблицы Цикл	
		ТекущееПоле = НайтиПолеВИсточнике(ИмяПоля, КлючЗначение.Значение.Источник);	 
		Источник = КлючЗначение.Значение; 
		Если Поле <> Неопределено
			И ТекущееПоле <> Неопределено Тогда
			
			ВызватьИсключение "Не однозначное имя поля " + ИмяПоля;     
		ИначеЕсли ТекущееПоле <> Неопределено Тогда
			Поле = ТекущееПоле;	 
			НайденныйИсточника = Источник;
		КонецЕсли;	
	КонецЦикла;	
	
	РезультатПоиска.Поле = Поле;  
	РезультатПоиска.Источник = НайденныйИсточника;
	
	Возврат РезультатПоиска;
КонецФункции

Функция НайтиПолеВИсточнике(ИмяПоля, Источник) 
	Поле = Новый Структура("Имя, ТипЗначения", ИмяПоля);
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		Колонка = Источник.ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		Если Колонка <> Неопределено Тогда
			Поле.ТипЗначения = Колонка.ТипЗначения;
			Возврат Поле;	 
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		ОписаниеВТ = Источник.ОписаниеВТ;
		Если ОписаниеВТ <> Неопределено Тогда
			
			ТипЗначения = ОписаниеВТ.Колонки.Получить(ВРег(ИмяПоля));
			Если ТипЗначения = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ТипЗначения;
				Возврат Поле;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	  
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда 
		//	TODO
		//	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениNf,kbws(Источник.ИмяТаблицы);
		ОписаниеПредставления = Неопределено;
		Если ОписаниеПредставления <> Неопределено Тогда
			ОписаниеПоля = ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля));
			Если ОписаниеПоля = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ОписаниеПоля.ТипЗначения; 
				Возврат Поле;
			КонецЕсли;	
		Иначе		
			ДоступнаяТаблица = Контекст.ДоступныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
			Если ДоступнаяТаблица <> Неопределено Тогда
				ДоступноеПоле = ДоступнаяТаблица.Поля.Найти(ИмяПоля);
				Если ДоступноеПоле <> Неопределено Тогда
					Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
						Поле.ТипЗначения = ДоступноеПоле;  
						Возврат Поле;
					ИначеЕсли ДоступноеПоле <> Неопределено Тогда
						Поле.ТипЗначения =  ДоступноеПоле.ТипЗначения;   
						Возврат Поле;
					КонецЕсли;	
				Иначе
					Возврат Неопределено; 
				КонецЕсли; 
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		// TODO поиск в представлениях
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

Функция ТипЭлементаРазыменованияИзОписанияТипов(ЭлементРазыменования, ТекущийТип, ДоступныеТаблицыИБ)
	НовыйТип = Неопределено;
	Для Каждого Тип Из ТекущийТип.Типы() Цикл  
		Если Тип = МодельЗапросаТипы.ПроизвольныйТип() Тогда
			Если НовыйТип = Неопределено Тогда
				НовыйТип = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
			Иначе
				ДобавляемыеТипы = Новый Массив;
				ДобавляемыеТипы.Добавить(МодельЗапросаТипы.ПроизвольныйТип());
				
				НовыйТип = Новый ОписаниеТипов(НовыйТип, ДобавляемыеТипы);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;	
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);  
		Если МетаданныеТипа <> Неопределено Тогда
			ТаблицаИБ = ДоступныеТаблицыИБ.Найти(МетаданныеТипа.ПолноеИмя());
			Если ТаблицаИБ <> Неопределено Тогда
				Поле = ТаблицаИБ.Поля.Найти(ЭлементРазыменования);
				Если Поле <> Неопределено Тогда
					Если НовыйТип = Неопределено Тогда
						НовыйТип = Поле.ТипЗначения;
					Иначе
						НовыйТип = Новый ОписаниеТипов(НовыйТип, Поле.ТипЗначения.Типы());
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если НовыйТип = Неопределено Тогда
		ВызватьИсключение "Поле не найдено " + ЭлементРазыменования;   
	КонецЕсли;
	
	Возврат НовыйТип;
КонецФункции

Функция ТипПоляПоИмени(ИмяПоля, Источник)
	Поле = НайтиПолеВИсточнике(ИмяПоля, Источник);
	Если Поле <> Неопределено Тогда
		Возврат Поле.ТипЗначения;
	КонецЕсли;
	
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	 
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		Если Контекст.ЗаполнятьОписаниеВременныхТаблиц
			И Источник.ОписаниеВТ.ИндексЗапросаСоздания = -1 Тогда
			ТипПоля = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
			МодельЗапросаУтилиты.ДобавитьПолеВОписаниеВТ(Источник.ОписаниеВТ, ИмяПоля, ТипПоля);
			
			Возврат ТипПоля;
		Иначе
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;	  
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда
		ДоступнаяТаблица = Контекст.ДоступныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
		Если ДоступнаяТаблица <> Неопределено Тогда
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено"; 
		Иначе
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;
	ИначеЕсли Источник.Тип = "ИсполняемоеПредставление" Тогда
		ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениТаблицы(Источник.ИмяТаблицы);
		Если ОписаниеПредставления = Неопределено 
			Или ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)) = Неопределено Тогда
			
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";
		КонецЕсли;
		
		Возврат ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)).ТипЗначения;	
	Иначе
		ВызватьИсключение "Не известный тип источника";
	КонецЕсли;	
КонецФункции	

Функция ТипИзОписанияТипаЗапроса(ОписаниеТипаЗапроса)
	Если ОписаниеТипаЗапроса.Тип = "ОписаниеТипаБулево" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаДата" Тогда
		Возврат Новый ОписаниеТипов("Дата"); 	 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаЧисло" Тогда
		Возврат Новый ОписаниеТипов("Число"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаСтрока" Тогда
		Возврат Новый ОписаниеТипов("Строка"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ТипСсылочногоПоля" Тогда
		Возврат ТипСсылочногоПоля(ОписаниеТипаЗапроса); 	
	Иначе
		ВызватьИсключение "Не известный тип";
	КонецЕсли;	
КонецФункции	

Функция ТипСсылочногоПоля(ТипСсылочногоПоля) 
	Имя = ТипСсылочногоПоля.Группа + "." + ТипСсылочногоПоля.Таблица;
	МетаданныеТипа = Метаданные.НайтиПоПолномуИмени(Имя); 
	Если МетаданныеТипа = Неопределено Тогда
		ВызватьИсключение  "Таблица " + Имя + " не найдена";
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка." + ТипСсылочногоПоля.Таблица); 
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланОбменаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("БизнесПроцессСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ЗадачаСсылка." + ТипСсылочногоПоля.Таблица);	
	Иначе
		ВызватьИсключение "Некорректный тип " + Имя; 
	КонецЕсли;		
КонецФункции	


#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли