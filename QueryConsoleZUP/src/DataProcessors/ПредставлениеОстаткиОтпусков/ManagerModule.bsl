
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Функция Описание() Экспорт
	Описание = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления();
	Описание.ДоступноВМеханизмеПредставленийСКД = Ложь;
	Описание.ПоддерживаетсяУказаниеИмяВТРезультат = Истина;
	Описание.ПоддерживаетсяПолучениеРезультатаЗапроса = Ложь;
	Описание.ПоддерживаютсяИндексы = Истина;
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Сотрудник";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "ВидОтпуска";
	Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков");
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "РабочийГодДатаНачала";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата");
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "РабочийГодДатаОкончания";
	Поле.ТипЗначения = Новый ОписаниеТипов("Дата");
	Описание.Поля.Добавить(Поле);
	
	Поле = ЭлементыМоделиОписанияПредставлений.НовыйПолеПредставления();
	Поле.Имя = "Дни";
	Поле.ТипЗначения = Новый ОписаниеТипов("Число");
	Описание.Поля.Добавить(Поле);
	
	Параметр = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Параметр.Имя = "ДатаОстатков";
	Параметр.Обязательный = Истина;
	Параметр.ТипКонстанты = Новый ОписаниеТипов("Дата");
	Параметр.ДопустимПараметрЗапроса = Истина;
	Описание.ОписаниеПараметров.Добавить(Параметр);
	
	Параметр = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Параметр.Имя = "Сотрудники";
	Параметр.Обязательный = Истина;
	Параметр.ТипКонстанты = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Параметр.ДопустимПараметрЗапроса = Истина;
	Описание.ОписаниеПараметров.Добавить(Параметр);
	
	Параметр = ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПараметраКонстанта();
	Параметр.Имя = "ВидыОтпусков";
	Параметр.Обязательный = Ложь;
	Параметр.ТипКонстанты = Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков");
	Параметр.ДопустимПараметрЗапроса = Истина;
	Описание.ОписаниеПараметров.Добавить(Параметр);
	
	Возврат Описание;	
КонецФункции

Функция Справка() Экспорт
	Справка = ЭлементыМоделиОписанияПредставлений.НовыйСправка();	
	Справка.Имя = ИмяПредставления();
	Справка.Описание = "Обеспечивает доступ к методу ""ОстаткиОтпусков.ОстаткиОтпусков"".
	|Позволяет получить информацию об остатке отпусков по сотрудникам на указанную дату.";
	
	Возврат Справка;
КонецФункции

Функция ИмяПредставления() Экспорт
	Возврат "ОстаткиОтпусков";
КонецФункции

// Исполнить.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  Запрос - Запрос
// 
// Возвращаемое значение:
// 	Произвольный 
Функция Исполнить(ПараметрыВыполнения, Запрос) Экспорт
	СписокСотрудников = ИсполнительПредставленийУтилиты.ЗначениеПараметраКонстанты("Сотрудники", ПараметрыВыполнения, Запрос.Параметры);
	ВидыОтпусков = ИсполнительПредставленийУтилиты.ЗначениеПараметраКонстанты("ВидыОтпусков", ПараметрыВыполнения, Запрос.Параметры);
	ДатаОстатков = ИсполнительПредставленийУтилиты.ЗначениеПараметраКонстанты("ДатаОстатков", ПараметрыВыполнения, Запрос.Параметры);
	
	ПараметрыПолученияДанных = ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыПолученияДанных.Сотрудники = СписокСотрудников;
	ПараметрыПолученияДанных.ДатаОстатков = ДатаОстатков;
	ПараметрыПолученияДанных.ВидыОтпусков = ВидыОтпусков;
		
	ТаблицаОстатков = ОстаткиОтпусков.ОстаткиОтпусков(ПараметрыПолученияДанных);
	
	ЗапросОстатков = Новый Запрос();
	ЗапросОстатков.УстановитьПараметр("ОстаткиОтпусков", ТаблицаОстатков);	
	ЗапросОстатков.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросОстатков.Текст = ТекстРезультирующегоЗапроса(
		ПараметрыВыполнения, 
		ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ИмяПредставления()));
	ЗапросОстатков.Выполнить();
		
	Возврат Неопределено;
КонецФункции

Функция ИсполняемыйКод(ПараметрыВыполнения, ТекущиеТабуляции) Экспорт
	Утилиты = ГенерацияИсполняемогоКодаПредставленийУтилиты;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	Строка = "ПараметрыПолученияДанных = ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	УстанавливаемыеПараметры = Новый Структура();
	УстанавливаемыеПараметры.Вставить("Сотрудники", "ПараметрыПолученияДанных.Сотрудники");
	УстанавливаемыеПараметры.Вставить("ДатаОстатков", "ПараметрыПолученияДанных.ДатаОстатков");
	УстанавливаемыеПараметры.Вставить("ВидыОтпусков", "ПараметрыПолученияДанных.ВидыОтпусков");
	
	Утилиты.КодПрисвоенияПараметровВТекстовыйДокумент(
		ТекстовыйДокумент, 
		ПараметрыВыполнения, 
		ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ИмяПредставления()), 
		УстанавливаемыеПараметры, 
		ТекущиеТабуляции);
		
	ТекстовыйДокумент.ДобавитьСтроку("");
		
	Строка = "ТаблицаОстатков = ОстаткиОтпусков.ОстаткиОтпусков(ПараметрыПолученияДанных);";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	ТекстЗапроса = ТекстРезультирующегоЗапроса(
		ПараметрыВыполнения, 
		ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ИмяПредставления()));
	
	Строка = "ЗапросОстатков = Новый Запрос();
	|	ЗапросОстатков.УстановитьПараметр(""ОстаткиОтпусков"", ТаблицаОстатков);	
	|	ЗапросОстатков.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, ТекущиеТабуляции);	
	
	Строка = "ЗапросОстатков.Текст = ";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	ТекстЗапроса = Утилиты.ПримитивноеЗначениеВСтроку(ТекстЗапроса) + ";";
	Утилиты.ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, ТекстЗапроса, ТекущиеТабуляции);
	
	Строка = "ЗапросОстатков.Выполнить();";
	ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

// Текст запроса для СКД.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
// 
// Возвращаемое значение:
//  - Строка
Функция ТекстЗапросаДляСКД(ПараметрыВыполнения) Экспорт
	Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
	
	Модель = ГенерацияИсполняемогоКодаПредставленийУтилиты.МодельЗапросаДляСКД(ПараметрыВыполнения, Описание);
	Построитель = МодельЗапросаУтилиты.СоздатьПостроительМодели(Модель);
	
	Запрос = Построитель.ПолучитьМодель().Элементы[0];
	ТекстЗапроса = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(Запрос);
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстРезультирующегоЗапроса(ПараметрыВыполнения, ОписаниеПредставления)	
	СхемаЗапроса = Новый СхемаЗапроса();
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];

	ИсточникТЗ  = Оператор.Источники.Добавить(
		Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), 
		"&ОстаткиОтпусков", 
		"ОстаткиОтпусков");
		
	Для Каждого Поле Из ОписаниеПредставления.Поля Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИсточникТЗ.Источник.ДоступныеПоля.Добавить(Поле.Имя);
		Оператор.ВыбираемыеПоля.Добавить("ОстаткиОтпусков." + Поле.Имя);	
	КонецЦикла;
	
	ЗапросСхемы.ТаблицаДляПомещения = ПараметрыВыполнения.ИмяВТРезультат;
	Для Каждого Индекс Из ПараметрыВыполнения.Индексы Цикл
		ЗапросСхемы.Индекс.Добавить(Индекс);
	КонецЦикла;
	
	Возврат ЗапросСхемы.ПолучитьТекстЗапроса();
КонецФункции

#КонецОбласти

#КонецЕсли
