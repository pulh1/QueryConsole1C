#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Контекст;
Перем СтэкТипов;
Перем РассчитываемыеСвойства;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьКонтекст(УстанавливаемыйКонтекст) Экспорт
	Контекст = УстанавливаемыйКонтекст;
	СтэкТипов = Новый Массив();	
КонецПроцедуры

Процедура УстановитьРассчитываемыеСвойства(УстанавливаемыеСвойства) Экспорт
	РассчитываемыеСвойства = УстанавливаемыеСвойства;
КонецПроцедуры

Процедура ЗавершитьОбходВыражения() Экспорт
	Если СтэкТипов.Количество() <> 1 Тогда
		ВызватьИсключение "Не консистентное состояние стэка типов";
	КонецЕсли;
	
	РассчитываемыеСвойства.ТипЗначения = ИзвлечьЭлементИзСтэка();
КонецПроцедуры

// Этот метод является частью "контракта" для обработки вложенных запросов.
// Он должен быть реализован в тех посетителях, которые могут встретить вложенный запрос.
// 
// Параметры:
//  УзелЗапроса - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура ПосетитьВложенныйЗапрос(УзелЗапроса) Экспорт
	ВложенныйКонтекст = ОбработкаМоделиЗапроса.КонтекстОбработкиВложенногоЗапроса(Контекст, Истина);
	ОбработкаМоделиЗапроса.ОбработатьЗапрос(УзелЗапроса, ВложенныйКонтекст, РассчитываемыеСвойства);
	
	ТипЗначения = Новый ОписаниеТипов("СписокЗначений");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура БинарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура БинарнаяОперацияПриВыходе(Выражение) Экспорт
	ТипПравойЧасти = ИзвлечьЭлементИзСтэка();
	ТипЛевойЧасти = ИзвлечьЭлементИзСтэка();
	
	УстановитьТипПараметраЗапроса(Выражение.ЛеваяЧасть, ТипПравойЧасти);
	УстановитьТипПараметраЗапроса(Выражение.ПраваяЧасть, ТипЛевойЧасти);
		
	Если Выражение.Операция = "+" Тогда
		// TODO проверить типы, разрешена строка и число	
		ТипЗначения = ТипЛевойЧасти;
	ИначеЕсли Выражение.Операция = "-" 
		Или Выражение.Операция = "/"
		Или Выражение.Операция = "*" Тогда
		
		ТипЗначения = Новый ОписаниеТипов("Число"); 
	ИначеЕсли Выражение.Операция = "=" 
		Или Выражение.Операция = "<>"  
		Или Выражение.Операция = ">"   
		Или Выражение.Операция = "<"
		Или Выражение.Операция = ">="
		Или Выражение.Операция = "<=" Тогда 
		// TODO проверить типы левой и правой части
		ТипЗначения = Новый ОписаниеТипов("Булево");
	Иначе			
		Если Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипЛевойЧасти)
			Или Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипПравойЧасти) Тогда
				
			ВызватьИсключение "Не корректный тип условия";
		КонецЕсли;
		ТипЗначения = Новый ОписаниеТипов("Булево"); 
	КонецЕсли;	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорМеждуПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор между при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорМежду
Процедура ОператорМеждуПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ИзвлечьЭлементИзСтэка();
	ТипОперанда = ИзвлечьЭлементИзСтэка();
	
	УстановитьТипПараметраЗапроса(Выражение.НачалоИнтервала, ТипОперанда);
	УстановитьТипПараметраЗапроса(Выражение.КонецИнтервала, ТипОперанда);
	
	//TODO проверить тип Операнд и НачалоИнтервала И  КонецИнтервала
	ТипЗначения = Новый ОписаниеТипов("Булево");
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПроверкиТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки типа при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиТипа
Процедура ОператорПроверкиТипаПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПроверкиНаNULLПриВходе(УзВыражениеел, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорПроверкиНаNULLПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура СписокВыраженийПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура СписокВыраженийПриВыходе(Выражение) Экспорт
	Если Выражение.Элементы.Количество() = 1 Тогда
		ТипЗначения = ИзвлечьЭлементИзСтэка();
	Иначе	
		Для Индекс = 0 По Выражение.Элементы.ВГраница() Цикл
			ТипЗначения = ИзвлечьЭлементИзСтэка();
		КонецЦикла;		
		ТипЗначения =  Новый ОписаниеТипов("СписокЗначений");
	КонецЕсли;	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорВПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорВПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ТипОперанда = ИзвлечьЭлементИзСтэка();
	
	Если Выражение.Список.Тип = "СписокВыражений" Тогда
		ПараметрСписокЗначений = Выражение.Список.Элементы.Количество() = 1;
		Для Каждого ЭлементСписка Из Выражение.Список.Элементы Цикл
			УстановитьТипПараметраЗапроса(ЭлементСписка, ТипОперанда, ПараметрСписокЗначений);
		КонецЦикла;
	КонецЕсли;
		
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ЛогическоеОтрицаниеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ЛогическоеОтрицаниеПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ТипЗначения = Новый ОписаниеТипов("Булево");
	УстановитьТипПараметраЗапроса(Выражение.Выражение, ТипЗначения);
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура УнарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура УнарнаяОперацияПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();;
	ТипЗначения = Новый ОписаниеТипов("Число");
	УстановитьТипПараметраЗапроса(Выражение.Выражение, ТипЗначения);
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ОператорПодобноПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ОператорПодобноПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ИзвлечьЭлементИзСтэка();
	
	УстановитьТипПараметраЗапроса(Выражение.Операнд, Новый ОписаниеТипов("Строка"));
	УстановитьТипПараметраЗапроса(Выражение.Шаблон, Новый ОписаниеТипов("Строка"));
	
	ТипЗначения = Новый ОписаниеТипов("Булево");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура РазыменованиеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Ложь;
КонецПроцедуры

Процедура РазыменованиеПриВыходе(Выражение) Экспорт
	ТекущийТип = Неопределено;
	
	СемантическийАнализВыраженийУтилиты.ОбработатьОбращениеКПолюИсточника(Выражение.Элементы, Контекст);
	
	Для Индекс = 0 По Выражение.Элементы.ВГраница() Цикл  
		ЭлементРазыменования = Выражение.Элементы[Индекс];
		Если ЭлементРазыменования = "*" Тогда 
			// TODO как то отработать эту ситуацию   
			ВызватьИсключение "Выражение ИмяТаблицы.* пока не поддерживается";
		ИначеЕсли ТипЗнч(ЭлементРазыменования) = Тип("Строка") Тогда
			Если ТекущийТип = Неопределено Тогда
				ВызватьИсключение "Поле не найдено " + ЭлементРазыменования; 
			КонецЕсли;	  
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить что в табличной части есть нужные поля
				ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
				СтэкТипов.Добавить(ТипЗначения);
				Возврат;
			Иначе	
				ТекущийТип = СемантическийАнализВыраженийУтилиты.ТипЭлементаРазыменованияИзОписанияТипов(
					ЭлементРазыменования, 
					ТекущийТип, 
					Контекст.ДоступныеТаблицыИБ);		
			КонецЕсли;				
		ИначеЕсли ЭлементРазыменования.Тип = "ПриведениеТипа" Тогда
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			ТекущийТип = ИзвлечьЭлементИзСтэка(); 
		ИначеЕсли ЭлементРазыменования.Тип = "СписокВыражений" Тогда
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			ТекущийТип = ИзвлечьЭлементИзСтэка();  
		ИначеЕсли ЭлементРазыменования.Тип = "ПоляВложеннойТаблицы" Тогда
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить поля
				ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
				СтэкТипов.Добавить(ТипЗначения);
				Возврат;
			Иначе
				ВызватьИсключение "Список полей не найден";
			КонецЕсли;	
		ИначеЕсли ЭлементРазыменования.Тип = "ПолеИсточника" Тогда 
			Источник = Контекст.ИсточникиПоИдентификаторам.Получить(ЭлементРазыменования.ИдентификаторИсточника);
			ТекущийТип = СемантическийАнализВыраженийУтилиты.ТипПоляПоИмени(ЭлементРазыменования.ИмяПоля, Источник.Источник, Контекст);	
			РассчитываемыеСвойства.ПоляИсточников.Вставить(
				Строка(ЭлементРазыменования.ИдентификаторИсточника) + "." + ВРег(ЭлементРазыменования.ИмяПоля), 
				ЭлементРазыменования.ИмяПоля);
			
			Если Контекст.ИдентификаторыИсточниковВнешнегоЗапроса.Получить(ЭлементРазыменования.ИдентификаторИсточника) <> Неопределено Тогда
				РассчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = Истина;
			КонецЕсли;			
		Иначе
			ВызватьИсключение "Недопустимый узел";	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТекущийТип = Неопределено Тогда
		// TODO ИСТОЧНИКИ оператора, или обойтись без генерации текста выражения
		ВызватьИсключение "Поле " + ГенерацияТекстовЗапросов.ВыражениеВСтроку(Выражение, , Новый Массив()) + " не найдено";	
	КонецЕсли;
	
	СтэкТипов.Добавить(ТекущийТип);
КонецПроцедуры

Процедура ПриведениеТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Приведение типа при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
Процедура ПриведениеТипаПриВыходе(Выражение) Экспорт	
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = СемантическийАнализВыраженийУтилиты.ТипИзОписанияТипаЗапроса(Выражение.ОписаниеТипа);
	Если ТипЗначения = Неопределено Тогда
		ВызватьИсключение "Таблица " + Выражение.ОписаниеТипа.Группа + "." + Выражение.ОписаниеТипа.Таблица + " не найдена.";
	КонецЕсли;
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ВыборПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выбор при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыбор
Процедура ВыборПриВыходе(Выражение) Экспорт
	ИтоговыйТип = Неопределено;
	
	Если Выражение.Иначе <> Неопределено Тогда
		ИтоговыйТип = ИзвлечьЭлементИзСтэка();
	КонецЕсли;	
	
	Для Индекс = 0 По Выражение.АльтернативыВыбора.ВГраница() Цикл
		ТекущийТип = ИзвлечьЭлементИзСтэка();
		// так же извелекем тип выражения условия
		ИзвлечьЭлементИзСтэка();
		Если ИтоговыйТип = Неопределено Тогда
			ИтоговыйТип = ТекущийТип;
		Иначе	
			ИтоговыйТип = Новый ОписаниеТипов(ТекущийТип, ИтоговыйТип.Типы());
		КонецЕсли;	
	КонецЦикла;
	
	СтэкТипов.Добавить(ИтоговыйТип);
КонецПроцедуры

Процедура КонстантаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура КонстантаПриВыходе(Выражение) Экспорт
	Типы = Новый Массив;
	Типы.Добавить(ТипЗнч(Выражение.Значение));
	ТипЗначения = Новый ОписаниеТипов(Типы);
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ПараметрЗапросаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ПараметрЗапросаПриВыходе(Выражение) Экспорт
	ТипЗначения = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
	
	Если РассчитываемыеСвойства.ПараметрыЗапроса.Получить(ВРег(Выражение.Имя)) = Неопределено Тогда
		ОписаниеПараметра = ЭлементыМоделиЗапроса.НовыйОписаниеПараметраЗапроса();	
		ОписаниеПараметра.Имя = Выражение.Имя;
		РассчитываемыеСвойства.ПараметрыЗапроса.Вставить(ВРег(Выражение.Имя), ОписаниеПараметра);
	КонецЕсли;
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВыходе(Выражение) Экспорт
	ТипАргумента = ИзвлечьЭлементИзСтэка();
	
	РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
	
	Если Выражение.ИмяФункции <> "МИНИМУМ"
		И Выражение.ИмяФункции <> "МАКСИМУМ" Тогда
		ТипЗначения = Новый ОписаниеТипов("Число");
	Иначе
		ТипЗначения = ТипАргумента;	
	КонецЕсли;
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	
	РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
	ТипЗначения = Новый ОписаниеТипов("Число");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияЧастьПериодаЧисломПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция часть периода числом при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
Процедура ФункцияЧастьПериодаЧисломПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Аргумент, Новый ОписаниеТипов("Дата"));
	ТипЗначения = Новый ОписаниеТипов("Число");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	УстановитьТипПараметраЗапроса(Выражение.Дата, Новый ОписаниеТипов("Дата"));
	
	ТипЗначения = Новый ОписаниеТипов("Дата");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	УстановитьТипПараметраЗапроса(Выражение.Дата, Новый ОписаниеТипов("Дата"));
	
	ТипЗначения = Новый ОписаниеТипов("Дата");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ИзвлечьЭлементИзСтэка();
	
	УстановитьТипПараметраЗапроса(Выражение.Дата, Новый ОписаниеТипов("Дата"));
	УстановитьТипПараметраЗапроса(Выражение.Сдвиг, Новый ОписаниеТипов("Число"));
	
	ТипЗначения = Новый ОписаниеТипов("Дата");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияДатаВремяПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияДатаВремяПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Дата");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияIsNullПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияIsNullПриВыходе(Выражение) Экспорт
	ТипПервогоАргумента = ИзвлечьЭлементИзСтэка();
	ТипВторогоАргумента = ИзвлечьЭлементИзСтэка();
		
	ТипЗначения = Новый ОписаниеТипов(ТипПервогоАргумента, ТипВторогоАргумента.Типы());
	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияПредставлениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияПредставлениеПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = Новый ОписаниеТипов("Строка");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = Новый ОписаниеТипов("Строка");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВыходе(Выражение) Экспорт	
	ИзвлечьЭлементИзСтэка();
	
	ТипЗначения = Новый ОписаниеТипов("Тип");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияЗначениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияЗначениеПриВыходе(Выражение) Экспорт
	Если Выражение.ЧастиПути.Количество() = 2 Тогда
		// TODO проверять обращения к системны перечислениям, пока вернем заглущку
		ТипЗначения = Новый ОписаниеТипов("ВидДвиженияНакопления"); 
	Иначе
		ОписаниеСсылочногоПоля = ЭлементыМоделиЗапроса.НовыйТипСсылочногоПоля();
		ОписаниеСсылочногоПоля.Группа = Выражение.ЧастиПути[0];  
		ОписаниеСсылочногоПоля.Таблица = Выражение.ЧастиПути[1];   
		
		ТипЗначения = СемантическийАнализВыраженийУтилиты.ТипСссылкиПоОписанию(ОписаниеСсылочногоПоля);
		Если ТипЗначения = Неопределено Тогда
			ВызватьИсключение "Таблица " + ОписаниеСсылочногоПоля.Группа + "." + ОписаниеСсылочногоПоля.Таблица + " не найдена.";
		КонецЕсли;
		
		Если ВРег(Выражение.ЧастиПути[2]) <> "ПУСТАЯССЫЛКА" Тогда
			// TODO проверить наличие предопределенного элемента
		КонецЕсли;		
	КонецЕсли;	
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияТипПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;	
КонецПроцедуры

Процедура ФункцияТипПриВыходе(Выражение) Экспорт
	ТипЗначения = Новый ОписаниеТипов("Тип");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ФункцияРазностьДатПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияРазностьДатПриВыходе(Выражение) Экспорт
	ИзвлечьЭлементИзСтэка();
	ИзвлечьЭлементИзСтэка();
	
	УстановитьТипПараметраЗапроса(Выражение.Дата1, Новый ОписаниеТипов("Дата"));
	УстановитьТипПараметраЗапроса(Выражение.Дата2, Новый ОписаниеТипов("Дата"));
		
	ТипЗначения = Новый ОписаниеТипов("Число");
	СтэкТипов.Добавить(ТипЗначения);
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВыходе(Выражение) Экспорт
	// Пустая реализация
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьЭлементИзСтэка()
	Элемент = СтэкТипов[СтэкТипов.ВГраница()];
	СтэкТипов.Удалить(СтэкТипов.ВГраница());
	
	Возврат Элемент;
КонецФункции

Процедура УстановитьТипПараметраЗапроса(Выражение, ТипЗначения, ЭтоСписокЗначений = Ложь)
	Если ТипЗначения = Неопределено 
		Или Не Выражение.Тип = "ПараметрЗапроса" Тогда	
		
		Возврат;
	КонецЕсли;
	ОписаниеПараметра = РассчитываемыеСвойства.ПараметрыЗапроса.Получить(ВРег(Выражение.Имя));
	ОписаниеПараметра.ТипЗначения = ТипЗначения;
	ОписаниеПараметра.ЭтоСписокЗначений = ЭтоСписокЗначений;
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли