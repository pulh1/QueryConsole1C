Перем ИсходнаяСтрока;
Перем НомерТекущегоСимвола;
Перем ОбрабатываемыйСимвол;
Перем СимволБуфера;
Перем ТаблицаСлов;

Перем НомерТекущейСтроки;
Перем НомерСтрокиНачало;

Перем Цифры;
Перем НачальныеСимволыИдентификаторов;
Перем ДопустимыеСимволыИдентификаторов;
Перем МассивСимволовИдентификаторов;
Перем МассивСимволовЦифр;

Перем КлючевыеСлова;
Перем Лексемы;
Перем КлючевыеСловаОпределяемыеСкобкой;

Перем ВремяПолученияИдентификатора Экспорт;
Перем ВремяУстановкиСимволов Экспорт;

#Region Инициализация

Функция Инициализировать() Экспорт 
	ЗаполнитьКлючевыеСлова();
	ЗаполнитьКлючевыеСловаОпределяемыеСкобкой();
	ЗаполнитьЛексемы();
КонецФункции	

Процедура УстановитьОбрабатываемыйТекст(Текст) Экспорт
	ИсходнаяСтрока = Текст;
	НомерТекущегоСимвола = 0;
	НомерТекущейСтроки = 1;
	
	СимволБуфера = Сред(ИсходнаяСтрока, 1, 1);
	
	УстановитьОбрабатываемыйСимвол();
КонецПроцедуры	

Процедура ЗаполнитьКлючевыеСлова()
	КлючевыеСлова = Новый Соответствие;

	КлючевыеСлова.Вставить("ID_СРешеткой", Истина);
	КлючевыеСлова.Вставить("ID", Истина);
	КлючевыеСлова.Вставить("ТИП", Истина);
	КлючевыеСлова.Вставить("ЗНАЧЕНИЕ", Истина);
	КлючевыеСлова.Вставить("ДАТАВРЕМЯ", Истина);
	КлючевыеСлова.Вставить("ПРЕДСТАВЛЕНИЕССЫЛКИ", Истина);
	КлючевыеСлова.Вставить("ПРЕДСТАВЛЕНИЕ", Истина);
	КлючевыеСлова.Вставить("ЕСТЬNULL", Истина);
	КлючевыеСлова.Вставить("РАЗНОСТЬДАТ", Истина);
	КлючевыеСлова.Вставить("ДОБАВИТЬКДАТЕ", Истина);
	КлючевыеСлова.Вставить("КОНЕЦПЕРИОДА", Истина);
	КлючевыеСлова.Вставить("НАЧАЛОПЕРИОДА", Истина);
	КлючевыеСлова.Вставить("ДЕНЬНЕДЕЛИ", Истина);
	КлючевыеСлова.Вставить("КОЛИЧЕСТВО", Истина);
	КлючевыеСлова.Вставить("ТИПЗНАЧЕНИЯ", Истина);
	КлючевыеСлова.Вставить("ИНАЧЕ", Истина);
	КлючевыеСлова.Вставить("ТОГДА", Истина);
	КлючевыеСлова.Вставить("ВЫБОР", Истина);
	КлючевыеСлова.Вставить("КВАРТАЛ", Истина);
	КлючевыеСлова.Вставить("ДАТА", Истина);
	КлючевыеСлова.Вставить("БУЛЕВО", Истина);
	КлючевыеСлова.Вставить("ВЫРАЗИТЬ", Истина);
	КлючевыеСлова.Вставить("НЕ", Истина);
	КлючевыеСлова.Вставить("NULL", Истина);
	КлючевыеСлова.Вставить("ЕСТЬ", Истина);
	КлючевыеСлова.Вставить("СУММА", Истина);
	КлючевыеСлова.Вставить("ССЫЛКА", Истина);
	КлючевыеСлова.Вставить("МЕЖДУ", Истина);
	КлючевыеСлова.Вставить("И", Истина);
	КлючевыеСлова.Вставить("ИЛИ", Истина);
	КлючевыеСлова.Вставить("ПОЛУГОДИЕ", Истина);
	КлючевыеСлова.Вставить("ДЕНЬ", Истина);
	КлючевыеСлова.Вставить("ЧАС", Истина);
	КлючевыеСлова.Вставить("МИНУТА", Истина);
	КлючевыеСлова.Вставить("В", Истина);
	КлючевыеСлова.Вставить("ТОЛЬКО", Истина);
	КлючевыеСлова.Вставить("ПЕРИОДАМИ", Истина);
	КлючевыеСлова.Вставить("ОБЩИЕ", Истина);
	КлючевыеСлова.Вставить("ВОЗР", Истина);
	КлючевыеСлова.Вставить("ИЕРАРХИЯ", Истина);
	КлючевыеСлова.Вставить("ИМЕЮЩИЕ", Истина);
	КлючевыеСлова.Вставить("ДЕКАДА", Истина);
	КлючевыеСлова.Вставить("ПОДСТРОКА", Истина);
	КлючевыеСлова.Вставить("СГРУППИРОВАТЬ", Истина);
	КлючевыеСлова.Вставить("МИНИМУМ", Истина);
	КлючевыеСлова.Вставить("ПОЛНОЕ", Истина);
	КлючевыеСлова.Вставить("КОГДА", Истина);
	КлючевыеСлова.Вставить("ВНУТРЕННЕЕ", Истина);
	КлючевыеСлова.Вставить("ИСТИНА", Истина);
	КлючевыеСлова.Вставить("ИТОГИ", Истина);
	КлючевыеСлова.Вставить("ЛЕВОЕ", Истина);
	КлючевыеСлова.Вставить("НЕДЕЛЯ", Истина);
	КлючевыеСлова.Вставить("НЕОПРЕДЕЛЕНО", Истина);
	КлючевыеСлова.Вставить("УБЫВ", Истина);
	КлючевыеСлова.Вставить("ИЗ", Истина);
	КлючевыеСлова.Вставить("КАК", Истина);
	КлючевыеСлова.Вставить("ПОДОБНО", Истина);
	КлючевыеСлова.Вставить("ПРАВОЕ", Истина);
	КлючевыеСлова.Вставить("СОЕДИНЕНИЕ", Истина);
	КлючевыеСлова.Вставить("РАЗЛИЧНЫЕ", Истина);
	КлючевыеСлова.Вставить("УПОРЯДОЧИТЬ", Истина);
	КлючевыеСлова.Вставить("ПЕРВЫЕ", Истина);
	КлючевыеСлова.Вставить("ВЫБРАТЬ", Истина);
	КлючевыеСлова.Вставить("СЕКУНДА", Истина);
	КлючевыеСлова.Вставить("ВСЕ", Истина);
	КлючевыеСлова.Вставить("КОНЕЦ", Истина);
	КлючевыеСлова.Вставить("ИНДЕКСИРОВАТЬ", Истина);
	КлючевыеСлова.Вставить("РАЗРЕШЕННЫЕ", Истина);
	КлючевыеСлова.Вставить("ИЕРАРХИИ", Истина);
	КлючевыеСлова.Вставить("МЕСЯЦ", Истина);
	КлючевыеСлова.Вставить("ГДЕ", Истина);
	КлючевыеСлова.Вставить("ЧИСЛО", Истина);
	КлючевыеСлова.Вставить("ОБЪЕДИНИТЬ", Истина);
	КлючевыеСлова.Вставить("ПО", Истина);
	КлючевыеСлова.Вставить("МАКСИМУМ", Истина);
	КлючевыеСлова.Вставить("АВТОУПОРЯДОЧИВАНИЕ", Истина);
	КлючевыеСлова.Вставить("СТРОКА", Истина);
	КлючевыеСлова.Вставить("ДЕНЬГОДА", Истина);
	КлючевыеСлова.Вставить("ПОМЕСТИТЬ", Истина);
	КлючевыеСлова.Вставить("СРЕДНЕЕ", Истина);
	КлючевыеСлова.Вставить("ГОД", Истина);
	КлючевыеСлова.Вставить("ЛОЖЬ", Истина);
	КлючевыеСлова.Вставить("УНИЧТОЖИТЬ", Истина);
КонецПроцедуры

Процедура ЗаполнитьКлючевыеСловаОпределяемыеСкобкой()
	КлючевыеСловаОпределяемыеСкобкой = Новый Соответствие;

	КлючевыеСловаОпределяемыеСкобкой.Вставить("ВЫРАЗИТЬ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ПОДСТРОКА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("СУММА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("КВАРТАЛ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("МИНУТА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ДЕНЬГОДА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ПРЕДСТАВЛЕНИЕ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("СЕКУНДА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ДЕНЬНЕДЕЛИ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("МЕСЯЦ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ДОБАВИТЬКДАТЕ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ТИПЗНАЧЕНИЯ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ДЕНЬ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ГОД", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("НАЧАЛОПЕРИОДА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ЧАС", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("МИНИМУМ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("СРЕДНЕЕ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ЕСТЬNULL", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ПРЕДСТАВЛЕНИЕССЫЛКИ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("КОНЕЦПЕРИОДА", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("НЕДЕЛЯ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("КОЛИЧЕСТВО", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("МАКСИМУМ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ЗНАЧЕНИЕ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ТИП", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("РАЗНОСТЬДАТ", Истина);
	КлючевыеСловаОпределяемыеСкобкой.Вставить("ДАТАВРЕМЯ", Истина);
КонецПроцедуры

Процедура ЗаполнитьЛексемы()
	Лексемы = Новый Соответствие;

	Лексемы.Вставить(".", Истина);
	Лексемы.Вставить("/", Истина);
	Лексемы.Вставить("<=", Истина);
	Лексемы.Вставить("<>", Истина);
	Лексемы.Вставить("{", Истина);
	Лексемы.Вставить(">=", Истина);
	Лексемы.Вставить("}", Истина);
	Лексемы.Вставить("<", Истина);
	Лексемы.Вставить("%", Истина);
	Лексемы.Вставить("=", Истина);
	Лексемы.Вставить("&", Истина);
	Лексемы.Вставить(">", Истина);
	Лексемы.Вставить("(", Истина);
	Лексемы.Вставить(")", Истина);
	Лексемы.Вставить("*", Истина);
	Лексемы.Вставить("+", Истина);
	Лексемы.Вставить(",", Истина);
	Лексемы.Вставить("-", Истина);
	Лексемы.Вставить(";", Истина);
КонецПроцедуры

#EndRegion

#Region СистемаТипов

Функция КлассыТокенов()
	КлассыТокенов = Новый Структура;
	
	КлассыТокенов.Вставить("СтроковаяКонстанта", "СтроковаяКонстанта");
	КлассыТокенов.Вставить("ЧисловаяКонстанта", "ЧисловаяКонстанта");
	КлассыТокенов.Вставить("Слово", "Слово");
	КлассыТокенов.Вставить("Лексема", "Лексема");
	КлассыТокенов.Вставить("Идентификатор", "ID");
	КлассыТокенов.Вставить("ИдентификаторСРешеткой", "ID_СРешеткой");
	
	Возврат КлассыТокенов;	
КонецФункции

Функция ТипыТокенов() Экспорт
	ТипыТокенов = Новый Структура;
	
	// Арифметические операции
	Операции = ТипыТокеновОперации();
	Для Каждого КлючЗначение Из Операции Цикл
		ТипыТокенов.Вставить(НРег(КлючЗначение.Ключ), КлючЗначение.Значение);
	КонецЦикла;	
	
	КлючевыеСлова = ТипыТокеновКлючевыеСлова();
	Для Каждого КлючЗначение Из КлючевыеСлова Цикл
		ТипыТокенов.Вставить(НРег(КлючЗначение.Ключ), КлючЗначение.Значение);
	КонецЦикла;	
		
	// Ключевые слова
		
	ТипыТокенов.Вставить("Идентификатор", "Идентификатор");
	ТипыТокенов.Вставить("ЧисловаяКонстанта", "ЧисловаяКонстанта");
	ТипыТокенов.Вставить("СтроковаяКонстанта", "СтроковаяКонстанта");
	
	Возврат ТипыТокенов;
КонецФункции	

Функция ТипыТокеновОперации()
	ТипыТокеновОперации = Новый Структура;
	
	// Арифметические операции
	ТипыТокеновОперации.Вставить("Плюс", "+");
	ТипыТокеновОперации.Вставить("Минус", "-");
	ТипыТокеновОперации.Вставить("Умножить", "*");
	ТипыТокеновОперации.Вставить("Разделить", "/");
	ТипыТокеновОперации.Вставить("Равно", "=");
	ТипыТокеновОперации.Вставить("Больше", ">");
	ТипыТокеновОперации.Вставить("БольшеИлиРавно", ">=");
	ТипыТокеновОперации.Вставить("Меньше", "<");
	ТипыТокеновОперации.Вставить("МеньшеИлиРавно", "<=");
	ТипыТокеновОперации.Вставить("НеРавно", "<>");
		
	ТипыТокеновОперации.Вставить("Параметр", "&");
	
	// скобки и т.п.
	ТипыТокеновОперации.Вставить("ЛеваяСкобка", "(");
	ТипыТокеновОперации.Вставить("ПраваяСкобка", ")");
	ТипыТокеновОперации.Вставить("ЛеваяФигурнаяСкобка", "{");
	ТипыТокеновОперации.Вставить("ПраваяФигурнаяСкобка", "}");
	
	ТипыТокеновОперации.Вставить("Точка", ".");
	ТипыТокеновОперации.Вставить("Запятая", ",");
	ТипыТокеновОперации.Вставить("Звезда", "*");
	ТипыТокеновОперации.Вставить("Разделитель", ";");
	
	Возврат ТипыТокеновОперации;
КонецФункции	

Функция ТипыТокеновКлючевыеСлова()
	ТипыТокеновКлючевыеСлова = Новый Структура;
	
	ТипыТокеновКлючевыеСлова.Вставить("Истина", "ИСТИНА");
	ТипыТокеновКлючевыеСлова.Вставить("ЛОЖЬ", "ЛОЖЬ");
	
	ТипыТокеновКлючевыеСлова.Вставить("ВЫБОР", "ВЫБОР");
	ТипыТокеновКлючевыеСлова.Вставить("КОГДА", "КОГДА");
	ТипыТокеновКлючевыеСлова.Вставить("ТОГДА", "ТОГДА");
	ТипыТокеновКлючевыеСлова.Вставить("ИНАЧЕ", "ИНАЧЕ");
	
	ТипыТокеновКлючевыеСлова.Вставить("ВЫБРАТЬ", "ВЫБРАТЬ");
	ТипыТокеновКлючевыеСлова.Вставить("ПЕРВЫЕ", "ПЕРВЫЕ");
	ТипыТокеновКлючевыеСлова.Вставить("Различные", "Различные");
	ТипыТокеновКлючевыеСлова.Вставить("Разрешенные", "Разрешенные");
	
	ТипыТокеновКлючевыеСлова.Вставить("Из", "Из");
	ТипыТокеновКлючевыеСлова.Вставить("По", "По");
	
	ТипыТокеновКлючевыеСлова.Вставить("Как", "Как");
	
	ТипыТокеновКлючевыеСлова.Вставить("Сгруппировать", "Сгруппировать");
	ТипыТокеновКлючевыеСлова.Вставить("ГДЕ", "ГДЕ");
	ТипыТокеновКлючевыеСлова.Вставить("СОЕДИНЕНИЕ", "СОЕДИНЕНИЕ");
	ТипыТокеновКлючевыеСлова.Вставить("Левое", "Левое");
	ТипыТокеновКлючевыеСлова.Вставить("Правое", "Правое");
	ТипыТокеновКлючевыеСлова.Вставить("ВНУТРЕННЕЕ", "ВНУТРЕННЕЕ");
	
	ТипыТокеновКлючевыеСлова.Вставить("Итоги", "Итоги");
	
	ТипыТокеновКлючевыеСлова.Вставить("Выразить", "Выразить");
	
	ТипыТокеновКлючевыеСлова.Вставить("ССЫЛКА", "ССЫЛКА");
	
	ТипыТокеновКлючевыеСлова.Вставить("Количество", "Количество");
	
	ТипыТокеновКлючевыеСлова.Вставить("МЕЖДУ", "МЕЖДУ");
	ТипыТокеновКлючевыеСлова.Вставить("ЕСТЬ", "ЕСТЬ");
	ТипыТокеновКлючевыеСлова.Вставить("NULL", "NULL");
	ТипыТокеновКлючевыеСлова.Вставить("Неопределено", "Неопределено");
	ТипыТокеновКлючевыеСлова.Вставить("Тип", "Тип");
	ТипыТокеновКлючевыеСлова.Вставить("ИЕРАРХИИ", "ИЕРАРХИИ");
	ТипыТокеновКлючевыеСлова.Вставить("ПОДОБНО", "ПОДОБНО");
	ТипыТокеновКлючевыеСлова.Вставить("НЕ", "НЕ");
	ТипыТокеновКлючевыеСлова.Вставить("В", "В");
	
	Возврат ТипыТокеновКлючевыеСлова;
КонецФункции	

Функция Токен()
	Токен = Новый Структура("Класс, Тип, Лексема, НомерСтроки, НомерСимвола");
	Токен.НомерСтроки = НомерСтрокиНачало;    
	Токен.НомерСимвола = НомерТекущегоСимвола; 
	
	Возврат Токен;
КонецФункции

Функция ТокенЛексема(Лексема)
	Токен = Токен();
	Токен.Класс = КлассыТокенов().Лексема;
	Токен.Тип = Лексема;
	Токен.Лексема = Лексема;
	
	Возврат Токен;
КонецФункции

Функция ТокенСтроковаяКонстанта(Значение)
	ТокенКонстанта = Токен();	
	ТокенКонстанта.Класс = КлассыТокенов().СтроковаяКонстанта;
	ТокенКонстанта.Тип = КлассыТокенов().СтроковаяКонстанта;
	ТокенКонстанта.Лексема = КлассыТокенов().СтроковаяКонстанта;
	ТокенКонстанта.Вставить("Значение", Значение);
	
	Возврат ТокенКонстанта;
КонецФункции

Функция ТокенЧисловаяКонстанта(Значение)
	ТокенКонстанта = Токен();	
	ТокенКонстанта.Класс = КлассыТокенов().ЧисловаяКонстанта;
	ТокенКонстанта.Тип = КлассыТокенов().ЧисловаяКонстанта;
	ТокенКонстанта.Лексема = КлассыТокенов().ЧисловаяКонстанта;
	ТокенКонстанта.Вставить("Значение", Значение);
	
	Возврат ТокенКонстанта;
КонецФункции

Функция ТокенСлово(Лексема)
	ТокенСлово = Токен();	
	ТокенСлово.Класс = КлассыТокенов().Слово;	
	Если КлючевыеСлова[ВРег(Лексема)] = Истина Тогда
		ТокенСлово.Тип = ВРег(Лексема);
	Иначе
		ТокенСлово.Тип = КлассыТокенов().Идентификатор;
	КонецЕсли;	
	
	ТокенСлово.Лексема = Лексема;
	
	Возврат ТокенСлово;
КонецФункции	

Функция ТокенИдентификаторСРешеткой(Лексема)
	ТокенСлово = Токен();	
	ТокенСлово.Класс = КлассыТокенов().Слово;
	ТокенСлово.Тип = КлассыТокенов().ИдентификаторСРешеткой;
	ТокенСлово.Лексема = Лексема;
	
	Возврат ТокенСлово;
КонецФункции	

#EndRegion

#Region РазборВходящейСтроки

Функция МассивКодовСимволов(СтрокаСимволов)
	МаксимальныйКодСимвола = МаксимальныйКодСимволаСтроки(СтрокаСимволов);
	
	МассивКодов = Новый Массив(МаксимальныйКодСимволаСтроки(СтрокаСимволов) + 1);
	
	Для Сч = 0 По МаксимальныйКодСимвола Цикл
		МассивКодов[Сч] = Ложь;		
	КонецЦикла;	
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(Сред(СтрокаСимволов, Сч, 1));
		
		МассивКодов[КодСимвола] = Истина;
	КонецЦикла;	
	
	Возврат МассивКодов;
	
КонецФункции

Функция МаксимальныйКодСимволаСтроки(СтрокаСимволов)
	Максимум = 0;
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		КодСимвола = КодСимвола(Сред(СтрокаСимволов, Сч, 1));
		
		Если КодСимвола > Максимум Тогда
			Максимум = КодСимвола;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Максимум;
КонецФункции	

Процедура УстановитьОбрабатываемыйСимвол()	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	НомерТекущегоСимвола = НомерТекущегоСимвола + 1;
	ОбрабатываемыйСимвол = СимволБуфера;
	
	Если ОбрабатываемыйСимвол = Символы.ПС Тогда
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЕсли;	
	
	СимволБуфера = Сред(ИсходнаяСтрока, НомерТекущегоСимвола + 1, 1); 
	
	ВремяУстановкиСимволов = ВремяУстановкиСимволов + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
КонецПроцедуры	

Функция ЭтоКонстанта()
	Возврат ЭтоНачалаЧисла()
		Или ЭтоНачалоЛитерала();
КонецФункции	

Функция КонстантаИзСтроки()
	Константа = Новый Структура("Тип, Значение");
	
	Если ЭтоНачалаЧисла() Тогда
		Константа.Тип = Тип("Число");
		Константа.Значение = ЧислоИзСтроки();
	ИначеЕсли ЭтоНачалоЛитерала() Тогда
		Константа.Тип = Тип("Строка");
		Константа.Значение = ЛитералИзСтроки();
	Иначе
		ВызватьИсключение "Ожидается либо число, либо строка";
	КонецЕсли;	
	
	Возврат Константа;	
КонецФункции	

Функция ЭтоНачалаЧисла()
	Если ЭтоЦифра(ОбрабатываемыйСимвол) Тогда
		Возврат Истина;
	ИначеЕсли ОбрабатываемыйСимвол = "." 
		И ЭтоЦифра(СимволБуфера) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ЭтоЦифра(Символ)
	Если Символ = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодСимвола = КодСимвола(Символ);
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ЧислоИзСтроки()
	ЦелаяЧасть = ЦелаяЧастьЧислаИзСтроки();	
	
	Если ОбрабатываемыйСимвол = "." Тогда
		УстановитьОбрабатываемыйСимвол();
		ДробнаяЧасть = ДробнаяЧастьЧислаИзСтроки();
	Иначе
		ДробнаяЧасть = 0;
	КонецЕсли;
	
	Возврат ЦелаяЧасть + ДробнаяЧасть;
		
КонецФункции	

Функция ЦелаяЧастьЧислаИзСтроки()
	ЦелаяЧасть = 0;
	Множитель = 1;
	
	Если ОбрабатываемыйСимвол = "." Тогда
		Возврат 0;
	КонецЕсли;	
	
	Пока ЭтоЦифра(ОбрабатываемыйСимвол) Цикл
		ЦелаяЧасть = ЦелаяЧасть * 10 + Число(ОбрабатываемыйСимвол);
			
		УстановитьОбрабатываемыйСимвол();	
	КонецЦикла;	
	
	Возврат ЦелаяЧасть;
КонецФункции	

Функция ДробнаяЧастьЧислаИзСтроки()
	ДробнаяЧасть = 0;
	Множитель = 0.1;
	
	Пока ЭтоЦифра(ОбрабатываемыйСимвол) Цикл
		ДробнаяЧасть = ДробнаяЧасть + Число(ОбрабатываемыйСимвол) * Множитель;
		
		Множитель = Множитель * 0.1;
		
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;	
	
	Возврат ДробнаяЧасть;
КонецФункции	

Функция ЭтоНачалоИдентификатора() 
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоНачалоИдентификатора = СтрНайти(НачальныеСимволыИдентификаторов, НРег(ОбрабатываемыйСимвол)) > 0;
	
	ВремяПолученияИдентификатора = ВремяПолученияИдентификатора + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	
	Возврат ЭтоНачалоИдентификатора;

КонецФункции

Функция ЭтоНачалоИдентификатораСРешеткой() 
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоНачалоИдентификатораСРешеткой = 
		ОбрабатываемыйСимвол = "#" 
		И СимволБуфера <> "" 
		И СтрНайти(ДопустимыеСимволыИдентификаторов, НРег(СимволБуфера)) > 0;	
	
	ВремяПолученияИдентификатора = ВремяПолученияИдентификатора + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	
	Возврат ЭтоНачалоИдентификатораСРешеткой;

КонецФункции

Функция ИдентификаторСРешеткойИзСтроки()
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	НомерСимволаНачала = НомерТекущегоСимвола;
	КоличествоСимволов = 1;
	
	УстановитьОбрабатываемыйСимвол();	
	Если СтрНайти(ДопустимыеСимволыИдентификаторов, НРег(ОбрабатываемыйСимвол)) > 0 Тогда
		КоличествоСимволов = КоличествоСимволов + 1;
		УстановитьОбрабатываемыйСимвол();
	Иначе
		ВызватьИсключение "Некорректный идентификатор с #";
	КонецЕсли;	
	
	Пока СтрНайти(ДопустимыеСимволыИдентификаторов, НРег(ОбрабатываемыйСимвол)) > 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		
		УстановитьОбрабатываемыйСимвол();
		
		Если ОбрабатываемыйСимвол = "" Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
		
	Рез = Сред(ИсходнаяСтрока, НомерСимволаНачала, КоличествоСимволов);
	
	ВремяПолученияИдентификатора = ВремяПолученияИдентификатора + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	
	Возврат Рез; 
КонецФункции

Функция ИдентификаторИзСтроки()
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	НомерСимволаНачала = НомерТекущегоСимвола;
	КоличествоСимволов = 1;
	
	УстановитьОбрабатываемыйСимвол();
	
	Пока СтрНайти(ДопустимыеСимволыИдентификаторов, НРег(ОбрабатываемыйСимвол)) > 0 Цикл
		КоличествоСимволов = КоличествоСимволов + 1;
		
		УстановитьОбрабатываемыйСимвол();
		
		Если ОбрабатываемыйСимвол = "" Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
		
	Рез = Сред(ИсходнаяСтрока, НомерСимволаНачала, КоличествоСимволов);
	
	ВремяПолученияИдентификатора = ВремяПолученияИдентификатора + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	
	Возврат Рез; 
КонецФункции

Функция ЭтоНачалоЛитерала()
	Возврат ОбрабатываемыйСимвол = """";	
КонецФункции	

Функция ЛитералИзСтроки()
	Литерал = "";
	УстановитьОбрабатываемыйСимвол();
	
	Пока Не (ОбрабатываемыйСимвол = """" И СимволБуфера <> """") Цикл
		Если ОбрабатываемыйСимвол = "" Тогда
			ВызватьИсключение "Ожидается закрывающая кавычка";
		КонецЕсли;	
		Если ОбрабатываемыйСимвол = """" И СимволБуфера = """" Тогда
			Литерал = Литерал + """";
			УстановитьОбрабатываемыйСимвол();
		Иначе	
			Литерал = Литерал + ОбрабатываемыйСимвол;
		КонецЕсли;	
		
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;	
	
	УстановитьОбрабатываемыйСимвол();
	
	Возврат Литерал;
КонецФункции

Функция ЭтоКомментарий()
	Возврат ЭтоКлассическийКомментарий()
		Или ЭтоКомментарийСи(); 
КонецФункции	

Функция ЭтоКлассическийКомментарий()
	Если ОбрабатываемыйСимвол = "/"
		И СимволБуфера = "/"  Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		                              	
КонецФункции

Функция ЭтоКомментарийСи()
	Если ОбрабатываемыйСимвол = "/"
		И СимволБуфера = "*" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		                              	
КонецФункции

Функция КомментарийИзСтроки()
	Если ЭтоКлассическийКомментарий() Тогда
		Возврат КлассическийКомментарийИзСтроки();
	ИначеЕсли ЭтоКомментарийСи() Тогда
		Возврат КомментарийСиИзСтроки();
	Иначе 
		Возврат "";	
	КонецЕсли;		
КонецФункции

Функция КлассическийКомментарийИзСтроки()
	Комментарий = "";
	
	УстановитьОбрабатываемыйСимвол();
	УстановитьОбрабатываемыйСимвол();
		
	Пока ОбрабатываемыйСимвол <> Символы.ПС И ОбрабатываемыйСимвол <> "" Цикл
		Комментарий = Комментарий + ОбрабатываемыйСимвол;
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	УстановитьОбрабатываемыйСимвол();
	
	Пока ЭтоНезначащийСимвол() Цикл
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	Если ЭтоКлассическийКомментарий() Тогда
		Комментарий = Комментарий + КлассическийКомментарийИзСтроки();
	Иначе
		Возврат Комментарий;
	КонецЕсли;	
	
КонецФункции

Функция КомментарийСиИзСтроки()
	Комментраий = "";
	
	УстановитьОбрабатываемыйСимвол();
	УстановитьОбрабатываемыйСимвол();
		
	Пока Не (ОбрабатываемыйСимвол = "*" И СимволБуфера = "\") Цикл
		Если ОбрабатываемыйСимвол = "" Тогда
			ВызватьИсключение "Нет завершения комментария";
		КонецЕсли;	
		
		Комментраий = Комментраий + ОбрабатываемыйСимвол;
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	Возврат Комментраий;
КонецФункции	

Функция ЛексемаИзСтроки()
	Лексема = Неопределено;
	
	Для Каждого КлючЗначение Из Лексемы Цикл
		Если СтрДлина(КлючЗначение.Ключ) = 2 И 
			Сред(КлючЗначение.Ключ, 1, 1) = ОбрабатываемыйСимвол
			И Сред(КлючЗначение.Ключ, 2, 1) = СимволБуфера Тогда 
			
			Лексема = КлючЗначение.Ключ;
			
			УстановитьОбрабатываемыйСимвол();
			УстановитьОбрабатываемыйСимвол();
						
			Прервать;
		КонецЕсли;	
			
	КонецЦикла;	
	
	Для Каждого КлючЗначение Из Лексемы Цикл
		Если СтрДлина(КлючЗначение.Ключ) = 1 
			И КлючЗначение.Ключ = ОбрабатываемыйСимвол Тогда
			
			Лексема = КлючЗначение.Ключ;
			
			УстановитьОбрабатываемыйСимвол();
					
			Прервать;
		КонецЕсли;	
			
	КонецЦикла;	
	
	Возврат Лексема;
КонецФункции	

Функция ЭтоНезначащийСимвол()
	Возврат ОбрабатываемыйСимвол = " "
		Или ОбрабатываемыйСимвол = Символы.Таб
		Или ОбрабатываемыйСимвол = Символы.НПП
		Или ОбрабатываемыйСимвол = Символы.ПС
		Или ОбрабатываемыйСимвол = Символы.ВК
		Или ОбрабатываемыйСимвол = Символы.ВТаб
		Или ОбрабатываемыйСимвол = Символы.ПФ;

КонецФункции	

#EndRegion

#Region РазборВходящейСтроки

Функция СледующийТокен() Экспорт
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Токен();
	КонецЕсли;	
	
	Пока ЭтоНезначащийСимвол() Цикл
		УстановитьОбрабатываемыйСимвол();
	КонецЦикла;
	
	Пока ЭтоКомментарий() Цикл
		КомментарийИзСтроки();
	КонецЦикла;	
	
	Если ОбрабатываемыйСимвол = "" Тогда
		Возврат Токен();
	КонецЕсли;	
	
	НомерСтрокиНачало = НомерТекущейСтроки;
	Если ЭтоНачалоИдентификатора() Тогда
		Идентификатор = ИдентификаторИзСтроки();
		Токен = ТокенСлово(Идентификатор);
	ИначеЕсли ЭтоНачалоИдентификатораСРешеткой() Тогда
		Идентификатор = ИдентификаторСРешеткойИзСтроки();
		Токен = ТокенИдентификаторСРешеткой(Идентификатор);
	ИначеЕсли ЭтоКонстанта() Тогда
		Коннстанта = КонстантаИзСтроки();
		
		Если Коннстанта.Тип = Тип("Число") Тогда
			Токен = ТокенЧисловаяКонстанта(Коннстанта.Значение);
		Иначе
			Токен = ТокенСтроковаяКонстанта(Коннстанта.Значение);
		КонецЕсли;	
	
	Иначе 
		Лексема = ЛексемаИзСтроки();
		
		Если Лексема = Неопределено Тогда
			ВызватьИсключение "Не удалось разобрать запрос";
		КонецЕсли;	
		
		Токен = ТокенЛексема(Лексема);
	КонецЕсли; 	
		
	Возврат Токен;	
КонецФункции	

#EndRegion

Функция ПолучитьТекстЗапроса() Экспорт
	ТекстЗапроса = "";
	
	ПредставлениеПредыдущегоТокена = "";
	Пока Истина Цикл
		Токен = СледующийТокен();
		
		Если Токен = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		ПредставлениеТокена = ПредставлениеТокена(Токен);
		
		Если ПредставлениеТокена = "." Или ПредставлениеТокена = "," Или ПредставлениеТокена = "&"
			Или ПредставлениеПредыдущегоТокена = "." Или ПредставлениеПредыдущегоТокена = "," Или ПредставлениеПредыдущегоТокена = "&" Тогда
			
			Разделитель = "";
		Иначе
			Разделитель = " ";
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + Разделитель + ПредставлениеТокена;
		
		ПредставлениеПредыдущегоТокена = ПредставлениеТокена; 
	КонецЦикла;	
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Возврат Схема.ПолучитьТекстЗапроса();
КонецФункции	

Функция ПредставлениеТокена(Токен)
	Если Токен.Класс = КлассыТокенов().Лексема Тогда
		Возврат Токен.Лексема;
	ИначеЕсли Токен.Класс = КлассыТокенов().Слово Тогда
		Возврат Токен.Лексема;
	ИначеЕсли Токен.Класс = КлассыТокенов().ЧисловаяКонстанта Тогда
		Возврат ПредставлениеТокенаКонстанта(Токен, Тип("Число"));
	ИначеЕсли Токен.Класс = КлассыТокенов().СтроковаяКонстанта Тогда
		Возврат ПредставлениеТокенаКонстанта(Токен, Тип("Строка"));	
	Иначе 
		ВызватьИсключение "Неизвестны класс токена";
	КонецЕсли;		
КонецФункции

Функция ПредставлениеТокенаКонстанта(Токен, ТипЗначения)
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат """" + Токен.Значение + """";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат Формат(Токен.Значение, "ЧН=0; ЧГ=");
	КонецЕсли;	
КонецФункции

Цифры = "0123456789";
НачальныеСимволыИдентификаторов = "_qwertyuiopasdfghjklzxcvbnmёйцукенгшщзхъфывапролджэячсмитьбю";
ДопустимыеСимволыИдентификаторов = НачальныеСимволыИдентификаторов + Цифры;

МассивСимволовИдентификаторов = МассивКодовСимволов(ДопустимыеСимволыИдентификаторов);
МассивСимволовЦифр = МассивКодовСимволов(Цифры);

ТипыТокенов = ТипыТокенов();
ТипыТокеновОперации = ТипыТокеновОперации();

ВремяПолученияИдентификатора = 0;

ВремяУстановкиСимволов = 0;
