#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеМодуля

Перем СтекРезультатов;         // Массив - Используется как стек для хранения результатов анализа подузлов.
Перем ОписаниеОтбора;          // см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеОтбора
Перем ИменаДоступныхПолей;     // Соответствие - Для быстрого поиска доступных для отбора полей.
Перем КартаРезультатовАнализа; // Соответствие - Ключ: Узел дерева, Значение: Результат анализа для этого узла.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область МетодыПосетителя

// Этот метод является частью "контракта" для обработки вложенных запросов.
// Он должен быть реализован в тех посетителях, которые могут встретить вложенный запрос.
Процедура ПосетитьВложенныйЗапрос(УзелЗапроса) Экспорт
	ЭтоДопустимыйЭлементОтбора = ОписаниеОтбора.ПоддерживаемыеОперации.ВложенныйЗапрос;
	ПоместитьРезультат(УзелЗапроса, ЭтоДопустимыйЭлементОтбора, "вложенный запрос");
КонецПроцедуры

// Бинарная операция при входе.
Процедура БинарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Бинарная операция при выходе.
Процедура БинарнаяОперацияПриВыходе(Выражение) Экспорт
	РезультатПравойЧасти = ИзвлечьРезультатИзСтека();
	РезультатЛевойЧасти = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = РезультатЛевойЧасти.МожноДелегировать И РезультатПравойЧасти.МожноДелегировать;
	
	Если МожноДелегировать Тогда
		Операция = Выражение.Операция;
		Если Операция = "И" Тогда
			МожноДелегировать = Истина; // "И" поддерживается всегда, если его части делегируемы.
		ИначеЕсли Операция = "ИЛИ" Тогда
			МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ИЛИ;
		ИначеЕсли Операция = "=" Или Операция = "<>" Или Операция = ">=" Или Операция = "<=" 
			Или Операция = "<" Или Операция = "<" Или Операция = ">" Тогда
			
			МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.Сравнение;
		ИначеЕсли Операция = "+" Или Операция = "-" Или Операция = "*" Или Операция = "\" Тогда
			МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;
		Иначе
			МожноДелегировать = Ложь; // Неизвестная бинарная операция.
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Операция);
КонецПроцедуры

// Оператор между при входе.
Процедура ОператорМеждуПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор между при выходе.
Процедура ОператорМеждуПриВыходе(Выражение) Экспорт
	МожноДелегироватьКонец = ИзвлечьРезультатИзСтека();
	МожноДелегироватьНачало = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.МЕЖДУ
		И МожноДелегироватьКонец
		И МожноДелегироватьНачало
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение.Операция, МожноДелегировать, "МЕЖДУ");
КонецПроцедуры

// Оператор проверки на NULL при входе.
Процедура ОператорПроверкиНаNULLПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки на NULL при выходе.
Процедура ОператорПроверкиНаNULLПриВыходе(Выражение) Экспорт
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	// Оператор IS NULL/IS NOT NULL является частным случаем сравнения.
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение, МожноДелегировать, "ЕСТЬ NULL");
КонецПроцедуры

// Список выражений при входе.
Процедура СписокВыраженийПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Список выражений при выходе.
Процедура СписокВыраженийПриВыходе(Выражение) Экспорт
	МожноДелегировать = Истина;
	
	Для Индекс = 0 По Выражение.Элементы.ВГраница() Цикл
		МожноДелегировать = МожноДелегировать И ИзвлечьРезультатИзСтека();
	КонецЦикла;

	Если Выражение.Элементы.Количество() > 1 Тогда
		МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.СписокПолей;
	КонецЕсли;	
	
	ПоместитьРезультат(Выражение, МожноДелегировать, "спсок выражений");
КонецПроцедуры

// Оператор В при входе.
Процедура ОператорВПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор В при выходе.
Процедура ОператорВПриВыходе(Выражение) Экспорт
	МожноДелегироватьСписок = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	// Для "В ИЕРАРХИИ" и обычного "В" могут быть разные флаги поддержки.
	Если Выражение.Иерархия Тогда
		МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ВИерархии;
		Операция = "В иеерархии";
	Иначе
		МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ВСписок;
		Операция = "В";
	КонецЕсли;
	
	МожноДелегировать = МожноДелегировать
		И МожноДелегироватьСписок
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение, МожноДелегировать, Операция);
КонецПроцедуры

// Логическое отрицание при входе.
Процедура ЛогическоеОтрицаниеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Логическое отрицание при выходе.
Процедура ЛогическоеОтрицаниеПриВыходе(Выражение) Экспорт
	// Условие с "НЕ" делегируемо, если вложенное условие делегируемо.
	МожноДелегироватьВыражение = ИзвлечьРезультатИзСтека();
	МожноДелегировать = МожноДелегироватьВыражение И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;
	ПоместитьРезультат(Выражение, МожноДелегировать, "НЕ");
КонецПроцедуры

// Унарная операция при входе.
Процедура УнарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Унарная операция при выходе.
Процедура УнарнаяОперацияПриВыходе(Выражение) Экспорт
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений 
		И МожноДелегироватьОперанд;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, "-");
КонецПроцедуры

// Оператор подобно при входе.
Процедура ОператорПодобноПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор подобно при выходе.
Процедура ОператорПодобноПриВыходе(Выражение) Экспорт
	МожноДелегироватьШаблон = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ПОДОБНО
		И МожноДелегироватьШаблон
		И МожноДелегироватьОперанд;

	ПоместитьРезультат(Выражение, МожноДелегировать, "ПОДОБНО");
КонецПроцедуры

// Разыменование при входе.
Процедура РазыменованиеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Ложь;
КонецПроцедуры

// Разыменование при выходе.
Процедура РазыменованиеПриВыходе(Выражение) Экспорт
	МожноДелегировать = Истина;
	Для Каждого ЭлементРазыменования Из Выражение.Элементы Цикл
		Если ЭлементРазыменования.Тип = "ПолеИсточника" Тогда
			// проверить что это тот источник отборы для когорого мы обрабаьываем и что поле в доступных для отбора полях
			МожноДелегировать = Истина;
		ИначеЕсли ТипЗнч(ЭлементРазыменования) = Тип("Строка") Тогда 
			// Это значит что у нас выражение типа "ДанныеСотрудников.Сотрудник.Код"
			МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.РазыменованиеПолей;
		Иначе
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			МожноДелегировать = МожноДелегировать И ИзвлечьРезультатИзСтека();
		КонецЕсли;	
	КонецЦикла;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, "разыменование");
КонецПроцедуры

// Выбор при входе.
Процедура ВыборПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выбор при выходе.
Процедура ВыборПриВыходе(Выражение) Экспорт
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;
	
	Если Выражение.Иначе <> Неопределено Тогда
		МожноДелегировать = ИзвлечьРезультатИзСтека()
	КонецЕсли;
	
	Для Индекс = 0 По Выражение.АльтернативыВыбора.ВГраница() Цикл
		МожноДелегироватьДействие = ИзвлечьРезультатИзСтека();
		МожноДелегироватьУсловие = ИзвлечьРезультатИзСтека();
		МожноДелегировать = МожноДелегировать И МожноДелегироватьДействие И МожноДелегироватьУсловие;
	КонецЦикла;//	
	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ВЫБОР");
КонецПроцедуры

// Константа при входе.
Процедура КонстантаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Константа при выходе.
Процедура КонстантаПриВыходе(Выражение) Экспорт
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;
	ПоместитьРезультат(Выражение, Истина, "Константа");
КонецПроцедуры

// Параметр запроса при входе.
Процедура ПараметрЗапросаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Параметр запроса при выходе.
Процедура ПараметрЗапросаПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, Истина, "параметр запроса");
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура АгрегатнаяФункцияПриВыходе(Выражение) Экспорт
	ИзвлечьРезультатИзСтека();
	
	// Агрегатные функции нельзя использовать в отборе исполняемых представлений	
	ПоместитьРезультат(Выражение, Ложь, "агрегатная функция");
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура АгрегатнаяФункцияКоличествоПриВыходе(Выражение) Экспорт
	ИзвлечьРезультатИзСтека();
	
	// Агрегатные функции нельзя использовать в отборе исполняемых представлений	
	ПоместитьРезультат(Выражение, Ложь, "агрегатная функция");
КонецПроцедуры

Процедура ФункцияЧастьПериодаЧисломПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция часть периода числом при выходе.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
Процедура ФункцияЧастьПериодаЧисломПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, Ложь, "агрегатная функция");
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияНачалоПериодаПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияНачалоПериода");
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияКонецПериодаПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияКонецПериода");
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияДобавитьКДатеПриВыходе(Выражение) Экспорт
	МожноДелегироватьСдвиг = ИзвлечьРезультатИзСтека();
	МожноДелегироватьДата = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьДата И МожноДелегироватьСдвиг И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияДобавитьКДате");
КонецПроцедуры

Процедура ФункцияДатаВремяПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияДатаВремяПриВыходе(Выражение) Экспорт
	МожноДелегировать = ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияДатаВремя");
КонецПроцедуры

Процедура ФункцияIsNullПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияIsNullПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент2 = ИзвлечьРезультатИзСтека();
	МожноДелегироватьАргумент1 = ИзвлечьРезультатИзСтека();
		
	МожноДелегировать = МожноДелегироватьАргумент1 И МожноДелегироватьАргумент2 И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияIsNull");
КонецПроцедуры

Процедура ФункцияПредставлениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияПредставлениеПриВыходе(Выражение) Экспорт
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияПредставление");
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияПредставлениеСсылкиПриВыходе(Выражение) Экспорт
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияПредставлениеСсылки");
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияТипЗначенияПриВыходе(Выражение) Экспорт	
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, МожноДелегировать, "ФункцияТипЗначения");
КонецПроцедуры

Процедура ФункцияЗначениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияЗначениеПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений, "ФункцияЗначение");
КонецПроцедуры

Процедура ФункцияТипПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;	
КонецПроцедуры

Процедура ФункцияТипПриВыходе(Выражение) Экспорт
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений, " ФункцияТип");
КонецПроцедуры

Процедура ФункцияРазностьДатПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ФункцияРазностьДатПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент2 = ИзвлечьРезультатИзСтека();
	МожноДелегироватьАргумент1 = ИзвлечьРезультатИзСтека();
		
	МожноДелегировать = МожноДелегироватьАргумент1 И МожноДелегироватьАргумент2 И ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений;	
	ПоместитьРезультат(Выражение, ОписаниеОтбора.ПоддерживаемыеОперации.ЯзыкВыражений, " ФункцияРазностьДат");
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

Процедура ВыражениеВсеПоляПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, Ложь, " ВыражениеВсе");
КонецПроцедуры

#КонецОбласти

Процедура ПоместитьРезультат(Выражение, ЭтоДопустимыйЭлементОтбора, Операция)
	СтекРезультатов.Добавить(ЭтоДопустимыйЭлементОтбора);
	
	КартаРезультатовАнализа.Вставить(Выражение, ЭтоДопустимыйЭлементОтбора);
КонецПроцедуры

Функция ИзвлечьРезультатИзСтека()
	Элемент = СтекРезультатов[СтекРезультатов.ВГраница()];
	СтекРезультатов.Удалить(СтекРезультатов.ВГраница());
	
	Возврат Элемент;
КонецФункции

Функция ВыделитьИМодифицироватьОтбор(Условие, КартаРезультатов) Экспорт
	
	Результат = Новый Структура("НовоеУсловие, ДелегируемыеУсловия");
	Результат.ДелегируемыеУсловия = Новый Массив;
	
	// Запускаем рекурсивный процесс, который вернет новое дерево
	// и одновременно наполнит массив ДелегируемыеУсловия.
	Результат.НовоеУсловие = МодифицироватьИСобрать(Условие, КартаРезультатов, Результат.ДелегируемыеУсловия);
	
	// Финальная очистка: если в итоге осталось только "ИСТИНА", значит, вся секция ГДЕ не нужна.
	Если Результат.НовоеУсловие <> Неопределено 
		И Результат.НовоеУсловие.Тип = "Константа" 
		И Результат.НовоеУсловие.Значение = Истина Тогда
		
		Результат.НовоеУсловие = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МодифицироватьИСобрать(Выражение, КартаРезультатов, СписокДелегируемыхУсловий)
	ЭтоОператорИ = (Выражение.Тип = "БинарнаяОперация" И Выражение.Операция = "И");
	
	Если ЭтоОператорИ Тогда
		НоваяЛеваяЧасть = МодифицироватьИСобрать(Выражение.ЛеваяЧасть, КартаРезультатов, СписокДелегируемыхУсловий);
		НоваяПраваяЧасть = МодифицироватьИСобрать(Выражение.ПраваяЧасть, КартаРезультатов, СписокДелегируемыхУсловий);
		
		// "Схлопываем" дерево, если одна из веток превратилась в ИСТИНА.
		// (ИСТИНА И X) = X
		// (X И ИСТИНА) = X
		ЛеваяЧастьИстина = (НоваяЛеваяЧасть.Тип = "Константа" И НоваяЛеваяЧасть.Значение = Истина);
		ПраваяЧастьИстина = (НоваяПраваяЧасть.Тип = "Константа" И НоваяПраваяЧасть.Значение = Истина);
		
		Если ЛеваяЧастьИстина И ПраваяЧастьИстина Тогда
			Возврат ЭлементыМоделиЗапроса.НовыйКонстанта(Истина);
		ИначеЕсли ЛеваяЧастьИстина Тогда
			Возврат НоваяПраваяЧасть;
		ИначеЕсли ПраваяЧастьИстина Тогда
			Возврат НоваяЛеваяЧасть;
		Иначе
			НовыйУзел = ЭлементыМоделиЗапроса.НовыйБинарнаяОперация();
			НовыйУзел.Операция = "И";
			НовыйУзел.ЛеваяЧасть = НоваяЛеваяЧасть;
			НовыйУзел.ПраваяЧасть = НоваяПраваяЧасть;
			Возврат НовыйУзел;
		КонецЕсли;
	Иначе
		РезультатАнализа = КартаРезультатов.Получить(Выражение);
		Если РезультатАнализа = Истина Тогда
			СписокДелегируемыхУсловий.Добавить(МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(Выражение));
			ВыражениеКонстанта = ЭлементыМоделиЗапроса.НовыйКонстанта();
			ВыражениеКонстанта.Значение = Истина;
			
			Возврат ВыражениеКонстанта;
		Иначе
			Возврат Выражение;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли