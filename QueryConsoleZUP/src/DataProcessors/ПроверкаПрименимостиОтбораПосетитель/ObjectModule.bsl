#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СтекРезультатов;         // Массив - Используется как стек для хранения результатов анализа подузлов.
Перем ОписаниеОтбора;          // см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеОтбора
Перем ИменаДоступныхПолей;     // Соответствие - Для быстрого поиска доступных для отбора полей.
Перем КартаРезультатовАнализа; // Соответствие - Ключ: Узел дерева, Значение: Результат анализа для этого узла.
Перем ИмяПредставления;
Перем ИдентификаторИсточникаПредставления;
Перем РежимВалидации;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьИдентификаторИсточникаПредставления(УстанавливаемыйИдентификатор) Экспорт
	ИдентификаторИсточникаПредставления = УстанавливаемыйИдентификатор;	
КонецПроцедуры

Процедура УстановитьИмяПредставления(УстанавливаемоеИмяПредставления) Экспорт
	ИмяПредставления = УстанавливаемоеИмяПредставления;	
КонецПроцедуры

// Установить описание отбора.
// 
// Параметры:
//  УстанавливаемоеОписание - см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеОтбора
Процедура УстановитьОписаниеОтбора(УстанавливаемоеОписание) Экспорт
	ОписаниеОтбора = УстанавливаемоеОписание;
	
	ИменаДоступныхПолей = Новый Соответствие();	
	Для Каждого Поле Из ОписаниеОтбора.ДоступныеПоля Цикл
		ИменаДоступныхПолей.Вставить(ВРег(Поле), Истина);
	КонецЦикла;	
КонецПроцедуры

Процедура УстановитьРежимВалидации() Экспорт
	РежимВалидации = Истина;
КонецПроцедуры

Функция МожноДелегироватьВесьОтбор() Экспорт
	ЗавершитьОбходВыражения();
	Результат = ИзвлечьЭлементИзСтека();
	Если Не Результат.МожноДелегировать Тогда
		Возврат Ложь;
	Иначе
		Если ЭтоВыражениеКонстанта(Результат.ТипУзла) Тогда
			Возврат ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВыделитьИМодифицироватьОтбор(Условие) Экспорт
	ЗавершитьОбходВыражения();
	РезультатПроверки = ИзвлечьЭлементИзСтека();
	
	Результат = Новый Структура("НовоеУсловие, ДелегируемыеУсловия");
	Результат.ДелегируемыеУсловия = Новый Массив;
	
	Если ЭтоВыражениеКонстанта(РезультатПроверки.ТипУзла)
		И Не ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений Тогда
			
		Результат.НовоеУсловие = Условие;
		Возврат Результат;
	КонецЕсли;	
	// Запускаем рекурсивный процесс, который вернет новое дерево
	// и одновременно наполнит массив ДелегируемыеУсловия.
	Результат.НовоеУсловие = МодифицироватьИСобрать(Условие, Результат.ДелегируемыеУсловия);
	
	// Финальная очистка: если в итоге осталось только "ИСТИНА", значит, вся секция ГДЕ не нужна.
	Если Результат.НовоеУсловие <> Неопределено 
		И Результат.НовоеУсловие.Тип = "Константа" 
		И Результат.НовоеУсловие.Значение = Истина Тогда
		
		Результат.НовоеУсловие = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область МетодыПосетителя

// Этот метод является частью "контракта" для обработки вложенных запросов.
// Он должен быть реализован в тех посетителях, которые могут встретить вложенный запрос.
//
// Параметры:
//  УзелЗапроса - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура ПосетитьВложенныйЗапрос(УзелЗапроса) Экспорт
	ЭтоДопустимыйЭлементОтбора = ОписаниеОтбора.ДополнительныеОперации.ВложенныйЗапрос
		И Не УзелЗапроса.ИспользуютсяИсточникиВнешнегоЗапроса;
	
	ПоместитьРезультат(УзелЗапроса, ЭтоДопустимыйЭлементОтбора, УзелЗапроса.Тип, "вложенный запрос");
КонецПроцедуры

// Бинарная операция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура БинарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Бинарная операция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
Процедура БинарнаяОперацияПриВыходе(Выражение) Экспорт
	РезультатПравойЧасти = ИзвлечьЭлементИзСтека();
	РезультатЛевойЧасти = ИзвлечьЭлементИзСтека();
	
	МожноДелегировать = РезультатПравойЧасти.МожноДелегировать И РезультатЛевойЧасти.МожноДелегировать;
	ПравыйЭлементКонстанта = ЭтоВыражениеКонстанта(РезультатПравойЧасти.ТипУзла);
	ЛевыйЭлементКонстанта = ЭтоВыражениеКонстанта(РезультатЛевойЧасти.ТипУзла);
	
	ОбеЧастиКонстанты = ПравыйЭлементКонстанта И ЛевыйЭлементКонстанта;
	ОбеЧастиНеКонстанты = Не ПравыйЭлементКонстанта И Не ЛевыйЭлементКонстанта;
		
	Если МожноДелегировать Тогда
		Операция = Выражение.Операция;
		Если Операция = "И" Тогда
			Если ОбеЧастиКонстанты Тогда
				МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
			Иначе
				МожноДелегировать = Истина; 
			КонецЕсли;
		ИначеЕсли Операция = "ИЛИ" Тогда
			МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ИЛИ;
			Если ОбеЧастиКонстанты Тогда
				МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;	
			КонецЕсли;
		ИначеЕсли Операция = "=" Или Операция = "<>" Или Операция = ">=" Или Операция = "<=" 
			Или Операция = "<" Или Операция = "<" Или Операция = ">" Тогда
			
			// Операции сравнения можно делегировать если можно делегировать и левую и правую части
			МожноДелегировать = Истина;
			Если ОбеЧастиКонстанты Тогда
				МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
			ИначеЕсли ОбеЧастиНеКонстанты Тогда 
				МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.СравнениеПолейИсточника;
			КонецЕсли;	
		ИначеЕсли Операция = "+" Или Операция = "-" Или Операция = "*" Или Операция = "\" Тогда
			МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
		Иначе
			МожноДелегировать = Ложь; // Неизвестная бинарная операция.
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, Выражение.Операция);
КонецПроцедуры

// Оператор между при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорМежду
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорМеждуПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор между при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорМежду
Процедура ОператорМеждуПриВыходе(Выражение) Экспорт
	МожноДелегироватьКонец = ИзвлечьРезультатИзСтека();
	МожноДелегироватьНачало = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.МЕЖДУ
		И МожноДелегироватьКонец
		И МожноДелегироватьНачало
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение.Операция, МожноДелегировать, Выражение.Тип, "МЕЖДУ");
КонецПроцедуры

// Оператор проверки типа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиТипа
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПроверкиТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки типа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиТипа
Процедура ОператорПроверкиТипаПриВыходе(Выражение) Экспорт
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ССЫЛКА");
КонецПроцедуры

// Оператор проверки на NULL при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиНаNULL
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПроверкиНаNULLПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор проверки на NULL при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПроверкиНаNULL
Процедура ОператорПроверкиНаNULLПриВыходе(Выражение) Экспорт
	ИзвлечьРезультатИзСтека();

	МожноДелегировать = Ложь;
		
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ЕСТЬ NULL");
КонецПроцедуры

// Список выражений при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйСписокВыражений
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура СписокВыраженийПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Список выражений при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйСписокВыражений
Процедура СписокВыраженийПриВыходе(Выражение) Экспорт
	МожноДелегировать = Истина;
	
	ТипУзлаЭлементаСписка = Неопределено;
	Для Индекс = 0 По Выражение.Элементы.ВГраница() Цикл
		Результат = ИзвлечьЭлементИзСтека();
		МожноДелегировать = МожноДелегировать И Результат.МожноДелегировать;
		ТипУзлаЭлементаСписка = Результат.ТипУзла;
	КонецЦикла;

	Если Выражение.Элементы.Количество() > 1 Тогда
		МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.СписокВыражений;
		ТипУзла = Выражение.Тип;
	Иначе
		ТипУзла = ТипУзлаЭлементаСписка;	
	КонецЕсли;		
	
	ПоместитьРезультат(Выражение, МожноДелегировать, ТипУзла, "список выражений");
КонецПроцедуры

// Оператор В при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорВ
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорВПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор В при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорВ
Процедура ОператорВПриВыходе(Выражение) Экспорт
	МожноДелегироватьСписок = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	
	Если Выражение.Иерархия Тогда
		Операция = "В иерархии";
	Иначе
		Операция = "В";
	КонецЕсли;
	
	// Оператор В можно делегировать в случае если можно делегировать и операнд и список
	МожноДелегировать = МожноДелегироватьСписок
		И МожноДелегироватьОперанд;
		
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, Операция);
КонецПроцедуры

// Логическое отрицание при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйЛогическоеОтрицание
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ЛогическоеОтрицаниеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Логическое отрицание при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйЛогическоеОтрицание
Процедура ЛогическоеОтрицаниеПриВыходе(Выражение) Экспорт
	// Условие с "НЕ" делегируемо, если вложенное условие делегируемо.
	МожноДелегироватьВыражение = ИзвлечьРезультатИзСтека();
	МожноДелегировать = МожноДелегироватьВыражение И ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "НЕ");
КонецПроцедуры

// Унарная операция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйУнарнаяОперация
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура УнарнаяОперацияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Унарная операция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйУнарнаяОперация
Процедура УнарнаяОперацияПриВыходе(Выражение) Экспорт
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений 
		И МожноДелегироватьОперанд;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "-");
КонецПроцедуры

// Оператор подобно при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПодобно
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ОператорПодобноПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Оператор подобно при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйОператорПодобно
Процедура ОператорПодобноПриВыходе(Выражение) Экспорт
	МожноДелегироватьШаблон = ИзвлечьРезультатИзСтека();
	МожноДелегироватьОперанд = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ПОДОБНО
		И МожноДелегироватьШаблон
		И МожноДелегироватьОперанд;

	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ПОДОБНО");
КонецПроцедуры

// Разыменование при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйРазыменование
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура РазыменованиеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Ложь;
КонецПроцедуры

// Разыменование при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйРазыменование
Процедура РазыменованиеПриВыходе(Выражение) Экспорт
	МожноДелегировать = Истина;
	Для Каждого ЭлементРазыменования Из Выражение.Элементы Цикл
		Если ТипЗнч(ЭлементРазыменования) = Тип("Строка") Тогда 
			// Это значит что у нас выражение типа "ДанныеСотрудников.Сотрудник.Код"
			МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.РазыменованиеПолей;
			Операция = "РазыменованиеПолей";
		ИначеЕсли ЭлементРазыменования.Тип = "ПолеИсточника" Тогда
			МожноДелегировать =  ЭлементРазыменования.ИдентификаторИсточника = ИдентификаторИсточникаПредставления
				И ИменаДоступныхПолей.Получить(ВРег(ЭлементРазыменования.ИмяПоля)) <> Неопределено;
				
			Операция = "Отбор по полю " + ЭлементРазыменования.ИмяПоля;
		Иначе
			ОбходМоделиЯзыкаВыражений.ОбойтиДерево(ЭлементРазыменования, ЭтотОбъект);
			МожноДелегировать = МожноДелегировать И ИзвлечьРезультатИзСтека();
			Операция = Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, Операция);
КонецПроцедуры

// Приведение типа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ПриведениеТипаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Приведение типа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПриведениеТипа
Процедура ПриведениеТипаПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов 
		И МожноДелегироватьАргумент;
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ВЫРАЗИТЬ");
КонецПроцедуры

// Выбор при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыбор
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ВыборПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выбор при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыбор
Процедура ВыборПриВыходе(Выражение) Экспорт
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ЯзыкВыражений;
	
	Если Выражение.Иначе <> Неопределено Тогда
		МожноДелегировать = ИзвлечьРезультатИзСтека()
	КонецЕсли;
	
	Для Индекс = 0 По Выражение.АльтернативыВыбора.ВГраница() Цикл
		МожноДелегироватьДействие = ИзвлечьРезультатИзСтека();
		МожноДелегироватьУсловие = ИзвлечьРезультатИзСтека();
		МожноДелегировать = МожноДелегировать И МожноДелегироватьДействие И МожноДелегироватьУсловие;
	КонецЦикла;//	
	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ВЫБОР");
КонецПроцедуры

// Константа при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйКонстанта
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура КонстантаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Константа при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйКонстанта
Процедура КонстантаПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, Истина, Выражение.Тип, "Константа");
КонецПроцедуры

// Параметр запроса при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПараметрЗапроса
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ПараметрЗапросаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Параметр запроса при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйПараметрЗапроса
Процедура ПараметрЗапросаПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, Истина, Выражение.Тип, "параметр запроса");
КонецПроцедуры

// Агрегатная функция при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункция
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура АгрегатнаяФункцияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Агрегатная функция при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункция
Процедура АгрегатнаяФункцияПриВыходе(Выражение) Экспорт
	ИзвлечьРезультатИзСтека();
	
	// Агрегатные функции нельзя использовать в отборе исполняемых представлений	
	ПоместитьРезультат(Выражение, Ложь, Выражение.Тип, "агрегатная функция");
КонецПроцедуры

// Агрегатная функция количество при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура АгрегатнаяФункцияКоличествоПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Агрегатная функция количество при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйАгрегатнаяФункцияКоличество
Процедура АгрегатнаяФункцияКоличествоПриВыходе(Выражение) Экспорт
	ИзвлечьРезультатИзСтека();
	
	// Агрегатные функции нельзя использовать в отборе исполняемых представлений	
	ПоместитьРезультат(Выражение, Ложь, Выражение.Тип, "агрегатная функция");
КонецПроцедуры

// Функция часть периода числом при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияЧастьПериодаЧисломПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция часть периода числом при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЧастьПериодаЧислом
Процедура ФункцияЧастьПериодаЧисломПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияЧастьПериодаЧислом");
КонецПроцедуры

// Функция начало периода при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияНачалоПериода
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияНачалоПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция начало периода при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияНачалоПериода
Процедура ФункцияНачалоПериодаПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияНачалоПериода");
КонецПроцедуры

// Функция конец периода при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияКонецПериода
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияКонецПериодаПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция конец периода при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияКонецПериода
Процедура ФункцияКонецПериодаПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьАргумент И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияКонецПериода");
КонецПроцедуры

// Функция добавить к дате при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДобавитьКДате
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияДобавитьКДатеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция добавить к дате при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДобавитьКДате
Процедура ФункцияДобавитьКДатеПриВыходе(Выражение) Экспорт
	МожноДелегироватьСдвиг = ИзвлечьРезультатИзСтека();
	МожноДелегироватьДата = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегироватьДата И МожноДелегироватьСдвиг И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияДобавитьКДате");
КонецПроцедуры

// Функция дата время при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДатаВремя
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияДатаВремяПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция дата время при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияДатаВремя
Процедура ФункцияДатаВремяПриВыходе(Выражение) Экспорт
	МожноДелегировать = ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияДатаВремя");
КонецПроцедуры

// Функция IsNull при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияIsNull
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияIsNullПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция IsNull при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияIsNull
Процедура ФункцияIsNullПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент2 = ИзвлечьРезультатИзСтека();
	МожноДелегироватьАргумент1 = ИзвлечьРезультатИзСтека();
		
	МожноДелегировать = МожноДелегироватьАргумент1 И МожноДелегироватьАргумент2 И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияIsNull");
КонецПроцедуры

// Функция представление при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставление
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияПредставлениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция представление при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставление
Процедура ФункцияПредставлениеПриВыходе(Выражение) Экспорт
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияПредставление");
КонецПроцедуры

// Функция представление ссылки при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставлениеСсылки
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияПредставлениеСсылкиПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция представление ссылки при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияПредставлениеСсылки
Процедура ФункцияПредставлениеСсылкиПриВыходе(Выражение) Экспорт
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияПредставлениеСсылки");
КонецПроцедуры

// Функция тип значения при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТипЗначения
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияТипЗначенияПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция тип значения при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТипЗначения
Процедура ФункцияТипЗначенияПриВыходе(Выражение) Экспорт	
	МожноДелегировать = ИзвлечьРезультатИзСтека();
	
	МожноДелегировать = МожноДелегировать И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, "ФункцияТипЗначения");
КонецПроцедуры

// Функция значение при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЗначение
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияЗначениеПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция значение при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияЗначение
Процедура ФункцияЗначениеПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов, Выражение.Тип, "ФункцияЗначение");
КонецПроцедуры

// Функция тип при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТип
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияТипПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;	
КонецПроцедуры

// Функция тип при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияТип
Процедура ФункцияТипПриВыходе(Выражение) Экспорт	
	ПоместитьРезультат(Выражение, ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов, Выражение.Тип, " ФункцияТип");
КонецПроцедуры

// Функция разность дат при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияРазностьДат
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ФункцияРазностьДатПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Функция разность дат при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйФункцияРазностьДат
Процедура ФункцияРазностьДатПриВыходе(Выражение) Экспорт
	МожноДелегироватьАргумент2 = ИзвлечьРезультатИзСтека();
	МожноДелегироватьАргумент1 = ИзвлечьРезультатИзСтека();
		
	МожноДелегировать = МожноДелегироватьАргумент1 И МожноДелегироватьАргумент2 И ОписаниеОтбора.ДополнительныеОперации.ФункцииЯзыкаЗапросов;	
	ПоместитьРезультат(Выражение, МожноДелегировать, Выражение.Тип, " ФункцияРазностьДат");
КонецПроцедуры

// Выражение все поля при входе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеВсеПоля
//  ВыполнятьСтандартныйОбход - Булево - Управляет стандартным обходом дочерних узлов.
//      Если установить в Ложь, обходчик не будет рекурсивно посещать дочерние узлы.
Процедура ВыражениеВсеПоляПриВходе(Выражение, ВыполнятьСтандартныйОбход) Экспорт
	ВыполнятьСтандартныйОбход = Истина;
КонецПроцедуры

// Выражение все поля при выходе.
//
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеВсеПоля
Процедура ВыражениеВсеПоляПриВыходе(Выражение) Экспорт
	ПоместитьРезультат(Выражение, Ложь, Выражение.Тип, "ВыражениеВсе");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоместитьРезультат(Выражение, ЭтоДопустимыйЭлементОтбора, ТипУзла, Операция)
	Если РежимВалидации И Не ЭтоДопустимыйЭлементОтбора Тогда
		Если Операция = Неопределено Тогда
			ВызватьИсключение "В выражении отбора для исполняемого представления " + ИмяПредставления + " используются недопустимые  операции.";
		Иначе
			ВызватьИсключение "Операция " + Операция + " не доступна в выражении отбора для исполняемого представления " + ИмяПредставления + ".";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("МожноДелегировать, ТипУзла", ЭтоДопустимыйЭлементОтбора, ТипУзла);
	
	СтекРезультатов.Добавить(Результат);
	
	КартаРезультатовАнализа.Вставить(Выражение, ЭтоДопустимыйЭлементОтбора);
КонецПроцедуры

Функция ИзвлечьРезультатИзСтека()
	Элемент = ИзвлечьЭлементИзСтека();
	
	Возврат Элемент.МожноДелегировать;
КонецФункции

Функция ИзвлечьЭлементИзСтека()
	Элемент = СтекРезультатов[СтекРезультатов.ВГраница()];
	СтекРезультатов.Удалить(СтекРезультатов.ВГраница());
	
	Возврат Элемент;
КонецФункции


Функция МодифицироватьИСобрать(Выражение, СписокДелегируемыхУсловий)
	ЭтоОператорИ = (Выражение.Тип = "БинарнаяОперация" И Выражение.Операция = "И");
	
	Если ЭтоОператорИ Тогда
		НоваяЛеваяЧасть = МодифицироватьИСобрать(Выражение.ЛеваяЧасть, СписокДелегируемыхУсловий);
		НоваяПраваяЧасть = МодифицироватьИСобрать(Выражение.ПраваяЧасть, СписокДелегируемыхУсловий);
		
		// "Схлопываем" дерево, если одна из веток превратилась в ИСТИНА.
		// (ИСТИНА И X) = X
		// (X И ИСТИНА) = X
		ЛеваяЧастьИстина = (НоваяЛеваяЧасть.Тип = "Константа" И НоваяЛеваяЧасть.Значение = Истина);
		ПраваяЧастьИстина = (НоваяПраваяЧасть.Тип = "Константа" И НоваяПраваяЧасть.Значение = Истина);
		
		Если ЛеваяЧастьИстина И ПраваяЧастьИстина Тогда
			Возврат ЭлементыМоделиЗапроса.НовыйКонстанта(Истина);
		ИначеЕсли ЛеваяЧастьИстина Тогда
			Возврат НоваяПраваяЧасть;
		ИначеЕсли ПраваяЧастьИстина Тогда
			Возврат НоваяЛеваяЧасть;
		Иначе
			НовыйУзел = ЭлементыМоделиЗапроса.НовыйБинарнаяОперация();
			НовыйУзел.Операция = "И";
			НовыйУзел.ЛеваяЧасть = НоваяЛеваяЧасть;
			НовыйУзел.ПраваяЧасть = НоваяПраваяЧасть;
			Возврат НовыйУзел;
		КонецЕсли;
	Иначе
		РезультатАнализа = КартаРезультатовАнализа.Получить(Выражение);
		Если РезультатАнализа = Истина Тогда
			ДелегируемоеВыражение = ЭлементыМоделиЗапроса.НовыйСписокВыражений();
			ДелегируемоеВыражение.Элементы.Добавить(МодельЗапросаУтилиты.СкопироватьЭлементМоделиЗапроса(Выражение));
			СписокДелегируемыхУсловий.Добавить(ДелегируемоеВыражение);
			ВыражениеКонстанта = ЭлементыМоделиЗапроса.НовыйКонстанта();
			ВыражениеКонстанта.Значение = Истина;
			
			Возврат ВыражениеКонстанта;
		Иначе
			Возврат Выражение;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ЗавершитьОбходВыражения() Экспорт
	Если СтекРезультатов.Количество() <> 1 Тогда
		ВызватьИсключение "Не консистентное состояние стэка типов";
	КонецЕсли;
КонецПроцедуры

Функция ЭтоВыражениеКонстанта(ТипУзла)
	Возврат ТипУзла = "Константа" Или ТипУзла = "ПараметрЗапроса";
КонецФункции

#КонецОбласти

#Область Инициализация

РежимВалидации = Ложь;
СтекРезультатов = Новый Массив();
КартаРезультатовАнализа = Новый Соответствие();

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли