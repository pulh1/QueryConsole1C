
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем ТекстовыйДокумент;
Перем ТекущийПакет;
	
#Область СлужебныеПроцедурыИФункции

//@skip-check module-empty-method
Процедура Инициализировать(ЗначенияПараметровЗапроса) Экспорт
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	ПараметрыМетода = Новый Массив();
	Для Каждого КлючЗначение Из ЗначенияПараметровЗапроса Цикл
		ПараметрыМетода.Добавить(КлючЗначение.Ключ);	
	КонецЦикла;
	
	ВывестиШапкуКода(ПараметрыМетода);	
КонецПроцедуры

Функция ИсполняемыйКод() Экспорт
	Если ЗначениеЗаполнено(ТекущийПакет) Тогда
		ВывестиТекущийПакетЗапросов(Символы.Таб, Истина);
	КонецЕсли; 
	

	ТекстовыйДокумент.ДобавитьСтроку("КонецФункции");
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция ИсполнитьУзелИсполняемоеПредставление(ИсполняемоеПредставление, ПараметрыИсполнения) Экспорт
	ВывестиТекущийПакетЗапросов(Символы.Таб);
	ТекущийПакет = Неопределено;
	
	Табуляции = Символы.Таб;
	
	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ИсполняемоеПредставление.ИмяТаблицы);
	
	ГенераторКода = ПоставщикИсполняемыхПредставлений.ГенераторИсполняемогоКода(ОписаниеПредставления);
	ИсполняемыйКод = ГенераторКода.ИсполняемыйКод(ПараметрыИсполнения, Табуляции);
	
	ТекстовыйДокумент.ДобавитьСтроку(ИсполняемыйКод);	
КонецФункции

Функция ИсполнитьУзелЗапросУничтожения(ЗапросУничтожения) Экспорт
	ТекстЗапроса = ГенерацияТекстовЗапросов.ТекстЗапросаУничтожения(ЗапросУничтожения);
	ДобавитьЗапросВТекущийПакет(ТекстЗапроса);
КонецФункции

Функция ИсполнитьУзелЗапросВыбора(ЗапросВыбора) Экспорт
	ТекстЗапроса = ГенерацияТекстовЗапросов.ТекстЗапросаВыбора(ЗапросВыбора);
	ДобавитьЗапросВТекущийПакет(ТекстЗапроса);
КонецФункции

Функция ИсполнитьУзелУничтожитьВТ(ИмяВТ) Экспорт
	ТекстЗапроса = "УНИЧТОЖИТЬ " + ИмяВТ;
	
	ДобавитьЗапросВТекущийПакет(ТекстЗапроса);
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

Процедура ВывестиШапкуКода(ПараметрыМетода)
	Строка = "Функция ПолучитьДанные(" + СтрСоединить(ПараметрыМетода, ", ") + ")";
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	
	Строка = Символы.Таб + "Запрос = Новый Запрос;";
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	Строка = Символы.Таб + "Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();";
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	
	Для Каждого Параметр Из ПараметрыМетода Цикл
		Строка = Символы.Таб + "Запрос.УстановитьПараметр(""" + Параметр + """, " + Параметр + ");";	
		ТекстовыйДокумент.ДобавитьСтроку(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьЗапросВТекущийПакет(ТекстЗапроса)
	Если ТекущийПакет = Неопределено Тогда
		ТекущийПакет = Новый Массив();
	КонецЕсли;
	ТекущийПакет.Добавить(ТекстЗапроса);	
КонецПроцедуры

Процедура ВывестиТекущийПакетЗапросов(Знач Таблцяции, ДобавитьВозврат = Ложь)
	Если Не ЗначениеЗаполнено(ТекущийПакет)	Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекущийПакет, " ; ");
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	ТекущийПакет.Очистить();
	
	Строка = "Запрос.Текст = "; 
	ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + Строка);
	
	СтрокиЗапроса = СтрРазделить(ТекстЗапроса, Символы.ПС);
	Строка = """" + СтрокиЗапроса[0];
	ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + Строка);	
	
	Для Индекс = 1 По СтрокиЗапроса.ВГраница() - 1 Цикл
		Строка = "|" + СтрокиЗапроса[Индекс];
		ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + Строка);	
	КонецЦикла; 
	
	Строка = "|" + СтрокиЗапроса[СтрокиЗапроса.ВГраница()] + """;";
	ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + Строка);	
	
	Если ДобавитьВозврат Тогда
		ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + "Возврат Запрос.Выполнить();");		
	Иначе
		ТекстовыйДокумент.ДобавитьСтроку(Таблцяции + "Запрос.Выполнить();");
//		ТекстовыйДокумент.ДобавитьСтроку(Символы.ПС);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

ТекстовыйДокумент = Новый ТекстовыйДокумент();	

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
