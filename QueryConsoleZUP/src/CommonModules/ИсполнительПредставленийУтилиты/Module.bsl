#Область СлужебныеПроцедурыИФункции

Функция ЭлементБазовогоОтбораИзВыражения(Выражение) Экспорт
	ОрбабатываемыййЭлемент = Выражение;
	
	Пока ОрбабатываемыййЭлемент.Тип = "СписокВыражений" Цикл
		ОрбабатываемыййЭлемент = ОрбабатываемыййЭлемент.Элементы[0];
	КонецЦикла;
		
	Если ОрбабатываемыййЭлемент.Тип = "БинарнаяОперация" Тогда  
		Возврат ЭлементОтбораИзБинаронойОперации(ОрбабатываемыййЭлемент);
	ИначеЕсли ОрбабатываемыййЭлемент.Тип = "ОператорВ" Тогда
		Возврат ЭлементОтбораИзОператораВ(ОрбабатываемыййЭлемент);	
	ИначеЕсли ОрбабатываемыййЭлемент.Тип = "Разыменование" Тогда 
		Возврат ЭлементОтбораИзОперацииРазыменования(ОрбабатываемыййЭлемент);	
	ИначеЕсли ОрбабатываемыййЭлемент.Тип = "ОператорПодобно" Тогда 
		Возврат ЭлементОтбораИзОператораПодобно(ОрбабатываемыййЭлемент);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции

Функция ТекстВыраженияОтбора(ПараметрыВыполнения, ПсевдонимИсточника) Экспорт
	Условие = ОбработкаМоделиЗапроса.УсловиеИзМассиваВыражений(ПараметрыВыполнения.Отборы);	
	
	Источник = ЭлементыМоделиЗапроса.НовыйИсточник();
	Источник.Источник = ЭлементыМоделиЗапроса.НовыйИсточникДанныхТаблица();
	Источник.Источник.Псевдоним = ПсевдонимИсточника;
	Источник.ИдентификаторИсточника = ПараметрыВыполнения.ИдентификаторИсточника;
	
	Источники = Новый Соответствие();
	Источники.Вставить(Источник.ИдентификаторИсточника, Источник);
	
	Генератор = ГенерацияТекстовЗапросов.СоздатьГенераторТекстовВыражений(, Источники);
	Генератор.УстановитьВыводПсевдонимовИсточников(Ложь);
	
	Возврат ГенерацияТекстовЗапросов.ВыражениеВСтроку(Условие, Генератор);
КонецФункции

Процедура УстановитьЗначениеПараметра(СтруктураПараметров, ПараметрыВыполнения, ПараметрыЗапроса, ИмяПараметра, Знач ИмяПараметраВыполнения = Неопределено) Экспорт
	Если ИмяПараметраВыполнения = Неопределено Тогда
		ИмяПараметраВыполнения = ИмяПараметра;
	КонецЕсли;
		
	ЗначениеПараметра = ЗначениеПараметраКонстанты(ИмяПараметраВыполнения, ПараметрыВыполнения, ПараметрыЗапроса);
	Если ЗначениеПараметра <> Неопределено Тогда
		СтруктураПараметров[ИмяПараметра] = ЗначениеПараметра;	
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьЗначениеПараметров(СтруктураПараметров, ПараметрыВыполнения, ПараметрыЗапроса, УстанавливаемыеПараметры) Экспорт
	Для Каждого КлючЗначение Из УстанавливаемыеПараметры Цикл
		ИмяПараметраВыполнения = КлючЗначение.Ключ;
		ИмяПараметра = КлючЗначение.Значение;
		Если ИмяПараметра = Неопределено Тогда
			ИмяПараметра = ИмяПараметраВыполнения;
		КонецЕсли;
		
		УстановитьЗначениеПараметра(
			СтруктураПараметров, 
			ПараметрыВыполнения, 
			ПараметрыЗапроса, 
			ИмяПараметра,
			ИмяПараметраВыполнения);
	КонецЦикла;
КонецПроцедуры

Функция ЗначениеПараметраКонстанты(ИмяПараметра, ПараметрыВыполнения, ПараметрыЗапроса, УчитыватьЗначениеПоУмолчанию = Ложь) Экспорт
	Параметр = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Если Не УчитыватьЗначениеПоУмолчанию Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
		ОписаниеПараметра = Описание.ПараметрыПоИменам.Получить(ВРег(ИмяПараметра));
		Если ОписаниеПараметра <> Неопределено
			И ОписаниеПараметра.ЗначениеПоУмолчанию <> Неопределено Тогда
		
			Возврат ОписаниеПараметра.ЗначениеПоУмолчанию;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	Если Параметр.ЭтоПараметрЗапроса Тогда
		Возврат ПараметрыЗапроса[Параметр.Значение];
	Иначе
		Возврат Параметр.Значение
	КонецЕсли;
КонецФункции

Функция ИспользуютсяПоляПредставления(СписокПолейСтрокой, ПараметрыВыполнения) Экспорт
	Поля = СтрРазделить(СписокПолейСтрокой, ",");
	
	Для Каждого Поле Из Поля Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(СокрЛП(ВРег(Поле))) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция УдалитьБлокПоместитьИзПоследнегоЗапроса(ТекстЗапроса) Экспорт
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество() - 1].ТаблицаДляПомещения = Неопределено;
	
	Возврат Схема.ПолучитьТекстЗапроса(); 	
КонецФункции

Функция ЭлементОтбораИзБинаронойОперации(Выражение) 
	Если Не (Выражение.Операция = "="
			Или Выражение.Операция = "<>"
			Или Выражение.Операция = ">"
			Или Выражение.Операция = "<"
			Или Выражение.Операция = "<="
			Или Выражение.Операция = ">=") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКПолю = ПутьКПолюИзВыраженияОтбора(Выражение.ЛеваяЧасть);
	ВыражениеЗначениеОтбора = Выражение.ПраваяЧасть;
	Операция = Выражение.Операция;
	Если ПутьКПолю = Неопределено Тогда
		ПутьКПолю = ПутьКПолюИзВыраженияОтбора(Выражение.ПраваяЧасть);
		ВыражениеЗначениеОтбора = Выражение.ЛеваяЧасть;
		Операция = ИнвертироватьОператорСравнения(Выражение.Операция);
		Если ПутьКПолю = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;			
	
	ЗначениеОтбора = ЗначениеОтбора(ВыражениеЗначениеОтбора);
	Если ЗначениеОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЭлементОтбора();
	ЭлементОтбора.ВидСравнения = Операция;
	ЭлементОтбора.ПутьКПолю = ПутьКПолю;
	ЭлементОтбора.ЗначениеОтбора = ЗначениеОтбора;
	
	Возврат ЭлементОтбора;	
КонецФункции

Функция ЭлементОтбораИзОператораВ(Выражение) 
	Если Выражение.Инверсия Тогда
		ВидСравненияОтбора = "НЕ В";
	Иначе
		ВидСравненияОтбора = "В";	
	КонецЕсли;
	
	Если Выражение.Иерархия Тогда
		ВидСравненияОтбора = ВидСравненияОтбора + " ИЕРАРХИИ";	
	КонецЕсли;  
	
	ПутьКПолю = ПутьКПолюИзВыраженияОтбора(Выражение.Операнд);
	Если ПутьКПолю = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выражение.Список.Тип = "СписокВыражений"
		И Выражение.Список.Элементы.Количество() <> 1 Тогда
			
		Возврат Неопределено;
	КонецЕсли;		
	
	ЗначениеОтбора = ЗначениеОтбора(Выражение.Список.Элементы[0]);
	Если ЗначениеОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	ЭлементОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЭлементОтбора();
	ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
	ЭлементОтбора.ПутьКПолю = ПутьКПолю;
	ЭлементОтбора.ЗначениеОтбора = ЗначениеОтбора;
	
	Возврат ЭлементОтбора;	
КонецФункции

Функция ЭлементОтбораИзОперацииРазыменования(Выражение) 
	ПутьКПолю = ПутьКПолюИзВыраженияОтбора(Выражение);
	Если ПутьКПолю  = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЭлементОтбора();
	ЭлементОтбора.ПутьКПолю = ПутьКПолю;
	ЭлементОтбора.ВидСравнения = "=";
	ЭлементОтбора.ЗначениеОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЗначениеОтбора();
	ЭлементОтбора.ЗначениеОтбора.Значение = Истина;
	
	Возврат ЭлементОтбора;
КонецФункции

Функция ЭлементОтбораИзОператораПодобно(Выражение) 
	ПутьКПолю = ПутьКПолюИзВыраженияОтбора(Выражение.Операнд);
	Если ПутьКПолю = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗначениеОтбора = ЗначениеОтбора(Выражение.Шаблон);
	Если ЗначениеОтбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Выражение.Инверсия Тогда
		ВидСравненияОтбора = "НЕ ПОДОБНО";
	Иначе
		ВидСравненияОтбора = "ПОДОБНО";	
	КонецЕсли;
	
	ЭлементОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЭлементОтбора();
	ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
	ЭлементОтбора.ПутьКПолю = ПутьКПолю;
	ЭлементОтбора.ЗначениеОтбора = ЗначениеОтбора;
	
	Возврат ЭлементОтбора;
КонецФункции

Функция ПутьКПолюИзВыраженияОтбора(Выражение)
	Если Выражение.Тип <> "Разыменование" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Выражение.Элементы[0].Тип <> "ПолеИсточника" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКПолю = Новый Массив();
	ПутьКПолю.Добавить(Выражение.Элементы[0].ИмяПоля);
	
	Для Индекс = 1 По Выражение.Элементы.ВГраница() Цикл
		Если ТипЗнч(Выражение.Элементы[Индекс]) = Тип("Строка") Тогда
			ПутьКПолю.Добавить(Выражение.Элементы[Индекс]);
		Иначе
		 	Возврат Неопределено;
	 	КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ПутьКПолю, ".");		
КонецФункции

Функция ЗначениеОтбора(Выражение)
	Если Выражение.Тип = "Константа" Тогда
		ЗначениеОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЗначениеОтбора(); 
		ЗначениеОтбора.Значение = Выражение.Значение;
		ЗначениеОтбора.ЭтоПараметрЗапроса = Ложь;
		
		Возврат ЗначениеОтбора;
	ИначеЕсли Выражение.Тип = "ПараметрЗапроса" Тогда
		ЗначениеОтбора = ЭлементыМоделиИсполненияПредставлений.НовыйЗначениеОтбора(); 
		ЗначениеОтбора.Значение = Выражение.Имя;
		ЗначениеОтбора.ЭтоПараметрЗапроса = Истина;
		
		Возврат ЗначениеОтбора;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ИнвертироватьОператорСравнения(Операция)
    Если Операция = ">" Тогда 
    	Возврат "<";
    ИначеЕсли Операция = "<" Тогда 
    	Возврат ">";
    ИначеЕсли Операция = ">=" Тогда 
    	Возврат "<=";
    ИначеЕсли Операция = "<=" Тогда 
    	Возврат ">=";
    КонецЕсли;
    Возврат Операция; // Для = и <> инверсия не нужна
КонецФункции

#КонецОбласти