#Область СлужебныеПроцедурыИФункции


Процедура ОбработатьОбращениеКПолюИсточника(ЭлементыРазыменования, Контекст) Экспорт
	ПервыйЭлементРазыменования = ЭлементыРазыменования[0]; 

	Если ТипЗнч(ПервыйЭлементРазыменования) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;	

	ПолеИсточникаЗапроса = ЭлементыМоделиЗапроса.НовыйПолеИсточника();

	Источник = Контекст.ИспользуемыеТаблицы.Получить(ВРег(ПервыйЭлементРазыменования));
	Если Источник = Неопределено Или Не Контекст.ДоступныПсевдонимыИсточников Тогда
		Результат = НайтиПолеВоВсехИсточниках(ПервыйЭлементРазыменования, Контекст);
		Если Результат.Поле = Неопределено Тогда
			ВызватьИсключение "Таблица " + ПервыйЭлементРазыменования + " не найдена";   
		КонецЕсли;  

		ПолеИсточникаЗапроса.ИдентификаторИсточника = Результат.Источник.ИдентификаторИсточника;
		ПолеИсточникаЗапроса.ИмяПоля = Результат.Поле.Имя;

		ТипЗначения = Результат.Поле.ТипЗначения;
	Иначе	  
		Если ЭлементыРазыменования.Количество() = 1  Тогда
			ВызватьИсключение "Поле " + ПервыйЭлементРазыменования + " не найдено";		 
		КонецЕсли;	
		
		ПолеИсточникаЗапроса.ИдентификаторИсточника = Источник.ИдентификаторИсточника;	  
		ПолеИсточникаЗапроса.ИмяПоля = ЭлементыРазыменования[1];
		
		ТипЗначения = ТипПоляПоИмени(ЭлементыРазыменования[1], Источник.Источник, Контекст);	
		ЭлементыРазыменования.Удалить(0);
	КонецЕсли; 
	
	ЭлементыРазыменования[0] = ПолеИсточникаЗапроса;
КонецПроцедуры	

Функция НайтиПолеВоВсехИсточниках(ИмяПоля, Контекст) 
	РезультатПоиска = Новый Структура("Поле, Источник");
	
	Поле = Неопределено;     
	Источник = Неопределено;
	Для Каждого КлючЗначение Из Контекст.ИспользуемыеТаблицы Цикл	
		ТекущееПоле = НайтиПолеВИсточнике(ИмяПоля, КлючЗначение.Значение.Источник, Контекст);	 
		Источник = КлючЗначение.Значение; 
		Если Поле <> Неопределено
			И ТекущееПоле <> Неопределено Тогда
			
			ВызватьИсключение "Не однозначное имя поля " + ИмяПоля;     
		ИначеЕсли ТекущееПоле <> Неопределено Тогда
			Поле = ТекущееПоле;	 
			НайденныйИсточника = Источник;
		КонецЕсли;	
	КонецЦикла;	
	
	РезультатПоиска.Поле = Поле;  
	РезультатПоиска.Источник = НайденныйИсточника;
	
	Возврат РезультатПоиска;
КонецФункции

Функция НайтиПолеВИсточнике(ИмяПоля, Источник, Контекст) Экспорт 
	Поле = Новый Структура("Имя, ТипЗначения", ИмяПоля);
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		Колонка = Источник.ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		Если Колонка <> Неопределено Тогда
			Поле.ТипЗначения = Колонка.ТипЗначения;
			Возврат Поле;	 
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		ОписаниеВТ = Источник.ОписаниеВТ;
		Если ОписаниеВТ <> Неопределено Тогда
			
			ТипЗначения = ОписаниеВТ.Колонки.Получить(ВРег(ИмяПоля));
			Если ТипЗначения = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ТипЗначения;
				Возврат Поле;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	  
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда 
		//	TODO
		//	ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениNf,kbws(Источник.ИмяТаблицы);
		ОписаниеПредставления = Неопределено;
		Если ОписаниеПредставления <> Неопределено Тогда
			ОписаниеПоля = ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля));
			Если ОписаниеПоля = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ОписаниеПоля.ТипЗначения; 
				Возврат Поле;
			КонецЕсли;	
		Иначе		
			ДоступнаяТаблица = Контекст.ДоступныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
			Если ДоступнаяТаблица <> Неопределено Тогда
				ДоступноеПоле = ДоступнаяТаблица.Поля.Найти(ИмяПоля);
				Если ДоступноеПоле <> Неопределено Тогда
					Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
						Поле.ТипЗначения = ДоступноеПоле;  
						Возврат Поле;
					ИначеЕсли ДоступноеПоле <> Неопределено Тогда
						Поле.ТипЗначения =  ДоступноеПоле.ТипЗначения;   
						Возврат Поле;
					КонецЕсли;	
				Иначе
					Возврат Неопределено; 
				КонецЕсли; 
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		// TODO поиск в представлениях
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

Функция ТипЭлементаРазыменованияИзОписанияТипов(ЭлементРазыменования, ТекущийТип, ДоступныеТаблицыИБ) Экспорт
	НовыйТип = Неопределено;
	Для Каждого Тип Из ТекущийТип.Типы() Цикл  
		Если Тип = МодельЗапросаТипы.ПроизвольныйТип() Тогда
			Если НовыйТип = Неопределено Тогда
				НовыйТип = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
			Иначе
				ДобавляемыеТипы = Новый Массив;
				ДобавляемыеТипы.Добавить(МодельЗапросаТипы.ПроизвольныйТип());
				
				НовыйТип = Новый ОписаниеТипов(НовыйТип, ДобавляемыеТипы);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;	
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);  
		Если МетаданныеТипа <> Неопределено Тогда
			ТаблицаИБ = ДоступныеТаблицыИБ.Найти(МетаданныеТипа.ПолноеИмя());
			Если ТаблицаИБ <> Неопределено Тогда
				Поле = ТаблицаИБ.Поля.Найти(ЭлементРазыменования);
				Если Поле <> Неопределено Тогда
					Если НовыйТип = Неопределено Тогда
						НовыйТип = Поле.ТипЗначения;
					Иначе
						НовыйТип = Новый ОписаниеТипов(НовыйТип, Поле.ТипЗначения.Типы());
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если НовыйТип = Неопределено Тогда
		ВызватьИсключение "Поле не найдено " + ЭлементРазыменования;   
	КонецЕсли;
	
	Возврат НовыйТип;
КонецФункции

Функция ТипПоляПоИмени(ИмяПоля, Источник, Контекст) Экспорт
	Поле = НайтиПолеВИсточнике(ИмяПоля, Источник, Контекст);
	Если Поле <> Неопределено Тогда
		Возврат Поле.ТипЗначения;
	КонецЕсли;
	
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	 
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		Если Контекст.ЗаполнятьОписаниеВременныхТаблиц
			И Источник.ОписаниеВТ.ИндексЗапросаСоздания = -1 Тогда
			ТипПоля = МодельЗапросаТипы.ОписаниеПроизвольногоТипа();
			МодельЗапросаУтилиты.ДобавитьПолеВОписаниеВТ(Источник.ОписаниеВТ, ИмяПоля, ТипПоля);
			
			Возврат ТипПоля;
		Иначе
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;	  
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда
		ДоступнаяТаблица = Контекст.ДоступныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
		Если ДоступнаяТаблица <> Неопределено Тогда
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено"; 
		Иначе
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;
	ИначеЕсли Источник.Тип = "ИсполняемоеПредставление" Тогда
		ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмениТаблицы(Источник.ИмяТаблицы);
		Если ОписаниеПредставления = Неопределено 
			Или ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)) = Неопределено Тогда
			
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";
		КонецЕсли;
		
		Возврат ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)).ТипЗначения;	
	Иначе
		ВызватьИсключение "Не известный тип источника";
	КонецЕсли;	
КонецФункции	

Функция ТипИзОписанияТипаЗапроса(ОписаниеТипаЗапроса) Экспорт
	Если ОписаниеТипаЗапроса.Тип = "ОписаниеТипаБулево" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаДата" Тогда
		Возврат Новый ОписаниеТипов("Дата"); 	 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаЧисло" Тогда
		Возврат Новый ОписаниеТипов("Число"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаСтрока" Тогда
		Возврат Новый ОписаниеТипов("Строка"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ТипСсылочногоПоля" Тогда
		Возврат ТипСсылочногоПоля(ОписаниеТипаЗапроса); 	
	Иначе
		ВызватьИсключение "Не известный тип";
	КонецЕсли;	
КонецФункции	

Функция ТипСсылочногоПоля(ТипСсылочногоПоля) Экспорт 
	Имя = ТипСсылочногоПоля.Группа + "." + ТипСсылочногоПоля.Таблица;
	МетаданныеТипа = Метаданные.НайтиПоПолномуИмени(Имя); 
	Если МетаданныеТипа = Неопределено Тогда
		ВызватьИсключение  "Таблица " + Имя + " не найдена";
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка." + ТипСсылочногоПоля.Таблица); 
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланОбменаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("БизнесПроцессСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ЗадачаСсылка." + ТипСсылочногоПоля.Таблица);	
	Иначе
		ВызватьИсключение "Некорректный тип " + Имя; 
	КонецЕсли;		
КонецФункции	

Функция ТипФункцииЗначение(ФункцияЗначение) Экспорт 
	Если ФункцияЗначение.ЧастиПути.Количество() = 2 Тогда
		// TODO проверять обращения к системны перечислениям, пока вернем заглущку
		Возврат Новый ОписаниеТипов("ВидДвиженияНакопления"); 
	Иначе
		ОписаниеСсылочногоПоля = ЭлементыМоделиЗапроса.НовыйТипСсылочногоПоля();
		ОписаниеСсылочногоПоля.Группа = ФункцияЗначение.ЧастиПути[0];  
		ОписаниеСсылочногоПоля.Таблица = ФункцияЗначение.ЧастиПути[1];   
		
		Тип = ТипСсылочногоПоля(ОписаниеСсылочногоПоля);
		Если ВРег(ФункцияЗначение.ЧастиПути[2]) = "ПУСТАЯССЫЛКА" Тогда
			Возврат Тип;
		Иначе
			// TODO проверить наличие предопределенного элемента
			Возврат Тип;
		КонецЕсли;		
	КонецЕсли;	
КонецФункции

#КонецОбласти