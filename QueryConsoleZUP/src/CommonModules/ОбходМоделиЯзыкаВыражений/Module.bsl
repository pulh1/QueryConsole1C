#Область ПрограммныйИнтерфейс

// Запускает обход дерева выражений.
//
// Параметры:
//  Узел - Структура - Корневой узел выражения для начала обхода.
//  Посетитель - Произвольный - Объект, реализующий ПОЛНЫЙ интерфейс посетителя.
//
Процедура ОбойтиДерево(Узел, Посетитель) Экспорт
	
	Если Узел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипУзла = Узел.Тип;
	
	Если ТипУзла = "БинарнаяОперация" Тогда
		ОбработатьБинарнуюОперацию(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ОператорМежду" Тогда
		ОбработатьОператорМежду(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ОператорПроверкиТипа" Тогда
		ОбработатьОператорПроверкиТипа(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ОператорПроверкиНаNULL" Тогда
		ОбработатьОператорПроверкиНаNULL(Узел, Посетитель);
	ИначеЕсли ТипУзла = "СписокВыражений" Тогда
		ОбработатьСписокВыражений(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ОператорВ" Тогда
		ОбработатьОператорВ(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ЛогическоеОтрицание" Тогда
		ОбработатьЛогическоеОтрицание(Узел, Посетитель);
	ИначеЕсли ТипУзла = "УнарнаяОперация" Тогда
		ОбработатьУнарнуюОперацию(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ОператорПодобно" Тогда
		ОбработатьОператорПодобно(Узел, Посетитель);
	ИначеЕсли ТипУзла = "Разыменование" Тогда
		ОбработатьРазыменование(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ПриведениеТипа" Тогда
		ОбработатьПриведениеТипа(Узел, Посетитель);
	ИначеЕсли ТипУзла = "Выбор" Тогда
		ОбработатьВыбор(Узел, Посетитель);
	ИначеЕсли ТипУзла = "Константа" Тогда
		ОбработатьКонстанту(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ПараметрЗапроса" Тогда
		ОбработатьПараметрЗапроса(Узел, Посетитель);
	ИначеЕсли ТипУзла = "АгрегатнаяФункция" Тогда
		ОбработатьАгрегатнуюФункцию(Узел, Посетитель);
	ИначеЕсли ТипУзла = "АгрегатнаяФункцияКоличество" Тогда
		ОбработатьАгрегатнуюФункциюКоличество(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияЧастьПериодаЧислом" Тогда
		ОбработатьФункциюЧастьПериодаЧислом(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияНачалоПериода" Тогда
		ОбработатьФункциюНачалоПериода(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияКонецПериода" Тогда
		ОбработатьФункциюКонецПериода(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияДобавитьКДате" Тогда
		ОбработатьФункциюДобавитьКДате(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияДатаВремя" Тогда
		ОбработатьФункциюДатаВремя(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияIsNull" Тогда
		ОбработатьФункциюIsNull(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияПредставление" Тогда
		ОбработатьФункциюПредставление(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияПредставлениеСсылки" Тогда
		ОбработатьФункциюПредставлениеСсылки(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияТипЗначения" Тогда
		ОбработатьФункциюТипЗначения(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияЗначение" Тогда
		ОбработатьФункциюЗначение(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияТип" Тогда
		ОбработатьФункциюТип(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ФункцияРазностьДат" Тогда
		ОбработатьФункциюРазностьДат(Узел, Посетитель);
	ИначеЕсли ТипУзла = "ВыражениеВсеПоля" Тогда
		ОбработатьВыражениеВсеПоля(Узел, Посетитель);
	Иначе
		ВызватьИсключение "Обходчик выражений не поддерживает узел типа: " + ТипУзла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиУзлов

Процедура ОбработатьБинарнуюОперацию(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.БинарнаяОперацияПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.ЛеваяЧасть, Посетитель);
		ОбойтиДерево(Узел.ПраваяЧасть, Посетитель);
	КонецЕсли;
	Посетитель.БинарнаяОперацияПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьОператорМежду(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ОператорМеждуПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Операнд, Посетитель);
		ОбойтиДерево(Узел.НачалоИнтервала, Посетитель);
		ОбойтиДерево(Узел.КонецИнтервала, Посетитель);
	КонецЕсли;
	Посетитель.ОператорМеждуПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьОператорПроверкиТипа(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ОператорПроверкиТипаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Операнд, Посетитель);
	КонецЕсли;
	Посетитель.ОператорПроверкиТипаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьОператорПроверкиНаNULL(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ОператорПроверкиНаNULLПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Операнд, Посетитель);
	КонецЕсли;
	Посетитель.ОператорПроверкиНаNULLПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьСписокВыражений(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.СписокВыраженийПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		Для Каждого Выражение Из Узел.Элементы Цикл
			ОбойтиДерево(Выражение, Посетитель);
		КонецЦикла;
	КонецЕсли;
	Посетитель.СписокВыраженийПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьОператорВ(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Ложь;
	Посетитель.ОператорВПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		// Шаг 1: Операнд слева от "В" - это всегда выражение, обходим его стандартно.
		ОбойтиДерево(Узел.Операнд, Посетитель);
		
		// Шаг 2: Проверяем, что находится справа от "В".
		Если Узел.Список.Тип = "СписокВыражений" Тогда
			// Это обычный список "(...)". Обходчик выражений может его обработать.
			ОбойтиДерево(Узел.Список, Посетитель);
		Иначе
			// Это вложенный запрос "SELECT ...". Наш обходчик не умеет с ним работать.
			// Мы делегируем обработку этого специфического узла самому посетителю,
			// который, в свою очередь, использует ОбходчикЗапроса.
			Посетитель.ПосетитьВложенныйЗапрос(Узел.Список);
		КонецЕсли;
	КонецЕсли;
	
	Посетитель.ОператорВПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьЛогическоеОтрицание(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ЛогическоеОтрицаниеПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Выражение, Посетитель);
	КонецЕсли;
	Посетитель.ЛогическоеОтрицаниеПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьУнарнуюОперацию(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.УнарнаяОперацияПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Выражение, Посетитель);
	КонецЕсли;
	Посетитель.УнарнаяОперацияПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьОператорПодобно(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ОператорПодобноПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Операнд, Посетитель);
		ОбойтиДерево(Узел.Шаблон, Посетитель);
	КонецЕсли;
	Посетитель.ОператорПодобноПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьРазыменование(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.РазыменованиеПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.РазыменованиеПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьПриведениеТипа(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ПриведениеТипаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Выражение, Посетитель);
	КонецЕсли;
	Посетитель.ПриведениеТипаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьВыбор(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ВыборПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		Для Каждого Альтернатива Из Узел.АльтернативыВыбора Цикл
			ОбойтиДерево(Альтернатива.Условие, Посетитель);
			ОбойтиДерево(Альтернатива.Действие, Посетитель);
		КонецЦикла;
		Если Узел.Иначе <> Неопределено Тогда
			ОбойтиДерево(Узел.Иначе, Посетитель);
		КонецЕсли;
	КонецЕсли;
	Посетитель.ВыборПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьКонстанту(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.КонстантаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.КонстантаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьПараметрЗапроса(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ПараметрЗапросаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.ПараметрЗапросаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьАгрегатнуюФункцию(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.АгрегатнаяФункцияПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.АгрегатнаяФункцияПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьАгрегатнуюФункциюКоличество(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.АгрегатнаяФункцияКоличествоПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.АгрегатнаяФункцияКоличествоПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюЧастьПериодаЧислом(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияЧастьПериодаЧисломПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияЧастьПериодаЧисломПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюНачалоПериода(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияНачалоПериодаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Дата, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияНачалоПериодаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюКонецПериода(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияКонецПериодаПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Дата, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияКонецПериодаПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюДобавитьКДате(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияДобавитьКДатеПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Дата, Посетитель);
		ОбойтиДерево(Узел.Сдвиг, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияДобавитьКДатеПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюДатаВремя(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияДатаВремяПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.ФункцияДатаВремяПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюIsNull(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияIsNullПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.ПроверяемоеЗначение, Посетитель);
		ОбойтиДерево(Узел.Действие, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияIsNullПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюПредставление(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияПредставлениеПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияПредставлениеПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюПредставлениеСсылки(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияПредставлениеСсылкиПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияПредставлениеСсылкиПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюТипЗначения(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияТипЗначенияПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Аргумент, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияТипЗначенияПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюЗначение(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияЗначениеПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.ФункцияЗначениеПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюТип(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияТипПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.ФункцияТипПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьФункциюРазностьДат(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ФункцияРазностьДатПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Если ВыполнятьСтандартныйОбход Тогда
		ОбойтиДерево(Узел.Дата1, Посетитель);
		ОбойтиДерево(Узел.Дата2, Посетитель);
	КонецЕсли;
	Посетитель.ФункцияРазностьДатПриВыходе(Узел);
КонецПроцедуры

Процедура ОбработатьВыражениеВсеПоля(Узел, Посетитель)
	ВыполнятьСтандартныйОбход = Истина;
	Посетитель.ВыражениеВсеПоляПриВходе(Узел, ВыполнятьСтандартныйОбход);
	Посетитель.ВыражениеВсеПоляПриВыходе(Узел);
КонецПроцедуры

#КонецОбласти