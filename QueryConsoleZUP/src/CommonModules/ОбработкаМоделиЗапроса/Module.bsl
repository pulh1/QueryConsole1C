// TODO автоматическая генерация псевдонимов для источников и полей

#Область СлужебныеПроцедурыИФункции

Функция КонтекстОбработкиВыражения() Экспорт
	Контекст = Новый Структура;
	
	ВспомогательнаяСхема = Новый СхемаЗапроса;

	Контекст.Вставить("ИндексЗапросаПакета", -1);
	Контекст.Вставить("ДоступтныеТаблицыИБ", ВспомогательнаяСхема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы);
	Контекст.Вставить("ИспользуемыеТаблицы", Новый Соответствие); 
	Контекст.Вставить("ИсточникиПоИдентификаторам", Новый Соответствие); 
	Контекст.Вставить("__СхемаЗапрос", ВспомогательнаяСхема);
	
	Возврат Контекст;
КонецФункции

Функция КонтекстОбработкиЗапроса() Экспорт 
	Контекст = КонтекстОбработкиВыражения();
	Контекст.Вставить("ОписанияВременныхТаблиц", Новый Соответствие); 
	
	Возврат Контекст;
КонецФункции	

Функция КонтекстОбработкиВложенногоЗапроса(ТекущийКонтекст, ДоступныИстчоникиВнешенегоЗапроса = Ложь) Экспорт  
	Контекст = КонтекстОбработкиЗапроса();
	Контекст.ИндексЗапросаПакета = ТекущийКонтекст.ИндексЗапросаПакета;
	Контекст.ДоступтныеТаблицыИБ = ТекущийКонтекст.ДоступтныеТаблицыИБ;
	Контекст.ОписанияВременныхТаблиц = ТекущийКонтекст.ОписанияВременныхТаблиц;
	Контекст.__СхемаЗапрос = ТекущийКонтекст.__СхемаЗапрос;
	
	Если ДоступныИстчоникиВнешенегоЗапроса Тогда
		Для Каждого КлючЗначение Из ТекущийКонтекст.ИспользуемыеТаблицы Цикл
			Контекст.ИспользуемыеТаблицы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ТекущийКонтекст.ИсточникиПоИдентификаторам Цикл
			Контекст.ИсточникиПоИдентификаторам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контекст;
КонецФункции	

// Разобрать запрос.
// 
// Параметры:
//  ТекстЗапроса - Строка 
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиЗапроса.НовыйПакетЗапрсов
Функция РазобратьЗапрос(ТекстЗапроса) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапрсов();
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапрсов();

	МодельЗапроса = Парсер.Разобрать(ТекстЗапроса);
	ОбработатьМодельЗапроса(МодельЗапроса);
	
	Возврат МодельЗапроса;
КонецФункции

Функция РазобратьТекстВложенногоЗапроса(ТекстЗапроса, СписокДоступныхВТ, ИндексЗапросаПакета) Экспорт 
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапрсов();
	МодельЗапроса = Парсер.Разобрать(ТекстЗапроса); 
	
	Контекст = КонтекстОбработкиЗапроса(); 
	Контекст.ИндексЗапросаПакета = ИндексЗапросаПакета;
	Контекст.ОписанияВременныхТаблиц = МодельЗапросаУтилиты.МассивСтруктурВСоответствие(СписокДоступныхВТ, "Имя");   
	
	Для Каждого ОписаниеВТ Из СписокДоступныхВТ Цикл
		Контекст.ОписанияВременныхТаблиц.Вставить(ВРег(ОписаниеВТ.Имя), ОписаниеВТ);
	КонецЦикла;	 
	ОбработатьЗапрос(МодельЗапроса.Элементы[0], Контекст);
	
	// TODO
	//проверка что в пакете только один запрос и это запрос выбора
	
	Возврат МодельЗапроса.Элементы[0];
КонецФункции	

// Обработать модель запроса.
// 
// Параметры:
//  ПакетЗапрсов - см.ЭлементыМоделиЗапроса.НовыйПакетЗапрсов
Процедура ОбработатьМодельЗапроса(ПакетЗапрсов) Экспорт 
	Контекст = КонтекстОбработкиЗапроса();
	
	ОписанияДоступныхВТ = Контекст.ОписанияВременныхТаблиц;
	
	Индекс = 0;
	Для Каждого Запрос Из ПакетЗапрсов.Элементы Цикл
		Контекст.ИндексЗапросаПакета = Индекс;
		Если Запрос.Тип = "ЗапросУничтожения" Тогда 
			ОписаниеВТ =  ОписанияДоступныхВТ.Получить(ВРег(Запрос.ИмяТаблицы));
			Если ОписаниеВТ <> Неопределено Тогда
				ОписаниеВТ.ИндексЗапросаУничтожения = Индекс;
				ОписанияДоступныхВТ.Удалить(ВРег(Запрос.ИмяТаблицы)); 
				
				Запрос.ОписаниеВТ = ОписаниеВТ;
			КонецЕсли;	  
		Иначе
			ОбработатьЗапрос(Запрос, Контекст);	
			Если ЗначениеЗаполнено(Запрос.ТаблицаДляПомещения)  Тогда
				Если ОписанияДоступныхВТ.Получить(ВРег(Запрос.ТаблицаДляПомещения)) <> Неопределено Тогда
					ВызватьИсключение "Временная таблица " + Запрос.ТаблицаДляПомещения + " уже существет";
				КонецЕсли;
				ОписаниеВТ = МодельЗапросаУтилиты.ОписаниеВременнойТаблицы(Запрос, Индекс);
				ОписанияДоступныхВТ.Вставить(ВРег(Запрос.ТаблицаДляПомещения), ОписаниеВТ);
				Запрос.ОписаниеВТ = ОписаниеВТ;
			КонецЕсли;	
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;	
КонецПроцедуры	  

Процедура ОбработатьЗапрос(Запрос, Контекст, РассчитываемыеСвойства = Неопределено, ЭтоВложенныйЗапрос = Ложь) Экспорт
	Запрос.ТаблицаДляПомещения = Запрос.Операторы[0].__ТаблицаДляПомещения;
	Запрос.ВыбиратьРазрешенные = Запрос.Операторы[0].__ВыбиратьРазрешенные;
	
	ИндексОператора = 0;
	Для Каждого Оператор Из Запрос.Операторы Цикл
		ОбработатьОператор(Оператор, Контекст, РассчитываемыеСвойства);	
		Если РассчитываемыеСвойства <> Неопределено Тогда
			// TODO используемые поля в выражениях оператора в РассчитываемыеСвойства
		КонецЕсли;
		
		Если ИндексОператора = 0  Тогда   
			Запрос.ТаблицаДляПомещения = Оператор.__ТаблицаДляПомещения;
			Запрос.ВыбиратьРазрешенные = Оператор.__ВыбиратьРазрешенные;
		ИначеЕсли ЗначениеЗаполнено(Оператор.__ТаблицаДляПомещения) Тогда
			//TODO вызвать исключение
		КонецЕсли;		
			
		ИндексОператора = ИндексОператора +  1;
	КонецЦикла;	
	
	// TODO проверка что в операторах одинаковое количество полей
	// проверка уникальности псевдонимов
	ЗаполнитьКолонкиЗапроса(Запрос, Контекст);  
	
	ОбработатьЭлементыПорядка(Запрос, Запрос.Порядок, Контекст, ЭтоВложенныйЗапрос);
	ОбработатьКонтрольныеТочкиИтогов(Запрос, Запрос.КонтрольныеТочкиИтогов, Контекст, ЭтоВложенныйЗапрос);
	ОбработатьПоляИтогов(Запрос, Запрос.ВыраженияИтогов, Контекст, ЭтоВложенныйЗапрос);
	ОбработатьИндексируемыеПоля(Запрос, Запрос.Индекс.Элементы, Контекст);
	
	Если Запрос.Операторы.Количество() > 1 Тогда
		ЗаполнитьПсевдонимыПолейОператоров(Запрос);
		УдалитьПоляТипаNullВОператорах(Запрос);	
	КонецЕсли;
КонецПроцедуры	    

Процедура ОбработатьЭлементыПорядка(ЗапросВыбора, ЭлементыПорядка, Контекст, ЭтоВложенныйЗапрос) Экспорт  
	Если (ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения) или ЭтоВложенныйЗапрос)
		И ЗначениеЗаполнено(ЭлементыПорядка) 
		И ЗапросВыбора.Операторы[0].КоличествоПолучаемыхЗаписей = Неопределено Тогда
			
		ВызватьИсключение "Во воложенных запросах и при создании временных таблиц упордочтвание можно использовать только своместно с выбрать ПЕРВЫЕ N записей";
	КонецЕсли;
	
	// TODO то же спмое проверить для вложнного запроса
	
	ЕдинтсвенныйОператор = ЗапросВыбора.Операторы.Количество() = 1;
	
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Выражение = ЭлементПорядка.Выражение.Значение;
		Если Выражение.Тип = "Константа"
			И ТипЗнч(Выражение.Значение) = Тип("Число") Тогда
			
			Если Цел(Выражение.Значение) <> Выражение.Значение
				Или Выражение.Значение < 1 
				Или Выражение.Значение > ЗапросВыбора.Колонки.Количество() Тогда
				
				ТекстИсключения = "В блоке УПОРЯДОЧИТЬ можно использовать только целые числа больше 0 и не превышающие количество выбираемых полей запроса";
				ВызватьИсключение ТекстИсключения;	
			КонецЕсли;	
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = ЗапросВыбора.Колонки[Выражение.Значение - 1].Идентификатор;		 	
			ЭлементПорядка.Выражение.Значение = СсылкаНаКолонку;			
		ИначеЕсли Выражение.Тип = "Разыменование"
			И Выражение.Элементы.Количество() = 1 
			И ТипЗнч(Выражение.Элементы[0]) = Тип("Строка")
			И ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0])) <> Неопределено Тогда  
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = ЗапросВыбора.КолонкиПоПсевдонимам[ВРег(Выражение.Элементы[0])].Идентификатор;		 	
			ЭлементПорядка.Выражение.Значение = СсылкаНаКолонку;				
		Иначе
			Если Не ЕдинтсвенныйОператор Тогда
				ТекстИсключения = "При объединение нескольких запросов, в блоке упорядчоить необходимо указывать псевдонимы выбираемых полей";
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;		
			
			ОбработатьВыбираемоеПолеОператора(ЭлементПорядка.Выражение, Контекст);
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

// Обработать контрольные точки  итогов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  КонтрольныеТочки - Массив из см. ЭлементыМоделиЗапроса.НовыйКонтрольнаяТочкаИтогов
//  Контекст - см. Контекст
// ЭтоВложенныйЗапрос - Булево
Процедура ОбработатьКонтрольныеТочкиИтогов(ЗапросВыбора, КонтрольныеТочки, Контекст, ЭтоВложенныйЗапрос) Экспорт
	Если (ЭтоВложенныйЗапрос Или ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения))
		И ЗначениеЗаполнено(ЗапросВыбора.КонтрольныеТочкиИтогов) Тогда
			
		ВызватьИсключение "Итоги не могут использоваться во воложенных запросах и при создании временных таблиц";
	КонецЕсли;
	
	ИменаКонтрольныхТочек = Новый Соответствие();
	Для Каждого КонтрольнаяТочка Из КонтрольныеТочки Цикл
		Если КонтрольнаяТочка.ИмяКолонки <> Неопределено Тогда
			Если ИменаКонтрольныхТочек.Получить(ВРег(КонтрольнаяТочка.ИмяКолонки)) = Истина Тогда
				ТекстИсключения = "Имя котрольной точки итогов " + КонтрольнаяТочка.ИмяКолонки + " уже используется";
				ВызватьИсключение ТекстИсключения;
			Иначе
				ИменаКонтрольныхТочек.Вставить(ВРег(КонтрольнаяТочка.ИмяКолонки), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Выражение = КонтрольнаяТочка.Выражение.Значение;
		Если Выражение.Тип = "Разыменование"
			И Выражение.Элементы.Количество() = 1 
			И ТипЗнч(Выражение.Элементы[0]) = Тип("Строка")
			И ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0])) <> Неопределено Тогда  
			
			Колонка = ЗапросВыбора.КолонкиПоПсевдонимам[ВРег(Выражение.Элементы[0])];
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;		 	
			КонтрольнаяТочка.Выражение.Значение = СсылкаНаКолонку;	
			
			КонтрольнаяТочка.Выражение.ТипЗначения = Колонка.ТипЗначения;			
		Иначе
			ОбработатьВыбираемоеПолеОператора(КонтрольнаяТочка.Выражение, Контекст);
			Если КонтрольнаяТочка.Выражение.ИспользуетсяАгрегатнаяФункция Тогда
				ТекстИсключения = "Использование агрегатных функций в контрольных точках итогов не допустимо";
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ИндексПоля = МодельЗапросаУтилиты.НайтиПолеОператораПоВыражению(ЗапросВыбора.Операторы[0], КонтрольнаяТочка.Выражение);
			Если ИндексПоля <> Неопределено Тогда
				СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
				СсылкаНаКолонку.Идентификатор = ЗапросВыбора.Колонки[ИндексПоля].Идентификатор;
				КонтрольнаяТочка.Выражение.Значение = СсылкаНаКолонку;
				КонтрольнаяТочка.Выражение.ТипЗначения = ЗапросВыбора.Колонки[ИндексПоля].ТипЗначения;
			КонецЕсли;
		КонецЕсли;
				
		
		ОбработатьДополнениеПериодамиКонтрольнойТочкиИтогов(КонтрольнаяТочка);	
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьДополнениеПериодамиКонтрольнойТочкиИтогов(КонтрольнаяТочка) Экспорт
	Если Не ЗначениеЗаполнено(КонтрольнаяТочка.ТипДополненияПериодами) Тогда
		Возврат;
	КонецЕсли;
	Если Не МодельЗапросаТипы.ЭтоПолеТипа(КонтрольнаяТочка.Выражение.ТипЗначения, Тип("Дата")) Тогда
		ТекстИсключения = "Не корректный тип котрольной точки итогов с дополнением периодами";
		ВызватьИсключение ТекстИсключения;				
	КонецЕсли;	
			
	ОбработатьПериодДополненияКонтрольнойТочкиИтогов(КонтрольнаяТочка);
КонецПроцедуры

Процедура ОбработатьПериодДополненияКонтрольнойТочкиИтогов(КонтрольнаяТочка)
	Контекст = КонтекстОбработкиВыражения();
	Контекст.ДоступтныеТаблицыИБ = Новый Массив();
	
	Если ЗначениеЗаполнено(КонтрольнаяТочка.НачалоПериодаДополнения) Тогда 
		ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
		ВыражениеМодели.Значение = КонтрольнаяТочка.НачалоПериодаДополнения;	
		ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(ВыражениеМодели.ТипЗначения, Тип("Дата")) Тогда
			ВызватьИсключение "Неверный тип выражения поля ДатаНачалаДополнения котнтрольной точки итогов";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтрольнаяТочка.КонецПериодаДополнения) Тогда 
		ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
		ВыражениеМодели.Значение = КонтрольнаяТочка.КонецПериодаДополнения;	
		ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(ВыражениеМодели.ТипЗначения, Тип("Дата")) Тогда
			ВызватьИсключение "Неверный тип выражения поля КонецПериодаДополнения котнтрольной точки итогов";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработать поля итогов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  ПоляИтогов - Массив из см. ЭлементыМоделиЗапроса.НовыйПолеЗапроса
//  Контекст - см. Контекст
//  ЭтоВложенныйЗапрос - Булево
Процедура ОбработатьПоляИтогов(ЗапросВыбора, ПоляИтогов, Контекст, ЭтоВложенныйЗапрос) Экспорт
	Если (ЭтоВложенныйЗапрос Или ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения))
		И ЗначениеЗаполнено(ПоляИтогов) Тогда
			
		ВызватьИсключение "Итоги не могут использоваться во воложенных запросах и при создании временных таблиц";
	КонецЕсли;
	
	ИменаПолейИтогов  = Новый Соответствие();
	Для Каждого ПолеИтогов Из ПоляИтогов Цикл
		Если ПолеИтогов.Псевдоним <> Неопределено Тогда
			Если ИменаПолейИтогов.Получить(ВРег(ПолеИтогов.Псевдоним)) = Истина Тогда
				ТекстИсключения = "Пссевдоним поля итогов " + ПолеИтогов.Псевдоним + " уже используется";
				ВызватьИсключение ТекстИсключения;
			Иначе
				ИменаПолейИтогов.Вставить(ВРег(ПолеИтогов.Псевдоним), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Выражение = ПолеИтогов.Выражение.Значение; 
		Если Выражение.Тип <> "АгрегатнаяФункция"
			И Выражение.Тип <> "АгрегатнаяФункцияКоличество" Тогда
				
			ТекстИсключения = "В выражения полей итогов обязательно должны использоваться агрегаттные функции";
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
				
		Аргумент = Выражение.Аргумент;
		Если Аргумент.Тип <> "Разыменование" Тогда
			ВызватьИсключение "Не корректное выражения для поля итогов. Ожидается имя поля запроса";
		КонецЕсли;
		Для Каждого ЭлементРазыменования Из Аргумент.Элементы Цикл
			Если ТипЗнч(ЭлементРазыменования) <> Тип("Строка") Тогда
				ВызватьИсключение "Не корректное выражения для поля итогов. Ожидается имя поля запроса";
			КонецЕсли;	
		КонецЦикла;
		
		Если Аргумент.Элементы.Количество() = 1 Тогда
			Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Аргумент.Элементы[0]));
			Если Колонка = Неопределено Тогда
				ТекстИсключения = "Поле запроса с именем " + Аргумент.Элементы[0] + " не найдена"; 
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
			Выражение.Аргумент = СсылкаНаКолонку;
		Иначе
			ВыражениеДляПоиска = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеДляПоиска.Значение = Аргумент;
			ОбработатьВыражение(ВыражениеДляПоиска.Значение, Контекст, ВыражениеДляПоиска);
			ИндексПоля = МодельЗапросаУтилиты.НайтиПолеОператораПоВыражению(ЗапросВыбора.Операторы[0], ВыражениеДляПоиска);
			Если ИндексПоля = Неопределено Тогда
				ВызватьИсключение "Не корректное выражения для поля итогов. Ожидается имя поля запроса";
			КонецЕсли;
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
			Колонка = ЗапросВыбора.Колонки[ИндексПоля];
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
			Выражение.Аргумент = СсылкаНаКолонку;
		КонецЕсли;	
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(Колонка.ТипЗначения, Тип("Число"))
			И Выражение.Тип <> "АгрегатнаяФункцияКоличество" Тогда
			
			ВызватьИсключение "Не верный тип поля для агрегатной функции";
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьИндексируемыеПоля(ЗапросВыбора, ИндексируемыеПоля, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения)
		И ЗначениеЗаполнено(ЗапросВыбора.Индекс.Элементы) Тогда
		
		ВызватьИсключение "Индексация возможна только при создании таблицы";	
	КонецЕсли;
	
	Для Индекс = 0 По ИндексируемыеПоля.ВГраница() Цикл	
		Выражение = ИндексируемыеПоля[Индекс]; 
	
		Если Выражение.Тип <> "Разыменование" 
			Или Выражение.Элементы.Количество() <> 1
			Или ТипЗнч(Выражение.Элементы[0]) <> Тип("Строка") Тогда
			ВызватьИсключение "Не корректное выражения для колонки индекса. Ожидается имя поля запроса";
		КонецЕсли;
		Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0]));
		Если Колонка = Неопределено Тогда
			ТекстИсключения = "Поле запроса с именем " + Выражение.Элементы[0] + " не найдена"; 
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
		СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
		ИндексируемыеПоля[Индекс] = СсылкаНаКолонку; 
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьКолонкиЗапроса(Запрос, Контекст) Экспорт
	КоличествоПолейВПервомОператоре = 0;
	ЭтоПервыйОператор = Истина;
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Если ЭтоПервыйОператор Тогда 
			КоличествоПолейВПервомОператоре = Оператор.ВыбираемыеПоля.Количество();
			НомерПоля = 1;
			Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл
				Если ЗначениеЗаполнено(Поле.Псевдоним) Тогда
					Псевдоним = Поле.Псевдоним;
				Иначе
					Псевдоним = "Поле" + Формат(НомерПоля,"ЧРГ=");
				КонецЕсли;
				Колонка = ЭлементыМоделиЗапроса.НовыйКолонкаЗапроса();
				Колонка.Имя = Псевдоним;
				Колонка.ТипЗначения = Поле.Выражение.ТипЗначения; 	
				Запрос.Колонки.Добавить(Колонка);
				Запрос.КолонкиПоПсевдонимам.Вставить(ВРег(Псевдоним), Колонка);   
				НомерПоля = НомерПоля + 1;
			КонецЦикла;	 
			ЭтоПервыйОператор = Ложь;
		Иначе
			Если Оператор.ВыбираемыеПоля.Количество() <> КоличествоПолейВПервомОператоре Тогда
				ВызватьИсключение "Разное количество полей в объединяемых запросах"; 
			КонецЕсли;	
			
			ИндексПоля = 0;
			Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл
				Колонка = Запрос.Колонки[ИндексПоля]; 
				Колонка.ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, Поле.Выражение.ТипЗначения.Типы());   
				ИндексПоля = ИндексПоля + 1;
			КонецЦикла;	 					
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ПолеИстчоникаИзВыражения(Выражение) Экспорт 
	Если Выражение.Значение.Тип = "Разыменование"
		И Выражение.Значение.Элементы.Количество() = 1
		И ТипЗнч(Выражение.Значение.Элементы[0]) = Тип("Структура")
		И Выражение.Значение.Элементы[0].Тип = "ПолеИсточника" Тогда
		
		Возврат Выражение.Значение.Элементы[0];
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

// Обработать оператор.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
//  РассчитываемыеСвойства - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
Процедура ОбработатьОператор(Оператор, Контекст, РассчитываемыеСвойства = Неопределено)
	// TODO при заполнении проверить повторяющиеся псевдонимы
	// TODO заполнить поля вложенных запросов
	// но во вложенных запросах источниках они не доступны, доступны во вложенных запросах испрорльзуемых в условиях соединения и в блоке ГДЕ(наверное) 
	
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		ОбработкаПредставлениеЗапрсов.ОбработатьИсточникЗапроса(Источник, Контекст);		
	КонецЦикла;
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Если Источник.Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
			ВложенныйКонтекст = КонтекстОбработкиВложенногоЗапроса(Контекст);
			ОбработатьЗапрос(Источник.Источник.ЗапросВыбора, ВложенныйКонтекст)	
		КонецЕсли;	
		Если Источник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда
			ОписаниеВТ = Контекст.ОписанияВременныхТаблиц.Получить(ВРег(Источник.Источник.ИмяТаблицы));
			Если ОписаниеВТ <> Неопределено Тогда
				Источник.Источник.ОписаниеВТ = ОписаниеВТ;
			Иначе
				Источник.Источник.ОписаниеВТ = ЭлементыМоделиЗапроса.НовыйОписаниеВременнойТаблицы();	
				Источник.Источник.ОписаниеВТ.Имя = Источник.Источник.ИмяТаблицы; 
			КонецЕсли;
		КонецЕсли;

		Контекст.ИспользуемыеТаблицы.Вставить(ВРег(Источник.Источник.Псевдоним), Источник);
		Контекст.ИсточникиПоИдентификаторам.Вставить(Источник.ИдентификаторИсточника, Источник);
	КонецЦикла;
	
	// TODO если в полях или упорядочивании используются агрешатные функции то проверям группировку
	
	ОбработатьГруппировку(Оператор.Группировка, Контекст);
	ОбработатьВыбираемыеПоляОператора(Оператор, Контекст); 
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		ОбработатьСоединения(Источник.Соединения, Контекст);
	КонецЦикла;
	
	ОбработатьОтбор(Оператор, Контекст);
	ОбработатьОтборСгруппированных(Оператор, Контекст);
	
	Если РассчитываемыеСвойства <> Неопределено Тогда
		ЗаполнитьИспользуемыеОператоромПоля(РассчитываемыеСвойства.ПоляИсточников, Оператор);
	КонецЕсли;
КонецПроцедуры	

// Обработать соединения.
// 
// Параметры:
//  Соединения - Массив из см. ЭлементыМоделиЗапроса.НовыйСоединениеИсточника
//  Контекст - см. Контекст
Процедура ОбработатьСоединения(Соединения, Контекст)
	Для Каждого Соединение Из Соединения Цикл
		ОбработатьВыражениеУсловие(Соединение.Условие, Контекст, Ложь);	
	КонецЦикла;	
КонецПроцедуры	

// Обработать отбор.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
Процедура ОбработатьОтбор(Оператор, Контекст)
	Если Оператор.Отбор <> Неопределено Тогда
		МассивВыражений = УсловиеВМассивВыраженийПоИ(Оператор.Отбор.Значение);
		Оператор.Отбор = Новый Массив();
		Для Каждого ВыражениеУсловие Из МассивВыражений Цикл
			ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеМодели.Значение = ВыражениеУсловие;
			Оператор.Отбор.Добавить(ВыражениеМодели);
			ОбработатьВыражениеУсловие(ВыражениеМодели, Контекст, Ложь);	
		КонецЦикла;
	Иначе
		Оператор.Отбор = Новый Массив();	
	КонецЕсли;
КонецПроцедуры	

// Обработать отбор сгруппированных.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
Процедура ОбработатьОтборСгруппированных(Оператор, Контекст)
	Если Оператор.ОтборСгруппированных <> Неопределено Тогда
		МассивВыражений = УсловиеВМассивВыраженийПоИ(Оператор.ОтборСгруппированных.Значение);
		Оператор.ОтборСгруппированных = Новый Массив();
		Для Каждого ВыражениеУсловие Из МассивВыражений Цикл
			ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеМодели.Значение = ВыражениеУсловие;
			Оператор.ОтборСгруппированных.Добавить(ВыражениеМодели);
			ОбработатьВыражениеУсловие(ВыражениеМодели, Контекст, Истина);	
			// todo проверить корректное использование агренатных функций
		КонецЦикла;
	Иначе
		Оператор.ОтборСгруппированных = Новый Массив();
	КонецЕсли;
КонецПроцедуры	

// Обработать выражение условие.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
//  Контекст - см. Контекст
//  ПоддерживаетАгрегатныеФункции - Булево - Поддерживает агрегатные функции
Процедура ОбработатьВыражениеУсловие(Выражение, Контекст, ПоддерживаетАгрегатныеФункции = Ложь) Экспорт
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);	
	МодельЗапросаТипы.ПроверитьТипВыраженияУсловия(Выражение.ТипЗначения, Выражение);
	
	Если Выражение.ИспользуетсяАгрегатнаяФункция И Не ПоддерживаетАгрегатныеФункции Тогда
		ТекстИсключения = "Использование агрегатных функций в данном блоке запрещено";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры


// Выражение в массив выражений по И.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
// 
// Возвращаемое значение:
// 	Массив из Произвольный 
Функция УсловиеВМассивВыраженийПоИ(Выражение) 
	МассивВыражений = Новый Массив();
	ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение);
	
	Возврат МассивВыражений;		
КонецФункции

Функция УсловиеИзМассиваВыражений(МассивВыражений, Знач ПоследнийИндекс = Неопределено) Экспорт
	Если ПоследнийИндекс = Неопределено Тогда
		ПоследнийИндекс = МассивВыражений.ВГраница();
	КонецЕсли;
	
	Если ПоследнийИндекс = 0 Тогда
		Если МассивВыражений[0].Тип = "ВыражениеМоделиЗапроса" Тогда
			Возврат МассивВыражений[0].Значение;
		Иначе
			Возврат МассивВыражений[0];
		КонецЕсли;
	КонецЕсли;
		
	Выражение = ЭлементыМоделиЗапроса.НовыйБинарнаяОперация();
	Выражение.Операция = "И";
	Если МассивВыражений[0].Тип = "ВыражениеМоделиЗапроса" Тогда
		Выражение.ПраваяЧасть = МассивВыражений[ПоследнийИндекс].Значение;
	Иначе
		Выражение.ПраваяЧасть = МассивВыражений[ПоследнийИндекс];
	КонецЕсли;
	ПоследнийИндекс = ПоследнийИндекс - 1;
	Выражение.ЛеваяЧасть = УсловиеИзМассиваВыражений(МассивВыражений, ПоследнийИндекс);
	
	Возврат Выражение;
КонецФункции

Процедура ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение)
	Если Выражение.Тип <> "БинарнаяОперация"
		Или Выражение.Операция <> "И" Тогда
		
		МассивВыражений.Добавить(Выражение);
	Иначе
		ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение.ЛеваяЧасть);	
		ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение.ПраваяЧасть);	
	КонецЕсли;			
КонецПроцедуры

Процедура ОбработатьВыбираемыеПоляОператора(Оператор, Контекст)
	Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл     
		ОбработатьВыражениеВыбираемогоПоля(Поле.Выражение, Поле.Псевдоним, Контекст);	 
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработатьВыбираемоеПолеОператора(Выражение, Контекст) Экспорт
	// TODO Удалить и сделать отдельыне методы
	// TODO поддержать "*" и Источник.*
	
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);  
	// TODO проверка типа, проверка группировок
КонецПроцедуры	

Процедура ОбработатьГруппировку(Группировка, Контекст)
	Для Каждого ЭлементГруппировки Из Группировка.Элементы Цикл
		ОбработатьВыражениеГруппировки(ЭлементГруппировки, Контекст);	
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбработатьВыражениеГруппировки(ВыражениеГруппировки, Контекст) Экспорт 
	// TODO проверить что не используются агр. функции
	ОбработатьВыражение(ВыражениеГруппировки.Значение, Контекст, ВыражениеГруппировки);
КонецПроцедуры	

Процедура ОбработатьУсловие(ВыражениеМодели, Контекст) Экспорт 
	ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
	// TODO проверить тип
	// проверит использование агркгатных функций
КонецПроцедуры	

Процедура ОбработатьВыражение(Выражение, Контекст, РассчитываемыеСвойства) Экспорт 
	РассчитываемыеСвойства.ТипЗначения = Неопределено;
	
	Если Выражение.Тип = "БинарнаяОперация" Тогда
		//TODO проверить тип левой и правой частей 
		
		ОбработатьВыражение(Выражение.ЛеваяЧасть,Контекст, РассчитываемыеСвойства);  
		ТипЛевойЧасти = РассчитываемыеСвойства.ТипЗначения;
		ОбработатьВыражение(Выражение.ПраваяЧасть, Контекст, РассчитываемыеСвойства);
		ТипПравойЧасти = РассчитываемыеСвойства.ТипЗначения;
		
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.ЛеваяЧасть, ТипПравойЧасти);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.ПраваяЧасть, ТипЛевойЧасти);
		
		Если Выражение.Операция = "+" Тогда
			// TODO проверить типы, разрешена строка и число
			
			РассчитываемыеСвойства.ТипЗначения = ТипЛевойЧасти;
		ИначеЕсли Выражение.Операция = "-" 
			Или Выражение.Операция = "/"
			Или Выражение.Операция = "*" Тогда
			
			РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число"); 
		ИначеЕсли Выражение.Операция = "=" 
			Или Выражение.Операция = "<>"  
			Или Выражение.Операция = ">"   
			Или Выражение.Операция = "<"
			Или Выражение.Операция = ">="
			Или Выражение.Операция = "<=" Тогда 
			// TODO проверить типы левой и правой части
			РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево")
		Иначе			
			Если Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипЛевойЧасти)
				Или Не МодельЗапросаТипы.ТипВыраженияУсловияКорректен(ТипПравойЧасти) Тогда
					
				ВызватьИсключение "Не корректный тип условия";
			КонецЕсли;
			РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево"); 
		КонецЕсли;	
	ИначеЕсли Выражение.Тип = "ОператорМежду" Тогда        
		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства); 
		ТипОперанда = РассчитываемыеСвойства.ТипЗначения;
		ОбработатьВыражение(Выражение.НачалоИнтервала, Контекст, РассчитываемыеСвойства);
		ОбработатьВыражение(Выражение.КонецИнтервала, Контекст, РассчитываемыеСвойства);	
		
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.НачалоИнтервала, ТипОперанда);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.КонецИнтервала, ТипОперанда);	
		
		//TODO проверить тип Операнд и НачалоИнтервала И  КонецИнтервала
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "ОператорПроверкиТипа" Тогда  
		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "ОператорПроверкиНаNULL" Тогда  
		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства);

		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "СписокВыражений" Тогда
		ОбработатьСписокВыражений(Выражение, Контекст, РассчитываемыеСвойства);
	ИначеЕсли Выражение.Тип = "ОператорВ" Тогда
		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства);
		Если Выражение.Список.Тип = "СписокВыражений" Тогда
			ТипОперанда = РассчитываемыеСвойства.ТипЗначения;
			ОбработатьВыражение(Выражение.Список, Контекст, РассчитываемыеСвойства);
			ПараметрСписокЗначений = Выражение.Список.Элементы.Количество() = 1;
			Для Каждого ЭлементСписка Из Выражение.Список.Элементы Цикл
				УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, ЭлементСписка, ТипОперанда, ПараметрСписокЗначений);
			КонецЦикла;
		Иначе
			ВложенныйКонтекст = КонтекстОбработкиВложенногоЗапроса(Контекст, Истина);
			ОбработатьЗапрос(Выражение.Список, ВложенныйКонтекст);
		КонецЕсли;
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "ЛогическоеОтрицание" Тогда  
		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Выражение, РассчитываемыеСвойства.ТипЗначения);
	ИначеЕсли Выражение.Тип = "УнарнаяОперация" Тогда    
		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);

		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Выражение, РассчитываемыеСвойства.ТипЗначения);
	ИначеЕсли Выражение.Тип = "ОператорПодобно" Тогда   
		ОбработатьВыражение(Выражение.Операнд, Контекст, РассчитываемыеСвойства);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Операнд, Новый ОписаниеТипов("Строка"));
		ОбработатьВыражение(Выражение.Шаблон, Контекст, РассчитываемыеСвойства);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Шаблон, Новый ОписаниеТипов("Строка"));
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "Разыменование" Тогда
		ОбработатьВыражениеРазыменования(Выражение, Контекст, РассчитываемыеСвойства);
	ИначеЕсли Выражение.Тип = "ПриведениеТипа" Тогда 
		ОбработатьВыражение(Выражение.Выражение, Контекст, РассчитываемыеСвойства);
		
		// TODO Проверить Выражение.Выражение
		РассчитываемыеСвойства.ТипЗначения = ТипИзОписанияТипаЗапроса(Выражение.ОписаниеТипа);
	ИначеЕсли Выражение.Тип = "ТипСсылочногоПоля" Тогда
		РассчитываемыеСвойства.ТипЗначения = ТипСсылочногоПоля(Выражение)	
	ИначеЕсли Выражение.Тип = "ОписаниеТипаБулево" Тогда
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "ОписаниеТипаДата" Тогда
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
	ИначеЕсли Выражение.Тип = "ОписаниеТипаЧисло" Тогда
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
	ИначеЕсли Выражение.Тип = "ОписаниеТипаСтрока" Тогда
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли Выражение.Тип = "Выбор" Тогда	
		ТипЗначенияОператораВыбора(Выражение, Контекст, РассчитываемыеСвойства);
	ИначеЕсли Выражение.Тип = "Константа" Тогда	
		Типы = Новый Массив;
		Типы.Добавить(ТипЗнч(Выражение.Значение));
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов(Типы);
	ИначеЕсли Выражение.Тип = "ПараметрЗапроса" Тогда	
		РассчитываемыеСвойства.ТипЗначения = МодельЗапросаТипы.ОписаниеПроивзольногоТипа();
		Если РассчитываемыеСвойства.ПараметрыЗапроса.Получить(ВРег(Выражение.Имя)) = Неопределено Тогда
			ОписаниеПараметра = ЭлементыМоделиЗапроса.НовыйОписаниеПараметраЗапроса();	
			ОписаниеПараметра.Имя = Выражение.Имя;
			РассчитываемыеСвойства.ПараметрыЗапроса.Вставить(ВРег(Выражение.Имя), ОписаниеПараметра);
		КонецЕсли;
	ИначеЕсли Выражение.Тип = "АгрегатнаяФункция" Тогда   
		// TODO нельзя использовать вложенные агрегатные функции
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");
		
		Если РассчитываемыеСвойства.Свойство("АгрегатныеФункции") Тогда
			РассчитываемыеСвойства.АгрегатныеФункции.Добавить(Выражение);
		КонецЕсли;	
	ИначеЕсли Выражение.Тип = "АгрегатнаяФункцияКоличество" Тогда  
		// TODO нельзя использовать вложенные агрегатные функции
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ИспользуетсяАгрегатнаяФункция = Истина;
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");

	ИначеЕсли Выражение.Тип = "ФункцияЧастьПериодаЧислом" Тогда 
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Аргумент, Новый ОписаниеТипов("Дата"));
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");	
	ИначеЕсли Выражение.Тип = "ФункцияНачалоПериода" Тогда  
		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
	ИначеЕсли Выражение.Тип = "ФункцияКонецПериода" Тогда 
		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");	
	ИначеЕсли Выражение.Тип = "ФункцияДобавитьКДате" Тогда 
		ОбработатьВыражение(Выражение.Дата, Контекст, РассчитываемыеСвойства);
		ОбработатьВыражение(Выражение.Сдвиг, Контекст, РассчитываемыеСвойства);
		
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата, Новый ОписаниеТипов("Дата"));
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Сдвиг, Новый ОписаниеТипов("Число"));
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");	
	ИначеЕсли Выражение.Тип = "ФункцияДатаВремя" Тогда
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Дата");
	ИначеЕсли Выражение.Тип = "ФункцияIsNull" Тогда  
		ОбработатьВыражение(Выражение.ПроверяемоеЗначение, Контекст, РассчитываемыеСвойства); 
		ОбработатьВыражение(Выражение.Действие, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево");
	ИначеЕсли Выражение.Тип = "ФункцияПредставление" Тогда    
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли Выражение.Тип = "ФункцияПредставлениеСсылки" Тогда 
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Строка");
	ИначеЕсли Выражение.Тип = "ФункцияТипЗначения" Тогда   
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Тип");
	ИначеЕсли Выражение.Тип = "ФункцияЗначение" Тогда
		РассчитываемыеСвойства.ТипЗначения = ТипФункцииЗначение(Выражение);	
	ИначеЕсли Выражение.Тип = "ФункцияТип" Тогда   
		ОбработатьВыражение(Выражение.Аргумент, Контекст, РассчитываемыеСвойства);
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Тип");
	ИначеЕсли Выражение.Тип = "ФункцияРазностьДат" Тогда   
		ОбработатьВыражение(Выражение.Дата1, Контекст, РассчитываемыеСвойства);
		ОбработатьВыражение(Выражение.Дата2, Контекст, РассчитываемыеСвойства);
		
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата1, Новый ОписаниеТипов("Дата"));
		УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение.Дата2, Новый ОписаниеТипов("Дата"));
		
		РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("Число");		
	Иначе 
		ВызватьИсключение "Не известный тип выражения";
	КонецЕсли;	
КонецПроцедуры	       

// Обработать выражение выбираемого поля.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
//  Контекст - см. Контекст
Процедура ОбработатьВыражениеВыбираемогоПоля(Выражение, ИмяПоля, Контекст) Экспорт
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);
	МодельЗапросаТипы.ПроверитьТипЗначенияВыраженияПоля(Выражение.ТипЗначения);	
КонецПроцедуры

Функция ТипФункцииЗначение(ФункцияЗначение)  
	Если ФункцияЗначение.ЧастиПути.Количество() = 2 Тогда
		// TODO проверять обращения к системны перечислениям, пока вернем заглущку
		Возврат Новый ОписаниеТипов("ВидДвиженияНакопления"); 
	Иначе
		ОписаниеСсылочногоПоля = ЭлементыМоделиЗапроса.НовыйТипСсылочногоПоля();
		ОписаниеСсылочногоПоля.Группа = ФункцияЗначение.ЧастиПути[0];  
		ОписаниеСсылочногоПоля.Таблица = ФункцияЗначение.ЧастиПути[1];   
		
		Тип = ТипСсылочногоПоля(ОписаниеСсылочногоПоля);
		Если ВРег(ФункцияЗначение.ЧастиПути[2]) = "ПУСТАЯССЫЛКА" Тогда
			Возврат Тип;
		Иначе
			// TODO проверить наличие предопределенного элемента
			Возврат Тип;
		КонецЕсли;		
	КонецЕсли;	
КонецФункции	

Функция ТипИзОписанияТипаЗапроса(ОписаниеТипаЗапроса)
	Если ОписаниеТипаЗапроса.Тип = "ОписаниеТипаБулево" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаДата" Тогда
		Возврат Новый ОписаниеТипов("Дата"); 	 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаЧисло" Тогда
		Возврат Новый ОписаниеТипов("Число"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ОписаниеТипаСтрока" Тогда
		Возврат Новый ОписаниеТипов("Строка"); 
	ИначеЕсли ОписаниеТипаЗапроса.Тип = "ТипСсылочногоПоля" Тогда
		Возврат ТипСсылочногоПоля(ОписаниеТипаЗапроса); 	
	Иначе
		ВызватьИсключение "Не известный тип";
	КонецЕсли;	
КонецФункции	 

Функция ТипСсылочногоПоля(ТипСсылочногоПоля) 
	Имя = ТипСсылочногоПоля.Группа + "." + ТипСсылочногоПоля.Таблица;
	МетаданныеТипа = Метаданные.НайтиПоПолномуИмени(Имя); 
	Если МетаданныеТипа = Неопределено Тогда
		ВызватьИсключение  "Таблица " + Имя + " не найдена";
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ДокументСсылка." + ТипСсылочногоПоля.Таблица); 
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланОбменаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланСчетовСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ТипСсылочногоПоля.Таблица);	
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("БизнесПроцессСсылка." + ТипСсылочногоПоля.Таблица);
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеТипа) Тогда
		Возврат Новый ОписаниеТипов("ЗадачаСсылка." + ТипСсылочногоПоля.Таблица);	
	Иначе
		ВызватьИсключение "Некорректный тип " + Имя; 
	КонецЕсли;		
КонецФункции	

Процедура ТипЗначенияОператораВыбора(ОператорВыбор, Контекст, РассчитываемыеСвойства)
	РассчитываемыеСвойства.ТипЗначения = Неопределено;
	Тип = Неопределено;
	Для Каждого Альтернатива Из ОператорВыбор.АльтернативыВыбора Цикл
		ОбработатьВыражение(Альтернатива.Действие, Контекст, РассчитываемыеСвойства);
		Если Тип = Неопределено Тогда
			Тип = РассчитываемыеСвойства.ТипЗначения;
		Иначе	
			Тип = Новый ОписаниеТипов(Тип, РассчитываемыеСвойства.ТипЗначения.Типы());
		КонецЕсли;	
	КонецЦикла;
	
	Если ОператорВыбор.Иначе <> Неопределено Тогда
		ОбработатьВыражение(ОператорВыбор.Иначе, Контекст, РассчитываемыеСвойства);
		Тип = Новый ОписаниеТипов(Тип, РассчитываемыеСвойства.ТипЗначения.Типы());
	КонецЕсли;	
	РассчитываемыеСвойства.ТипЗначения = Тип;
КонецПроцедуры

Функция ТипПоляПоИмени(ИмяПоля, Источник, Контекст)
	Поле = НайтиПолеВИсточнике(ИмяПоля, Источник, Контекст);
	Если Поле <> Неопределено Тогда
		Возврат Поле.ТипЗначения;
	КонецЕсли;
	
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	 
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		ОписаниеВТ = Источник.ОписаниеВТ;
		Если ОписаниеВТ <> Неопределено 
			И МодельЗапросаУтилиты.ВременнаяТаблицаДоступнаВЗапросе(ОписаниеВТ, Контекст.ИндексЗапросаПакета) Тогда
			
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;	  
		Типы = Новый Массив;
		Типы.Добавить(МодельЗапросаТипы.ПроизвольныйТип());
		Возврат Новый ОписаниеТипов(Типы);
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда
		ДоступнаяТаблица = Контекст.ДоступтныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
		Если ДоступнаяТаблица <> Неопределено Тогда
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено"; 
		Иначе
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";	
		КонецЕсли;
	ИначеЕсли Источник.Тип = "ИсполняемоеПредставление" Тогда
		ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(Источник.ИмяТаблицы);
		Если ОписаниеПредставления = Неопределено 
			Или ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)) = Неопределено Тогда
			
			ВызватьИсключение "Поле " + Источник.Псевдоним + "." + ИмяПоля + " не найдено";
		КонецЕсли;
		
		Возврат ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля)).ТипЗначения;	
	Иначе
		ВызватьИсключение "Не известный тип источника";
	КонецЕсли;	
КонецФункции		

Функция НайтиПолеВИсточнике(ИмяПоля, Источник, Контекст) 
	Поле = Новый Структура("Имя, ТипЗначения", ИмяПоля);
	Если Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
		Колонка = Источник.ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(ИмяПоля));
		Если Колонка <> Неопределено Тогда
			Поле.ТипЗначения = Колонка.ТипЗначения;
			Возврат Поле;	 
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	ИначеЕсли Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда	 
		ОписаниеВТ = Источник.ОписаниеВТ;
		Если ОписаниеВТ <> Неопределено 
			И МодельЗапросаУтилиты.ВременнаяТаблицаДоступнаВЗапросе(ОписаниеВТ, Контекст.ИндексЗапросаПакета) Тогда
			
			ТипЗначения = ОписаниеВТ.Колонки.Получить(ВРег(ИмяПоля));
			Если ТипЗначения = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ТипЗначения;
				Возврат Поле;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	  
	ИначеЕсли Источник.Тип = "ИсточникДанныхТаблица" Тогда 
//	TODO
	//		ОписаниеПредставления = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(Источник.ИмяТаблицы);
		ОписаниеПредставления = Неопределено;
		Если ОписаниеПредставления <> Неопределено Тогда
			ОписаниеПоля = ОписаниеПредставления.ПоляПоИменам.Получить(ВРег(ИмяПоля));
			Если ОписаниеПоля = Неопределено Тогда
				Возврат Неопределено;
			Иначе
				Поле.ТипЗначения = ОписаниеПоля.ТипЗначения; 
				Возврат Поле;
			КонецЕсли;	
		Иначе		
			ДоступнаяТаблица = Контекст.ДоступтныеТаблицыИБ.Найти(Источник.ИмяТаблицы); 
			Если ДоступнаяТаблица <> Неопределено Тогда
				ДоступноеПоле = ДоступнаяТаблица.Поля.Найти(ИмяПоля);
				Если ДоступноеПоле <> Неопределено Тогда
					Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
						Поле.ТипЗначения = ДоступноеПоле;  
						Возврат Поле;
					ИначеЕсли ДоступноеПоле <> Неопределено Тогда
						Поле.ТипЗначения =  ДоступноеПоле.ТипЗначения;   
						Возврат Поле;
					КонецЕсли;	
				Иначе
					Возврат Неопределено; 
				КонецЕсли; 
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		// TODO поиск в представлениях
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

Функция НайтиПолеВоВсехИсточниках(ИмяПоля, Контекст) 
	РезультатПоиска = Новый Структура("Поле, Источник");
	
	Поле = Неопределено;     
	Источник = Неопределено;
	Для Каждого КлючЗначение Из Контекст.ИспользуемыеТаблицы Цикл	
		ТекущееПоле = НайтиПолеВИсточнике(ИмяПоля, КлючЗначение.Значение.Источник, Контекст);	 
		Источник = КлючЗначение.Значение; 
		Если Поле <> Неопределено
			И ТекущееПоле <> Неопределено Тогда
			
			ВызватьИсключение "Не однозначное имя поля " + ИмяПоля;     
		ИначеЕсли ТекущееПоле <> Неопределено Тогда
			Поле = ТекущееПоле;	 
		КонецЕсли;	
	КонецЦикла;	
	
	РезультатПоиска.Поле = Поле;  
	РезультатПоиска.Источник = Источник;
	
	Возврат РезультатПоиска;
КонецФункции

Процедура ОбработатьВыражениеРазыменования(Выражение, Контекст, РассчитываемыеСвойства) 
	СтартовыйИндекс = 0; 
	ТекущийТип = Неопределено;
	Если ТипЗнч(Выражение.Элементы[0]) = Тип("Строка") Тогда
		ОбработатьОбращениеКПолюИсточника(Выражение.Элементы, Контекст, РассчитываемыеСвойства);
		ТекущийТип = РассчитываемыеСвойства.ТипЗначения; 
		СтартовыйИндекс = 1;    
	КонецЕсли;	
	
	Для Индекс = СтартовыйИндекс По Выражение.Элементы.ВГраница() Цикл  
		ЭлементРазыменования = Выражение.Элементы[Индекс];
		Если ЭлементРазыменования = "*" Тогда 
			// TODO как то отработать эту ситуацию   
			ВызватьИсключение "Выражение ИмяТаблицы.* пока не поддерживается";
		ИначеЕсли ТипЗнч(ЭлементРазыменования) = Тип("Строка") Тогда
			Если ТекущийТип = Неопределено Тогда
				ВызватьИсключение "Поле не найдено " + ЭлементРазыменования; 
			КонецЕсли;	  
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить что в табличной части есть нужные поля
				РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");
				Возврат;
			Иначе	
				ТекущийТип = ТипЭлементаРазыменованияИзОписанияТипов(ЭлементРазыменования, ТекущийТип, Контекст.ДоступтныеТаблицыИБ);		
			КонецЕсли;				
		ИначеЕсли ЭлементРазыменования.Тип = "ПриведениеТипа" Тогда
			ОбработатьВыражение(ЭлементРазыменования, Контекст, РассчитываемыеСвойства);   
			ТекущийТип = РассчитываемыеСвойства.ТипЗначения;
		ИначеЕсли ЭлементРазыменования.Тип = "СписокВыражений" Тогда
			ОбработатьСписокВыражений(ЭлементРазыменования, Контекст, РассчитываемыеСвойства);
			ТекущийТип = РассчитываемыеСвойства.ТипЗначения;
		ИначеЕсли ЭлементРазыменования.Тип = "ПоляВложеннойТаблицы" Тогда
			Если ТипЗнч(ТекущийТип) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
				// TODO проверить поля
				РассчитываемыеСвойства.ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений");  
				Возврат;
			Иначе
				ВызватьИсключение "Список полей не найден";
			КонецЕсли;	
		ИначеЕсли ЭлементРазыменования.Тип = "ПолеИсточника" Тогда 
			Источник = Контекст.ИсточникиПоИдентификаторам.Получить(ЭлементРазыменования.ИдентификаторИсточника);
			ТекущийТип = ТипПоляПоИмени(ЭлементРазыменования.ИмяПоля, Источник.Источник, Контекст);	
			РассчитываемыеСвойства.ПоляИсточников.Вставить(Строка(ЭлементРазыменования.ИдентификаторИсточника) + "." + ВРег(ЭлементРазыменования.ИмяПоля), Истина);
		Иначе
			ВызватьИсключение "Недопустимый узел";	
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТекущийТип = Неопределено Тогда
		// TODO ИСТОЧНИКИ оператора, или обойтись бещ генерации теуста выражения
		ВызватьИсключение "Поле " + ГенерацияТекстовЗапросов.ВыражениеВСтроку(Выражение,, Новый Массив()) + " не найдено";	
	КонецЕсли;
	
	РассчитываемыеСвойства.ТипЗначения = ТекущийТип;
КонецПроцедуры	  

Процедура ОбработатьСписокВыражений(СписокВыражений, Контекст, РассчитываемыеСвойства)
	Если СписокВыражений.Элементы.Количество() = 1 Тогда
		ОбработатьВыражение(СписокВыражений.Элементы[0], Контекст, РассчитываемыеСвойства);
	Иначе	
		Для Каждого Элемент Из СписокВыражений.Элементы Цикл
			ОбработатьВыражение(СписокВыражений.Элементы[0], Контекст, РассчитываемыеСвойства);	
		КонецЦикла;		
		РассчитываемыеСвойства.ТипЗначения =  Новый ОписаниеТипов("СписокЗначений");
	КонецЕсли;		
КонецПроцедуры	

Процедура ОбработатьОбращениеКПолюИсточника(ЭлементыРазыменования, Контекст, РассчитываемыеСвойства)
	ПервыйЭлементРазыменования = ЭлементыРазыменования[0]; 

	Если ТипЗнч(ПервыйЭлементРазыменования) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;	

	ПолеИсточникаЗапроса = ЭлементыМоделиЗапроса.НовыйПолеИсточника();

	Источник = Контекст.ИспользуемыеТаблицы.Получить(ВРег(ПервыйЭлементРазыменования));
	Если Источник = Неопределено Тогда
		Результат = НайтиПолеВоВсехИсточниках(ПервыйЭлементРазыменования, Контекст);
		Если Результат.Поле = Неопределено Тогда
			ВызватьИсключение "Таблица " + ПервыйЭлементРазыменования + " не найдена";   
		КонецЕсли;  

		ПолеИсточникаЗапроса.ИдентификаторИсточника = Результат.Источник.ИдентификаторИсточника;
		ПолеИсточникаЗапроса.ИмяПоля = Результат.Поле.Имя;

		РассчитываемыеСвойства.ТипЗначения = Результат.Поле.ТипЗначения;
		
		Если Результат.Источник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда
		
		КонецЕсли;	
	Иначе	  
		Если Источник = Неопределено Или ЭлементыРазыменования.Количество() = 1  Тогда
			ВызватьИсключение "Поле " + ПервыйЭлементРазыменования + " не найдео";		 
		КонецЕсли;	
		
		ПолеИсточникаЗапроса.ИдентификаторИсточника = Источник.ИдентификаторИсточника;	  
		ПолеИсточникаЗапроса.ИмяПоля = ЭлементыРазыменования[1];
		
		РассчитываемыеСвойства.ТипЗначения = ТипПоляПоИмени(ЭлементыРазыменования[1], Источник.Источник, Контекст);	
		ЭлементыРазыменования.Удалить(0);
	КонецЕсли; 
	
	РассчитываемыеСвойства.ПоляИсточников.Вставить(Строка(ПолеИсточникаЗапроса.ИдентификаторИсточника) + "." + ВРег(ПолеИсточникаЗапроса.ИмяПоля), Истина);
	
	ЭлементыРазыменования[0] = ПолеИсточникаЗапроса;
КонецПроцедуры	

Функция ТипЭлементаРазыменованияИзОписанияТипов(ЭлементРазыменования, ТекущийТип, ДоступтныеТаблицыИБ)
	НовыйТип = Неопределено;
	Для Каждого Тип Из ТекущийТип.Типы() Цикл  
		Если Тип = МодельЗапросаТипы.ПроизвольныйТип() Тогда
			Если НовыйТип = Неопределено Тогда
				НовыйТип = МодельЗапросаТипы.ОписаниеПроивзольногоТипа();
			Иначе
				ДобавляемыеТипы = Новый Массив;
				ДобавляемыеТипы.Добавить(МодельЗапросаТипы.ПроизвольныйТип());
				
				НовыйТип = Новый ОписаниеТипов(НовыйТип, ДобавляемыеТипы);
			КонецЕсли;	
			Продолжить;
		КонецЕсли;	
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);  
		Если МетаданныеТипа <> Неопределено Тогда
			ТаблицаИБ = ДоступтныеТаблицыИБ.Найти(МетаданныеТипа.ПолноеИмя());
			Если ТаблицаИБ <> Неопределено Тогда
				Поле = ТаблицаИБ.Поля.Найти(ЭлементРазыменования);
				Если Поле <> Неопределено Тогда
					Если НовыйТип = Неопределено Тогда
						НовыйТип = Поле.ТипЗначения;
					Иначе
						НовыйТип = Новый ОписаниеТипов(НовыйТип, Поле.ТипЗначения.Типы());
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если НовыйТип = Неопределено Тогда
		ВызватьИсключение "Поле не найдено " + ЭлементРазыменования;   
	КонецЕсли;
	
	Возврат НовыйТип;
КонецФункции	

// Заполнить псевдониым полей операторов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура ЗаполнитьПсевдонимыПолейОператоров(ЗапросВыбора)
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл
		Для Индекс = 1 По ЗапросВыбора.Колонки.ВГраница() Цикл
			Оператор.ВыбираемыеПоля[Индекс].Псевдоним = ЗапросВыбора.Колонки[Индекс].Имя;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Удалить поля типа null в операторах.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура УдалитьПоляТипаNullВОператорах(ЗапросВыбора)
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл
		ВГраница = Оператор.ВыбираемыеПоля.ВГраница();
		Для Индекс = 0 По ВГраница Цикл
			Поле = Оператор.ВыбираемыеПоля[ВГраница - Индекс];
			Если Поле.Выражение.Значение.Тип = "Константа"
				И Поле.Выражение.Значение.Значение = Null Тогда
				
				Оператор.ВыбираемыеПоля.Удалить(ВГраница - Индекс);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Заполнить используемые оператором поля.
// 
// Параметры:
//  Приемник - Соответствие из Строка, Булево
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса
Процедура ЗаполнитьИспользуемыеОператоромПоля(Приемник, Оператор)
	Для Каждого ВыбираемоеПоле Из Оператор.ВыбираемыеПоля Цикл
		Для Каждого КлючЗнаение Из ВыбираемоеПоле.Выражение.ПоляИсточников Цикл
			Приемник.Вставить(КлючЗнаение.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВыражениеГруппировки Из Оператор.Группировка.Элементы Цикл
		Для Каждого КлючЗнаение Из ВыражениеГруппировки.ПоляИсточников Цикл
			Приемник.Вставить(КлючЗнаение.Ключ, Истина);
		КонецЦикла;	
	КонецЦикла;
	
	Для Каждого ВыражениеМодели Из Оператор.Отбор Цикл
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПоляИсточников Цикл
			Приемник.Вставить(КлючЗнаение.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ВыражениеМодели Из Оператор.ОтборСгруппированных Цикл
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПоляИсточников Цикл
			Приемник.Вставить(КлючЗнаение.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьТипПараметраЗапроса(РассчитываемыеСвойства, Выражение, ТипЗначения, ЭтоСписокЗначений = Ложь)
	Если ТипЗначения = Неопределено 
		Или Не Выражение.Тип = "ПараметрЗапроса" Тогда	
		
		Возврат;
	КонецЕсли;
	ОписаниеПараметра = РассчитываемыеСвойства.ПараметрыЗапроса.Получить(ВРег(Выражение.Имя));
	ОписаниеПараметра.ТипЗначения = ТипЗначения;
	ОписаниеПараметра.ЭтоСписокЗначений = ЭтоСписокЗначений;
КонецПроцедуры

#КонецОбласти