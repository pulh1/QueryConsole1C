// TODO автоматическая генерация псевдонимов для источников и полей

#Область СлужебныеПроцедурыИФункции

Функция КонтекстОбработкиВыражения() Экспорт
	Контекст = Новый Структура;
	
	ВспомогательнаяСхема = Новый СхемаЗапроса;

	Контекст.Вставить("ИндексЗапросаПакета", -1);
	Контекст.Вставить("ДоступныеТаблицыИБ", ВспомогательнаяСхема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).ДоступныеТаблицы);
	Контекст.Вставить("ИспользуемыеТаблицы", Новый Соответствие); 
	Контекст.Вставить("ИсточникиПоИдентификаторам", Новый Соответствие); 
	Контекст.Вставить("ЗаполнятьОписаниеВременныхТаблиц", Ложь);
	Контекст.Вставить("ОписанияВременныхТаблиц", Новый Соответствие); 
	Контекст.Вставить("ДоступныПсевдонимыИсточников", Истина); 
	Контекст.Вставить("РазрешеноСозданиеВТ", Истина);
	Контекст.Вставить("РазрешеноУпорядочивание", Истина);
	Контекст.Вставить("РазрешеныИтоги", Истина);
	Контекст.Вставить("ДоступныИсточникиВнешнегоЗапроса", Истина);
	Контекст.Вставить("ИдентификаторыИсточниковВнешнегоЗапроса", Новый Соответствие());
	Контекст.Вставить("__СхемаЗапрос", ВспомогательнаяСхема);
	
	Возврат Контекст;
КонецФункции

Функция КонтекстОбработкиЗапроса() Экспорт 
	Контекст = КонтекстОбработкиВыражения();
	
	Контекст.ЗаполнятьОписаниеВременныхТаблиц = Истина;
	
	Возврат Контекст;
КонецФункции	

Функция КонтекстОбработкиВложенногоЗапроса(ТекущийКонтекст, ДоступныИсточникиВнешнегоЗапроса = Ложь) Экспорт  
	Контекст = КонтекстОбработкиЗапроса();
	Контекст.ИндексЗапросаПакета = ТекущийКонтекст.ИндексЗапросаПакета;
	Контекст.ДоступныеТаблицыИБ = ТекущийКонтекст.ДоступныеТаблицыИБ;
	Контекст.ОписанияВременныхТаблиц = ТекущийКонтекст.ОписанияВременныхТаблиц;
	Контекст.РазрешеноСозданиеВТ = Ложь;
	Контекст.РазрешеноУпорядочивание = Ложь;
	Контекст.РазрешеныИтоги = Ложь;
	
	Контекст.__СхемаЗапрос = ТекущийКонтекст.__СхемаЗапрос;
	
	Если ДоступныИсточникиВнешнегоЗапроса Тогда
		Для Каждого КлючЗначение Из ТекущийКонтекст.ИспользуемыеТаблицы Цикл
			Контекст.ИспользуемыеТаблицы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ТекущийКонтекст.ИсточникиПоИдентификаторам Цикл
			Контекст.ИсточникиПоИдентификаторам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			Контекст.ИдентификаторыИсточниковВнешнегоЗапроса.Вставить(КлючЗначение.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контекст;
КонецФункции	

Функция КонтекстОбработкиПараметровВиртуальнойТаблицы(ТекущийКонтекст, ИдентификаторИсточника) Экспорт  
	Контекст = КонтекстОбработкиЗапроса();
	Контекст.ИндексЗапросаПакета = ТекущийКонтекст.ИндексЗапросаПакета;
	Контекст.ДоступныеТаблицыИБ = ТекущийКонтекст.ДоступныеТаблицыИБ;
	Контекст.ОписанияВременныхТаблиц = ТекущийКонтекст.ОписанияВременныхТаблиц;
	Контекст.ДоступныПсевдонимыИсточников = Ложь;
	Контекст.__СхемаЗапрос = ТекущийКонтекст.__СхемаЗапрос;
	
	Источник = ТекущийКонтекст.ИсточникиПоИдентификаторам[ИдентификаторИсточника];
	Контекст.ИспользуемыеТаблицы.Вставить(ВРег(Источник.Источник.Псевдоним), Источник);
	Контекст.ИсточникиПоИдентификаторам.Вставить(Источник.ИдентификаторИсточника, Источник);
	
	Возврат Контекст;
КонецФункции	

// Разобрать запрос.
// 
// Параметры:
//  ТекстЗапроса - Строка 
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиЗапроса.НовыйПакетЗапросов
//
Функция РазобратьЗапрос(ТекстЗапроса) Экспорт
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();

	МодельЗапроса = Парсер.Разобрать(ТекстЗапроса);
	ОбработатьМодельЗапроса(МодельЗапроса);
	
	Возврат МодельЗапроса;
КонецФункции

Функция РазобратьТекстВложенногоЗапроса(ТекстЗапроса, СписокДоступныхВТ, ИндексЗапросаПакета) Экспорт 
	Парсер = КонструкторЗапросовПовтИсп.ПарсерЗапросов();
	МодельЗапроса = Парсер.Разобрать(ТекстЗапроса); 
	
	Контекст = КонтекстОбработкиЗапроса(); 
	Контекст.РазрешеноУпорядочивание = Ложь;
	Контекст.РазрешеноСозданиеВТ = Ложь;
	Контекст.РазрешеныИтоги = Ложь;
	
	Контекст.ИндексЗапросаПакета = ИндексЗапросаПакета; 
	
	Для Каждого ОписаниеВТ Из СписокДоступныхВТ Цикл
		Контекст.ОписанияВременныхТаблиц.Вставить(ВРег(ОписаниеВТ.Имя), ОписаниеВТ);
	КонецЦикла;	 
	ОбработатьЗапрос(МодельЗапроса.Элементы[0], Контекст);
	
	// TODO
	//проверка что в пакете только один запрос и это запрос выбора
	
	Возврат МодельЗапроса.Элементы[0];
КонецФункции	

// Обработать модель запроса.
// 
// Параметры:
//  ПакетЗапросов - см.ЭлементыМоделиЗапроса.НовыйПакетЗапросов
Процедура ОбработатьМодельЗапроса(ПакетЗапросов) Экспорт 
	Контекст = КонтекстОбработкиЗапроса();
	
	ОписанияДоступныхВТ = Контекст.ОписанияВременныхТаблиц;
	
	Индекс = 0;
	Для Каждого Запрос Из ПакетЗапросов.Элементы Цикл
		Контекст.ИндексЗапросаПакета = Индекс;
		Если Запрос.Тип = "ЗапросУничтожения" Тогда 
			ОписаниеВТ =  ОписанияДоступныхВТ.Получить(ВРег(Запрос.ИмяТаблицы));
			Если ОписаниеВТ <> Неопределено Тогда
				ОписаниеВТ.ИндексЗапросаУничтожения = Индекс;
				ОписанияДоступныхВТ.Удалить(ВРег(Запрос.ИмяТаблицы)); 
				
				Запрос.ОписаниеВТ = ОписаниеВТ;
			КонецЕсли;	  
		Иначе
			ЭтоЗапросСозданияВТ = ЗначениеЗаполнено(Запрос.Операторы[0].__ТаблицаДляПомещения);
			Контекст.РазрешеныИтоги = Ложь;
			Контекст.РазрешеноУпорядочивание = Не ЭтоЗапросСозданияВТ;
			Контекст.РазрешеныИтоги = Не ЭтоЗапросСозданияВТ;
			
			ОбработатьЗапрос(Запрос, Контекст);	
			Если ЭтоЗапросСозданияВТ  Тогда
				Если ОписанияДоступныхВТ.Получить(ВРег(Запрос.ТаблицаДляПомещения)) <> Неопределено Тогда
					ВызватьИсключение "Временная таблица " + Запрос.ТаблицаДляПомещения + " уже существует";
				КонецЕсли;
				ОписаниеВТ = МодельЗапросаУтилиты.ОписаниеВременнойТаблицы(Запрос, Индекс);
				ОписанияДоступныхВТ.Вставить(ВРег(Запрос.ТаблицаДляПомещения), ОписаниеВТ);
				Запрос.ОписаниеВТ = ОписаниеВТ;
			КонецЕсли;	
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;	
КонецПроцедуры	  

Процедура ОбработатьЗапрос(Запрос, Контекст, РассчитываемыеСвойства = Неопределено) Экспорт
	Если Не Контекст.РазрешеноСозданиеВТ И ЗначениеЗаполнено(Запрос.Операторы[0].__ТаблицаДляПомещения) Тогда
		ВызватьИсключение "Создание временной таблицы во вложенном запросе запрещено.";
	КонецЕсли;
	
	Запрос.ТаблицаДляПомещения = Запрос.Операторы[0].__ТаблицаДляПомещения;
	Запрос.ВыбиратьРазрешенные = Запрос.Операторы[0].__ВыбиратьРазрешенные;
	
	ИндексОператора = 0;
	Для Каждого Оператор Из Запрос.Операторы Цикл
		ОбработатьОператор(Оператор, Контекст, РассчитываемыеСвойства);	
		Запрос.ИспользуютсяИсточникиВнешнегоЗапроса = Запрос.ИспользуютсяИсточникиВнешнегоЗапроса
			Или Оператор.__ИспользуютсяИсточникиВнешнегоЗапроса;
		
		Если ИндексОператора = 0  Тогда   
			Запрос.ТаблицаДляПомещения = Оператор.__ТаблицаДляПомещения;
			Запрос.ВыбиратьРазрешенные = Оператор.__ВыбиратьРазрешенные;
		ИначеЕсли ЗначениеЗаполнено(Оператор.__ТаблицаДляПомещения) Тогда
			//TODO вызвать исключение
		КонецЕсли;		
			
		ИндексОператора = ИндексОператора +  1;
	КонецЦикла;	
	
	// TODO проверка что в операторах одинаковое количество полей
	// проверка уникальности псевдонимов
	ЗаполнитьКолонкиЗапроса(Запрос, Контекст);  
	
	ОбработатьЭлементыПорядка(Запрос, Запрос.Порядок, Контекст);
	ОбработатьКонтрольныеТочкиИтогов(Запрос, Запрос.КонтрольныеТочкиИтогов, Контекст);
	ОбработатьПоляИтогов(Запрос, Запрос.ВыраженияИтогов, Контекст);
	ОбработатьИндексируемыеПоля(Запрос, Запрос.Индекс.Элементы, Контекст);
	
	Если Запрос.Операторы.Количество() > 1 Тогда
		ЗаполнитьПсевдонимыПолейОператоров(Запрос);
		УдалитьПоляТипаNullВОператорах(Запрос);	
	КонецЕсли;
КонецПроцедуры	    

Процедура ОбработатьЭлементыПорядка(ЗапросВыбора, ЭлементыПорядка, Контекст) Экспорт  
	Если Не Контекст.РазрешеноУпорядочивание
		И ЗначениеЗаполнено(ЭлементыПорядка) 
		И ЗапросВыбора.Операторы[0].КоличествоПолучаемыхЗаписей = Неопределено Тогда
		
		// BSLLS:LineLength-off
		ВызватьИсключение "Во вложенных запросах и запросах создания временных таблиц, упорядочивание можно использовать только совместно с выбрать ПЕРВЫЕ N записей";
		// BSLLS:LineLength-on
	КонецЕсли;
	
	// TODO тоже самое проверить для вложенного запроса
	
	ЕдинственныйОператор = ЗапросВыбора.Операторы.Количество() = 1;
	
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Выражение = ЭлементПорядка.Выражение.Значение;
		Если Выражение.Тип = "Константа"
			И ТипЗнч(Выражение.Значение) = Тип("Число") Тогда
			
			Если Цел(Выражение.Значение) <> Выражение.Значение
				Или Выражение.Значение < 1 
				Или Выражение.Значение > ЗапросВыбора.Колонки.Количество() Тогда
				
				// BSLLS:LineLength-off
				ВызватьИсключение "В блоке УПОРЯДОЧИТЬ можно использовать только целые числа больше 0 и не превышающие количество выбираемых полей запроса";	
				// BSLLS:LineLength-on
			КонецЕсли;	
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = ЗапросВыбора.Колонки[Выражение.Значение - 1].Идентификатор;		 	
			ЭлементПорядка.Выражение.Значение = СсылкаНаКолонку;			
		ИначеЕсли Выражение.Тип = "Разыменование"
			И Выражение.Элементы.Количество() = 1 
			И ТипЗнч(Выражение.Элементы[0]) = Тип("Строка")
			И ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0])) <> Неопределено Тогда  
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = ЗапросВыбора.КолонкиПоПсевдонимам[ВРег(Выражение.Элементы[0])].Идентификатор;		 	
			ЭлементПорядка.Выражение.Значение = СсылкаНаКолонку;				
		Иначе
			ОбработатьВыбираемоеПолеОператора(ЭлементПорядка.Выражение, Контекст);
			Если Не ЕдинственныйОператор Тогда
				// BSLLS:LineLength-off
				ВызватьИсключение "При объединении нескольких запросов, в блоке УПОРЯДОЧИТЬ необходимо указывать псевдонимы выбираемых полей";
				// BSLLS:LineLength-on
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

// Обработать контрольные точки  итогов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  КонтрольныеТочки - Массив из см. ЭлементыМоделиЗапроса.НовыйКонтрольнаяТочкаИтогов
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьКонтрольныеТочкиИтогов(ЗапросВыбора, КонтрольныеТочки, Контекст) Экспорт
	Если Не Контекст.РазрешеныИтоги
		И ЗначениеЗаполнено(ЗапросВыбора.КонтрольныеТочкиИтогов) Тогда
			
		ВызватьИсключение "Итоги не могут использоваться во вложенных запросах и при создании временных таблиц";
	КонецЕсли;
	
	ИменаКонтрольныхТочек = Новый Соответствие();
	Для Каждого КонтрольнаяТочка Из КонтрольныеТочки Цикл
		Если КонтрольнаяТочка.ИмяКолонки <> Неопределено Тогда
			Если ИменаКонтрольныхТочек.Получить(ВРег(КонтрольнаяТочка.ИмяКолонки)) = Истина Тогда
				ТекстИсключения = "Имя контрольной точки итогов " + КонтрольнаяТочка.ИмяКолонки + " уже используется";
				ВызватьИсключение ТекстИсключения;
			Иначе
				ИменаКонтрольныхТочек.Вставить(ВРег(КонтрольнаяТочка.ИмяКолонки), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Выражение = КонтрольнаяТочка.Выражение.Значение;
		Если Выражение.Тип = "Разыменование"
			И Выражение.Элементы.Количество() = 1 
			И ТипЗнч(Выражение.Элементы[0]) = Тип("Строка")
			И ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0])) <> Неопределено Тогда  
			
			Колонка = ЗапросВыбора.КолонкиПоПсевдонимам[ВРег(Выражение.Элементы[0])];
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();	
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;		 	
			КонтрольнаяТочка.Выражение.Значение = СсылкаНаКолонку;	
			
			КонтрольнаяТочка.Выражение.ТипЗначения = Колонка.ТипЗначения;			
		Иначе
			ОбработатьВыбираемоеПолеОператора(КонтрольнаяТочка.Выражение, Контекст);
			Если КонтрольнаяТочка.Выражение.ИспользуетсяАгрегатнаяФункция Тогда
				ТекстИсключения = "Использование агрегатных функций в контрольных точках итогов не допустимо";
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ИндексПоля = МодельЗапросаУтилиты.НайтиПолеОператораПоВыражению(ЗапросВыбора.Операторы[0], КонтрольнаяТочка.Выражение);
			Если ИндексПоля <> Неопределено Тогда
				СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
				СсылкаНаКолонку.Идентификатор = ЗапросВыбора.Колонки[ИндексПоля].Идентификатор;
				КонтрольнаяТочка.Выражение.Значение = СсылкаНаКолонку;
				КонтрольнаяТочка.Выражение.ТипЗначения = ЗапросВыбора.Колонки[ИндексПоля].ТипЗначения;
			КонецЕсли;
		КонецЕсли;
			
		ОбработатьДополнениеПериодамиКонтрольнойТочкиИтогов(КонтрольнаяТочка);	
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьДополнениеПериодамиКонтрольнойТочкиИтогов(КонтрольнаяТочка) Экспорт
	Если Не ЗначениеЗаполнено(КонтрольнаяТочка.ТипДополненияПериодами) Тогда
		Возврат;
	КонецЕсли;
	Если Не МодельЗапросаТипы.ЭтоПолеТипа(КонтрольнаяТочка.Выражение.ТипЗначения, Тип("Дата")) Тогда
		ТекстИсключения = "Некорректный тип контрольной точки итогов с дополнением периодами";
		ВызватьИсключение ТекстИсключения;				
	КонецЕсли;	
			
	ОбработатьПериодДополненияКонтрольнойТочкиИтогов(КонтрольнаяТочка);
КонецПроцедуры

Процедура ОбработатьПериодДополненияКонтрольнойТочкиИтогов(КонтрольнаяТочка)
	Контекст = КонтекстОбработкиВыражения();
	Контекст.ДоступныеТаблицыИБ = Новый Массив();
	
	Если ЗначениеЗаполнено(КонтрольнаяТочка.НачалоПериодаДополнения) Тогда 
		ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
		ВыражениеМодели.Значение = КонтрольнаяТочка.НачалоПериодаДополнения;	
		ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(ВыражениеМодели.ТипЗначения, Тип("Дата")) Тогда
			ВызватьИсключение "Неверный тип выражения поля ДатаНачалаДополнения контрольной точки итогов";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтрольнаяТочка.КонецПериодаДополнения) Тогда 
		ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
		ВыражениеМодели.Значение = КонтрольнаяТочка.КонецПериодаДополнения;	
		ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(ВыражениеМодели.ТипЗначения, Тип("Дата")) Тогда
			ВызватьИсключение "Неверный тип выражения поля КонецПериодаДополнения контрольной точки итогов";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработать поля итогов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
//  ПоляИтогов - Массив из см. ЭлементыМоделиЗапроса.НовыйПолеЗапроса
//  Контекст - см. КонтекстОбработкиВыражения
Процедура ОбработатьПоляИтогов(ЗапросВыбора, ПоляИтогов, Контекст) Экспорт
	Если Не Контекст.РазрешеныИтоги
		И ЗначениеЗаполнено(ПоляИтогов) Тогда
			
		ВызватьИсключение "Итоги не могут использоваться во вложенных запросах и при создании временных таблиц";
	КонецЕсли;
	
	ИменаПолейИтогов  = Новый Соответствие();
	Для Каждого ПолеИтогов Из ПоляИтогов Цикл
		Если ПолеИтогов.Псевдоним <> Неопределено Тогда
			Если ИменаПолейИтогов.Получить(ВРег(ПолеИтогов.Псевдоним)) = Истина Тогда
				ТекстИсключения = "Псевдоним поля итогов " + ПолеИтогов.Псевдоним + " уже используется";
				ВызватьИсключение ТекстИсключения;
			Иначе
				ИменаПолейИтогов.Вставить(ВРег(ПолеИтогов.Псевдоним), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Выражение = ПолеИтогов.Выражение.Значение; 
		Если Выражение.Тип <> "АгрегатнаяФункция"
			И Выражение.Тип <> "АгрегатнаяФункцияКоличество" Тогда
				
			ТекстИсключения = "В выражениях полей итогов обязательно должны использоваться агрегатные функции";
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
				
		Аргумент = Выражение.Аргумент;
		Если Аргумент.Тип <> "Разыменование" Тогда
			ВызватьИсключение "Некорректное выражение для поля итогов. Ожидается имя поля запроса";
		КонецЕсли;
		Для Каждого ЭлементРазыменования Из Аргумент.Элементы Цикл
			Если ТипЗнч(ЭлементРазыменования) <> Тип("Строка") Тогда
				ВызватьИсключение "Некорректное выражение для поля итогов. Ожидается имя поля запроса";
			КонецЕсли;	
		КонецЦикла;
		
		Если Аргумент.Элементы.Количество() = 1 Тогда
			Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Аргумент.Элементы[0]));
			Если Колонка = Неопределено Тогда
				ТекстИсключения = "Поле запроса с именем " + Аргумент.Элементы[0] + " не найдена"; 
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
			Выражение.Аргумент = СсылкаНаКолонку;
		Иначе
			ВыражениеДляПоиска = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеДляПоиска.Значение = Аргумент;
			ОбработатьВыражение(ВыражениеДляПоиска.Значение, Контекст, ВыражениеДляПоиска);
			ИндексПоля = МодельЗапросаУтилиты.НайтиПолеОператораПоВыражению(ЗапросВыбора.Операторы[0], ВыражениеДляПоиска);
			Если ИндексПоля = Неопределено Тогда
				ВызватьИсключение "Не корректное выражения для поля итогов. Ожидается имя поля запроса";
			КонецЕсли;
			
			СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
			Колонка = ЗапросВыбора.Колонки[ИндексПоля];
			СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
			Выражение.Аргумент = СсылкаНаКолонку;
		КонецЕсли;	
		
		Если Не МодельЗапросаТипы.ЭтоПолеТипа(Колонка.ТипЗначения, Тип("Число"))
			И Выражение.Тип <> "АгрегатнаяФункцияКоличество" Тогда
			
			ВызватьИсключение "Не верный тип поля для агрегатной функции";
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьИндексируемыеПоля(ЗапросВыбора, ИндексируемыеПоля, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(ЗапросВыбора.ТаблицаДляПомещения)
		И ЗначениеЗаполнено(ИндексируемыеПоля) Тогда
		
		ВызватьИсключение "Индексация возможна только при создании временных таблицы";	
	КонецЕсли;
	
	Для Индекс = 0 По ИндексируемыеПоля.ВГраница() Цикл	
		Выражение = ИндексируемыеПоля[Индекс]; 
	
		Если Выражение.Тип <> "Разыменование" 
			Или Выражение.Элементы.Количество() <> 1
			Или ТипЗнч(Выражение.Элементы[0]) <> Тип("Строка") Тогда
			ВызватьИсключение "Не корректное выражения для колонки индекса. Ожидается имя поля запроса";
		КонецЕсли;
		Колонка = ЗапросВыбора.КолонкиПоПсевдонимам.Получить(ВРег(Выражение.Элементы[0]));
		Если Колонка = Неопределено Тогда
			ТекстИсключения = "Поле запроса с именем " + Выражение.Элементы[0] + " не найдена"; 
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		СсылкаНаКолонку = ЭлементыМоделиЗапроса.НовыйСсылкаНаКолонкуЗапроса();
		СсылкаНаКолонку.Идентификатор = Колонка.Идентификатор;
		ИндексируемыеПоля[Индекс] = СсылкаНаКолонку; 
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьКолонкиЗапроса(Запрос, Контекст) Экспорт
	КоличествоПолейВПервомОператоре = 0;
	ЭтоПервыйОператор = Истина;
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Если ЭтоПервыйОператор Тогда 
			КоличествоПолейВПервомОператоре = Оператор.ВыбираемыеПоля.Количество();
			НомерПоля = 1;
			Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл
				Если Поле.СодержитСимволВсеПоля Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Поле.Псевдоним) 
					И Поле.Выражение.Значение.Тип <> "ВыражениеВсеПоля" Тогда
					
					Поле.Псевдоним = МодельЗапросаУтилиты.СгенерироватьПсевдонимВыбираемогоПоля(Поле.Выражение, Оператор);
				КонецЕсли;
				Колонка = ЭлементыМоделиЗапроса.НовыйКолонкаЗапроса();
				Колонка.Имя = Поле.Псевдоним;
				Колонка.ТипЗначения = Поле.Выражение.ТипЗначения; 	
				Запрос.Колонки.Добавить(Колонка);
				Запрос.КолонкиПоПсевдонимам.Вставить(ВРег(Колонка.Имя), Колонка);   
				НомерПоля = НомерПоля + 1;
			КонецЦикла;	 
			ЭтоПервыйОператор = Ложь;
		Иначе
			Если Оператор.ВыбираемыеПоля.Количество() <> КоличествоПолейВПервомОператоре Тогда
				ВызватьИсключение "Разное количество полей в объединяемых запросах"; 
			КонецЕсли;	
			
			ИндексПоля = 0;
			Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл
				Если Поле.СодержитСимволВсеПоля Тогда
					Продолжить;
				КонецЕсли;
				
				Колонка = Запрос.Колонки[ИндексПоля]; 
				Колонка.ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, Поле.Выражение.ТипЗначения.Типы()); 
				Поле.Псевдоним = Колонка.Имя;  
				ИндексПоля = ИндексПоля + 1;
			КонецЦикла;	 					
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ПолеИсточникаИзВыражения(Выражение) Экспорт 
	Если Выражение.Значение.Тип = "Разыменование"
		И Выражение.Значение.Элементы.Количество() = 1
		И ТипЗнч(Выражение.Значение.Элементы[0]) = Тип("Структура")
		И Выражение.Значение.Элементы[0].Тип = "ПолеИсточника" Тогда
		
		Возврат Выражение.Значение.Элементы[0];
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

// Обработать оператор.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
//  РассчитываемыеСвойства - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
Процедура ОбработатьОператор(Оператор, Контекст, РассчитываемыеСвойства = Неопределено)
	// TODO при заполнении проверить повторяющиеся псевдонимы
	// TODO заполнить поля вложенных запросов
	// но во вложенных запросах источниках они не доступны, доступны во вложенных запросах испрорльзуемых в условиях соединения и в блоке ГДЕ(наверное) 
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		ОбработкаПредставлениеЗапросов.ОбработатьИсточникЗапроса(Источник, Контекст);		
	КонецЦикла;
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Если Источник.Источник.Тип = "ИсточникДанныхВложенныйЗапрос" Тогда
			ВложенныйКонтекст = КонтекстОбработкиВложенногоЗапроса(Контекст);
			ОбработатьЗапрос(Источник.Источник.ЗапросВыбора, ВложенныйКонтекст);
		ИначеЕсли Источник.Источник.Тип = "ИсточникДанныхВременнаяТаблица" Тогда
			ОписаниеВТ = Контекст.ОписанияВременныхТаблиц.Получить(ВРег(Источник.Источник.ИмяТаблицы));
			Если ОписаниеВТ = Неопределено Тогда
				Источник.Источник.ОписаниеВТ = ЭлементыМоделиЗапроса.НовыйОписаниеВременнойТаблицы();	
				Источник.Источник.ОписаниеВТ.СозданаВЭтомПакете = Ложь;	
				Источник.Источник.ОписаниеВТ.Имя = Источник.Источник.ИмяТаблицы;	
			Иначе
				Источник.Источник.ОписаниеВТ = ОписаниеВТ;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник.Источник.Псевдоним) Тогда
			Источник.Источник.Псевдоним = МодельЗапросаУтилиты.СгенерироватьПсевдонимИсточника(Источник.Источник.ИмяТаблицы, Оператор);
		КонецЕсли;
		
		Контекст.ИспользуемыеТаблицы.Вставить(ВРег(Источник.Источник.Псевдоним), Источник);
		Контекст.ИсточникиПоИдентификаторам.Вставить(Источник.ИдентификаторИсточника, Источник);
		
		Если Источник.Источник.Тип = "ИсточникДанныхТаблица" Тогда	
			ОбработатьПараметрыВиртуальнойТаблицы(Источник, Контекст);
		КонецЕсли;
	КонецЦикла;
	
	// TODO если в полях или упорядочивании используются агрегатные функции то проверям группировку
	
	ОбработатьГруппировку(Оператор.Группировка, Контекст);
	ОбработатьВыбираемыеПоляОператора(Оператор, Контекст); 
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		ОбработатьСоединения(Источник.Соединения, Контекст);
	КонецЦикла;
	
	ОбработатьОтбор(Оператор, Контекст);
	ОбработатьОтборСгруппированных(Оператор, Контекст);
	
	Если РассчитываемыеСвойства <> Неопределено Тогда
		ЗаполнитьРасчитываемыеСвойстваПоОператоруОператоруя(РассчитываемыеСвойства, Оператор);
	КонецЕсли;
КонецПроцедуры	

// Обработать соединения.
// 
// Параметры:
//  Соединения - Массив из см. ЭлементыМоделиЗапроса.НовыйСоединениеИсточника
//  Контекст - см. Контекст
Процедура ОбработатьСоединения(Соединения, Контекст)
	Для Каждого Соединение Из Соединения Цикл
		ОбработатьВыражениеУсловие(Соединение.Условие, Контекст, Ложь);	
	КонецЦикла;	
КонецПроцедуры	

// Обработать отбор.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
Процедура ОбработатьОтбор(Оператор, Контекст)
	Если Оператор.Отбор <> Неопределено Тогда
		МассивВыражений = УсловиеВМассивВыраженийПоИ(Оператор.Отбор.Значение);
		Оператор.Отбор = Новый Массив();
		Для Каждого ВыражениеУсловие Из МассивВыражений Цикл
			ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеМодели.Значение = ВыражениеУсловие;
			Оператор.Отбор.Добавить(ВыражениеМодели);
			ОбработатьВыражениеУсловие(ВыражениеМодели, Контекст, Ложь);	
		КонецЦикла;
	Иначе
		Оператор.Отбор = Новый Массив();	
	КонецЕсли;
КонецПроцедуры	

// Обработать отбор сгруппированных.
// 
// Параметры:
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса 
//  Контекст - см. Контекст
Процедура ОбработатьОтборСгруппированных(Оператор, Контекст)
	Если Оператор.ОтборСгруппированных <> Неопределено Тогда
		МассивВыражений = УсловиеВМассивВыраженийПоИ(Оператор.ОтборСгруппированных.Значение);
		Оператор.ОтборСгруппированных = Новый Массив();
		Для Каждого ВыражениеУсловие Из МассивВыражений Цикл
			ВыражениеМодели = ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса();
			ВыражениеМодели.Значение = ВыражениеУсловие;
			Оператор.ОтборСгруппированных.Добавить(ВыражениеМодели);
			ОбработатьВыражениеУсловие(ВыражениеМодели, Контекст, Истина);	
			// todo проверить корректное использование агренатных функций
		КонецЦикла;
	Иначе
		Оператор.ОтборСгруппированных = Новый Массив();
	КонецЕсли;
КонецПроцедуры	

// Обработать выражение условие.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
//  Контекст - см. Контекст
//  ПоддерживаетАгрегатныеФункции - Булево - Поддерживает агрегатные функции
Процедура ОбработатьВыражениеУсловие(Выражение, Контекст, ПоддерживаетАгрегатныеФункции = Ложь) Экспорт
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);	
	МодельЗапросаТипы.ПроверитьТипВыраженияУсловия(Выражение.ТипЗначения, Выражение);
	
	Если Выражение.ИспользуетсяАгрегатнаяФункция И Не ПоддерживаетАгрегатныеФункции Тогда
		ТекстИсключения = "Использование агрегатных функций в данном блоке запрещено";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

// Выражение в массив выражений по И.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйБинарнаяОперация
// 
// Возвращаемое значение:
// 	Массив из Произвольный 
Функция УсловиеВМассивВыраженийПоИ(Выражение) 
	МассивВыражений = Новый Массив();
	ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение);
	
	Возврат МассивВыражений;		
КонецФункции

Процедура ОбработатьПараметрыВиртуальнойТаблицы(Источник, Контекст)
	Если Не ЗначениеЗаполнено(Источник.Источник.Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОбработкиПараметров = КонтекстОбработкиПараметровВиртуальнойТаблицы(Контекст, Источник.ИдентификаторИсточника);
	ЭтоТаблицаОборотовРегистраНакопления = СтрНачинаетсяС(ВРег(Источник.Источник.ИмяТаблицы), ВРег("РегистрНакопления."))
		И СтрЗаканчиваетсяНа(ВРег(Источник.Источник.ИмяТаблицы), ВРег(".Обороты"));
	
	Для Индекс = 0 По Источник.Источник.Параметры.ВГраница() Цикл
		ВыражениеПараметра = Источник.Источник.Параметры[Индекс];
		// TODO нужна полноценная валидация параметров в зависимости от типа таблицы
		Если Индекс <> 2 Или Не ЭтоТаблицаОборотовРегистраНакопления Тогда
			ОбработатьВыражение(ВыражениеПараметра.Значение, КонтекстОбработкиПараметров, ВыражениеПараметра);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция УсловиеИзМассиваВыражений(МассивВыражений, Знач ПоследнийИндекс = Неопределено) Экспорт
	Если ПоследнийИндекс = Неопределено Тогда
		ПоследнийИндекс = МассивВыражений.ВГраница();
	КонецЕсли;
	
	Если ПоследнийИндекс = 0 Тогда
		Если МассивВыражений[0].Тип = "ВыражениеМоделиЗапроса" Тогда
			Возврат МассивВыражений[0].Значение;
		Иначе
			Возврат МассивВыражений[0];
		КонецЕсли;
	КонецЕсли;
		
	Выражение = ЭлементыМоделиЗапроса.НовыйБинарнаяОперация();
	Выражение.Операция = "И";
	Если МассивВыражений[0].Тип = "ВыражениеМоделиЗапроса" Тогда
		Выражение.ПраваяЧасть = МассивВыражений[ПоследнийИндекс].Значение;
	Иначе
		Выражение.ПраваяЧасть = МассивВыражений[ПоследнийИндекс];
	КонецЕсли;
	ПоследнийИндекс = ПоследнийИндекс - 1;
	Выражение.ЛеваяЧасть = УсловиеИзМассиваВыражений(МассивВыражений, ПоследнийИндекс);
	
	Возврат Выражение;
КонецФункции

Процедура ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение)
	Если Выражение.Тип <> "БинарнаяОперация"
		Или Выражение.Операция <> "И" Тогда
		
		МассивВыражений.Добавить(Выражение);
	Иначе
		ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение.ЛеваяЧасть);	
		ЗаполнитьМассивВыраженийПоИ(МассивВыражений, Выражение.ПраваяЧасть);	
	КонецЕсли;			
КонецПроцедуры

Процедура ОбработатьВыбираемыеПоляОператора(Оператор, Контекст)
	Контекст.ДоступныИсточникиВнешнегоЗапроса = Ложь;
	Для Каждого Поле Из Оператор.ВыбираемыеПоля Цикл     
		ОбработатьВыражениеВыбираемогоПоля(Поле.Выражение, Поле.Псевдоним, Контекст);	
		Если Поле.Выражение.Значение.Тип = "ВыражениеВсеПоля"
			Или (Поле.Выражение.Значение.Тип = "Разыменование"
			И ТипЗнч(Поле.Выражение.Значение.Элементы[Поле.Выражение.Значение.Элементы.ВГраница()]) = Тип("Структура")
			И Поле.Выражение.Значение.Элементы[Поле.Выражение.Значение.Элементы.ВГраница()].Тип = "НовыйВыражениеВсеПоляИсточника") Тогда
			
			Поле.СодержитСимволВсеПоля = Истина;
		КонецЕсли;	
	КонецЦикла;
	Контекст.ДоступныИсточникиВнешнегоЗапроса = Истина;
КонецПроцедуры	

Процедура ОбработатьВыбираемоеПолеОператора(Выражение, Контекст) Экспорт
	// TODO Удалить и сделать отдельыне методы
	// TODO поддержать "*" и Источник.*
	
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);  
	// TODO проверка типа, проверка группировок
КонецПроцедуры	

Процедура ОбработатьГруппировку(Группировка, Контекст)
	Контекст.ДоступныИсточникиВнешнегоЗапроса = Ложь;
	Для Каждого ЭлементГруппировки Из Группировка.Элементы Цикл
		ОбработатьВыражениеГруппировки(ЭлементГруппировки, Контекст);	
	КонецЦикла;	
	Контекст.ДоступныИсточникиВнешнегоЗапроса = Истина;
КонецПроцедуры	

Процедура ОбработатьВыражениеГруппировки(ВыражениеГруппировки, Контекст) Экспорт 
	// TODO проверить что не используются агр. функции
	ОбработатьВыражение(ВыражениеГруппировки.Значение, Контекст, ВыражениеГруппировки);
КонецПроцедуры	

Процедура ОбработатьУсловие(ВыражениеМодели, Контекст) Экспорт 
	ОбработатьВыражение(ВыражениеМодели.Значение, Контекст, ВыражениеМодели);
	// TODO проверить тип
	// проверит использование агркгатных функций
КонецПроцедуры	

Процедура ОбработатьВыражение(Выражение, Контекст, РассчитываемыеСвойства, Посетитель = Неопределено) Экспорт 
	Если Посетитель = Неопределено Тогда
		Посетитель = Обработки.СемантическийАнализВыраженийПосетитель.СоздатьПосетитель(Контекст)	
	КонецЕсли;	
	
	Посетитель.УстановитьРассчитываемыеСвойства(РассчитываемыеСвойства);
	
	ОбходМоделиЯзыкаВыражений.ОбойтиДерево(Выражение, Посетитель);
	Посетитель.ЗавершитьОбходВыражения();
КонецПроцедуры	       

// Обработать выражение выбираемого поля.
// 
// Параметры:
//  Выражение - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
//  Контекст - см. Контекст
Процедура ОбработатьВыражениеВыбираемогоПоля(Выражение, ИмяПоля, Контекст) Экспорт
	ОбработатьВыражение(Выражение.Значение, Контекст, Выражение);
	МодельЗапросаТипы.ПроверитьТипЗначенияВыраженияПоля(Выражение.ТипЗначения);	
КонецПроцедуры


// Заполнить псевдониым полей операторов.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура ЗаполнитьПсевдонимыПолейОператоров(ЗапросВыбора)
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл
		Для Индекс = 1 По ЗапросВыбора.Колонки.ВГраница() Цикл
			Оператор.ВыбираемыеПоля[Индекс].Псевдоним = ЗапросВыбора.Колонки[Индекс].Имя;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Удалить поля типа null в операторах.
// 
// Параметры:
//  ЗапросВыбора - см. ЭлементыМоделиЗапроса.НовыйЗапросВыбора
Процедура УдалитьПоляТипаNullВОператорах(ЗапросВыбора)
	Для Каждого Оператор Из ЗапросВыбора.Операторы Цикл
		ВГраница = Оператор.ВыбираемыеПоля.ВГраница();
		Для Индекс = 0 По ВГраница Цикл
			Поле = Оператор.ВыбираемыеПоля[ВГраница - Индекс];
			Если Поле.Выражение.Значение.Тип = "Константа"
				И Поле.Выражение.Значение.Значение = Null Тогда
				
				Оператор.ВыбираемыеПоля.Удалить(ВГраница - Индекс);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Заполнить используемые оператором поля.
// 
// Параметры:
//  РасчитываемыеСвойства - см. ЭлементыМоделиЗапроса.НовыйВыражениеМоделиЗапроса
//  Оператор - см. ЭлементыМоделиЗапроса.НовыйОператорЗапроса
Процедура ЗаполнитьРасчитываемыеСвойстваПоОператоруОператоруя(РасчитываемыеСвойства, Оператор)
	Для Каждого ВыбираемоеПоле Из Оператор.ВыбираемыеПоля Цикл
		Для Каждого КлючЗнаение Из ВыбираемоеПоле.Выражение.ПоляИсточников Цикл
			РасчитываемыеСвойства.ПоляИсточников.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		Для Каждого КлючЗнаение Из ВыбираемоеПоле.Выражение.ПараметрыЗапроса Цикл
			РасчитываемыеСвойства.ПараметрыЗапроса.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса
			Или ВыбираемоеПоле.Выражение.ИспользуютсяИсточникиВнешнегоЗапроса;
	КонецЦикла;
	
	Для Каждого ВыражениеГруппировки Из Оператор.Группировка.Элементы Цикл
		Для Каждого КлючЗнаение Из ВыражениеГруппировки.ПоляИсточников Цикл
			РасчитываемыеСвойства.ПоляИсточников.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		Для Каждого КлючЗнаение Из ВыражениеГруппировки.ПараметрыЗапроса Цикл
			РасчитываемыеСвойства.ПараметрыЗапроса.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла; 
		РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса
			Или ВыражениеГруппировки.ИспользуютсяИсточникиВнешнегоЗапроса;
	КонецЦикла;
	
	Для Каждого ВыражениеМодели Из Оператор.Отбор Цикл
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПоляИсточников Цикл
			РасчитываемыеСвойства.ПоляИсточников.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПараметрыЗапроса Цикл
			РасчитываемыеСвойства.ПараметрыЗапроса.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса
			Или ВыражениеМодели.ИспользуютсяИсточникиВнешнегоЗапроса;
	КонецЦикла;
	
	Для Каждого ВыражениеМодели Из Оператор.ОтборСгруппированных Цикл
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПоляИсточников Цикл
			РасчитываемыеСвойства.ПоляИсточников.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		Для Каждого КлючЗнаение Из ВыражениеМодели.ПараметрыЗапроса Цикл
			РасчитываемыеСвойства.ПараметрыЗапроса.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
		КонецЦикла;
		РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса
			Или ВыражениеМодели.ИспользуютсяИсточникиВнешнегоЗапроса;
	КонецЦикла;
	
	Для Каждого Источник Из Оператор.Источники.Элементы Цикл
		Для Каждого Соединение Из Источник.Соединения Цикл
			Для Каждого КлючЗнаение Из Соединение.Условие.ПоляИсточников Цикл
				РасчитываемыеСвойства.ПоляИсточников.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
			КонецЦикла;
			Для Каждого КлючЗнаение Из Соединение.Условие.ПоляИсточников Цикл
				РасчитываемыеСвойства.ПараметрыЗапроса.Вставить(КлючЗнаение.Ключ, КлючЗнаение.Значение);
			КонецЦикла;
			РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса = РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса
				Или Соединение.Условие.ИспользуютсяИсточникиВнешнегоЗапроса;
		КонецЦикла;
	КонецЦикла;
	
	Оператор.__ИспользуютсяИсточникиВнешнегоЗапроса = Оператор.__ИспользуютсяИсточникиВнешнегоЗапроса
		Или РасчитываемыеСвойства.ИспользуютсяИсточникиВнешнегоЗапроса;
КонецПроцедуры



#КонецОбласти
