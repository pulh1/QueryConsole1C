
#Область СлужебныйПрограммныйИнтерфейс

// Описание представления по имени служебный.
// 
// Параметры:
//  ИмяПредставления - Строка
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
Функция ОписаниеПредставленияПоИмени(ИмяПредставления) Экспорт  
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ОписаниеПредставленияПоИмени(ИмяПредставления);	
КонецФункции   

// Описание представления по имени служебный.
// 
// Параметры:
//  ИмяТаблицы - Строка
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
Функция ОписаниеПредставленияПоИмениТаблицы(ИмяТаблицы) Экспорт  
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ОписаниеПредставленияПоИмениТаблицы(ИмяТаблицы);	
КонецФункции   
 
Функция ИсполнительПредставления(ОписаниеПредставления) Экспорт
	Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];	
КонецФункции

Функция ГенераторИсполняемогоКода(ОписаниеПредставления) Экспорт
	Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];		
КонецФункции

Функция ГенераторТекстаЗапросаДляСКД(ОписаниеПредставления) Экспорт
	Если ОписаниеПредставления.ДоступноВМеханизмеПредставленийСКД Тогда
		Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ГруппыИсполняемыхПредставлений() Экспорт
	Группы = Новый Массив();
	УникальныеГруппы = Новый Соответствие;
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			ЧастиИмени = СтрРазделить(ВложеннаяПодсистема.Имя, "_");
			Если ЧастиИмени.Количество() = 2 Тогда
				ИмяГруппы = ЧастиИмени[1];
			Иначе
				ИмяГруппы = ЧастиИмени[0];
			КонецЕсли;
			Если УникальныеГруппы.Получить(ИмяГруппы) = Неопределено Тогда
				Группы.Добавить(ИмяГруппы);
				УникальныеГруппы.Вставить(ИмяГруппы, Истина);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Группы;
КонецФункции

Функция ИменаТаблицПредставленийВходящихВГруппу(ИмяГруппы) Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаТаблицПредставленийВходящихВГруппу(ИмяГруппы); 	
КонецФункции

Функция ИменаОбработокИсполняемыхПредставлений() Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаОбработокИсполняемыхПредставлений();	
КонецФункции

Функция СоответствиеИменОбработокИменамПредставлений() Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.СоответствиеИменОбработокИменамПредставлений();
КонецФункции

Функция ИменаДочернихГрупп(ИмяГруппы) Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаДочернихГрупп(ИмяГруппы);		
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Родительские подсистемы.
// 
// Параметры:
//  ИмяРодителя - Строка
// 
// Возвращаемое значение:
//  Массив из ОбъектМетаданныхПодсистема
//
Функция РодительскиеПодсистемы(ИмяРодителя) 
	РодительскиеПодсистемы = Новый Массив();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, Подсистема, ИмяРодителя);	
	КонецЦикла;
	
	Возврат РодительскиеПодсистемы;	
КонецФункции

Функция ПодсистемыВерхнегоУровня()
	ПодсистемыВерхнегоУровня = Новый Массив();
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		Если Подсистема.Имя = "ИсполняемыеПредставления"
			Или СтрЗаканчиваетсяНа(Подсистема.Имя, "_ИсполняемыеПредставления") Тогда
			
			ПодсистемыВерхнегоУровня.Добавить(Подсистема);	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ПодсистемыВерхнегоУровня;
КонецФункции

Процедура ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, ТекущаяПодсистема, ИмяРодителя) 
	Для Каждого Подсистема Из ТекущаяПодсистема.Подсистемы Цикл
		Если Подсистема.Имя = ИмяРодителя
			Или СтрЗаканчиваетсяНа(Подсистема.Имя, "_" + ИмяРодителя) Тогда
			
			РодительскиеПодсистемы.Добавить(Подсистема);
		Иначе
			ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, Подсистема, ИмяРодителя);		
		КонецЕсли;
	КонецЦикла; 			
КонецПроцедуры

Функция ОписаниеПредставленияПоИмениСлужебный(ИмяПредставления) Экспорт  
	ЧастиИмени = СтрРазделить(ИмяПредставления, ".");	
	СоответствиеИмен = СоответствиеИменОбработокИменамПредставлений();
	
	ИмяОбъектаМетаданных = Неопределено;
	Если ЧастиИмени.Количество() = 1 Тогда
		ИмяОбработки = СоответствиеИмен.Получить(ВРег(ЧастиИмени[0]));
	ИначеЕсли ЧастиИмени.Количество() = 3 Тогда 	
		ИмяОбработки = СоответствиеИмен.Получить(ВРег(ЧастиИмени[0] + "." + ЧастиИмени[2]));
		ИмяОбъектаМетаданных = ЧастиИмени[1];	
	Иначе
		ИмяОбработки = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПредставленияПоИмениОбработки(ИмяОбработки, ИмяОбъектаМетаданных);
КонецФункции   

Функция ОписаниеПредставленияПоИмениТаблицыСлужебный(ИмяТаблицы) Экспорт  
	ЧастиИмени = СтрРазделить(ИмяТаблицы, ".");	
	СоответствиеИмен = СоответствиеИменОбработокИменамПредставлений();
	
	ИмяОбъектаМетаданных = Неопределено;
	Если ЧастиИмени.Количество() = 2 Тогда
		ИмяОбработки = СоответствиеИмен.Получить(ВРег(ЧастиИмени[1]));
	ИначеЕсли ЧастиИмени.Количество() = 4 Тогда 	
		ИмяОбработки = СоответствиеИмен.Получить(ВРег(ЧастиИмени[1] + "." + ЧастиИмени[3]));
		ИмяОбъектаМетаданных = ЧастиИмени[2];	
	Иначе
		ИмяОбработки = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПредставленияПоИмениОбработки(ИмяОбработки, ИмяОбъектаМетаданных);
КонецФункции 

Функция ОписаниеПредставленияПоИмениОбработки(ИмяОбработки, ИмяОбъектаМетаданных = Неопределено)  
	Описание = Неопределено;
	Если ЗначениеЗаполнено(ИмяОбработки) Тогда
		Модуль = Обработки[ИмяОбработки];
		Если ИмяОбъектаМетаданных = Неопределено Тогда
			Описание = Модуль.Описание();
		Иначе
			Описание = Модуль.Описание(ИмяОбъектаМетаданных);	
		КонецЕсли;
	КонецЕсли;
	
	Если Описание <> Неопределено Тогда
		Если ИмяОбъектаМетаданных = Неопределено Тогда
			Описание.Имя = Модуль.ИмяПредставления();
		Иначе
			ЧастиИмени = СтрРазделить(Модуль.ИмяПредставления(), ".");
			ЧастиИмени.Вставить(1, ИмяОбъектаМетаданных);
			Описание.Имя = СтрСоединить(ЧастиИмени, ".");
		КонецЕсли;
		Описание.ИмяТаблицы = "ИсполняемоеПредставление." + Описание.Имя;
		Описание.ИмяОбработчика = ИмяОбработки;
		
		ЗаполнитьПоляПоИменам(Описание);
		ЗаполнитьПараметрыПоИменам(Описание);
	КонецЕсли;
	
	Возврат Описание;
КонецФункции 

Процедура ЗаполнитьПоляПоИменам(ОписаниеПредставления)
	Для Каждого Поле Из ОписаниеПредставления.Поля Цикл
		ОписаниеПредставления.ПоляПоИменам.Вставить(ВРег(Поле.Имя), Поле);	
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьПараметрыПоИменам(ОписаниеПредставления)
	Для Каждого Параметр Из ОписаниеПредставления.ОписаниеПараметров Цикл
		ОписаниеПредставления.ПараметрыПоИменам.Вставить(ВРег(Параметр.Имя), Параметр);	
	КонецЦикла;	
КонецПроцедуры	

Функция ИменаТаблицПредставленийВходящихВГруппуСлужебный(ИмяГруппы) Экспорт
	ИменаПредставлений = Новый Массив();
	
	ЧастиИмени = СтрРазделить(ИмяГруппы, ".");
	Если ЧастиИмени.Количество() = 1 Тогда 
		Если ИменаГруппОбъектовМетаданныхПоддерживаюшихПредставления().Получить(ВРег(ИмяГруппы)) = Неопределено Тогда
			ИменаОбработокПоПодсистемам = ИменаОбработокИсполняемыхПредставленийПоПодсистемам();
			ИменаОбработок = ИменаОбработокПоПодсистемам.Получить(ИмяГруппы);
			Если ИменаОбработок <> Неопределено Тогда
				Для Каждого ИмяОбработки Из ИменаОбработок Цикл
					ИменаПредставлений.Добавить("ИсполняемоеПредставление." + Обработки[ИмяОбработки].ИмяПредставления());	
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ИменаГруппОбъектовМетаданныхПоддерживаюшихПредставления().Получить(ВРег(ЧастиИмени[0])) <> Неопределено Тогда
		ИменаПредставлений = ИменаПредставленийРегистра(ЧастиИмени[0], ЧастиИмени[1]);
	КонецЕсли;
	
	Возврат ИменаПредставлений;
КонецФункции

Функция ИменаОбработокИсполняемыхПредставленийСлужебный() Экспорт
	ИменаОбработок = Новый Массив();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			Для Каждого МетаданныеОбработки Из ВложеннаяПодсистема.Состав Цикл
				ИменаОбработок.Добавить(МетаданныеОбработки.Имя);	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаОбработок;
КонецФункции

Функция СоответствиеИменОбработокИменамПредставленийСлужебный() Экспорт
	СоответствиеИменОбработокИменамПредставлений = Новый Соответствие();
	
	ИменаОбработок = ИменаОбработокИсполняемыхПредставлений();
	Для Каждого ИмяОбработки Из ИменаОбработок Цикл
		СоответствиеИменОбработокИменамПредставлений.Вставить(
			ВРег(Обработки[ИмяОбработки].ИмяПредставления()), 
			ИмяОбработки);
	КонецЦикла;
			
	Возврат СоответствиеИменОбработокИменамПредставлений;	
КонецФункции

Функция ИменаОбработокИсполняемыхПредставленийПоПодсистемам() Экспорт
	ИменаОбработокПоПодсистемам = Новый Соответствие();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			ИменаОбработок = ИменаОбработокПоПодсистемам.Получить(ВложеннаяПодсистема.Имя);
			Если ИменаОбработок = Неопределено Тогда
				ИменаОбработок = Новый Массив();
				ИменаОбработокПоПодсистемам.Вставить(ВложеннаяПодсистема.Имя, ИменаОбработок);
			КонецЕсли;
			Для Каждого МетаданныеОбработки Из ВложеннаяПодсистема.Состав Цикл
				ИменаОбработок.Добавить(МетаданныеОбработки.Имя);	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаОбработокПоПодсистемам;
КонецФункции

Функция ИменаДочернихГруппСлужебный(ИмяГруппы) Экспорт
	// TODO - переименовать что то типо ИменаРегистровПоддерживающихПредставление
	
	Если ИменаГруппОбъектовМетаданныхПоддерживаюшихПредставления().Получить(ВРег(ИмяГруппы)) = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ИменаДочернихГрупп = Новый Массив();
	
	ОбработкиРегистров = Новый Массив();
	Для Каждого Подсистема Из РодительскиеПодсистемы(ИмяГруппы) Цикл
		Для Каждого МетаданныеОбработки Из Подсистема.Состав Цикл
			ОбработкиРегистров.Добавить(Обработки[МетаданныеОбработки.Имя]); 		
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого МетаданныеРегистра Из Метаданные[ИмяГруппы] Цикл
		Для Каждого Обработка Из ОбработкиРегистров Цикл
			Если Обработка.Описание(МетаданныеРегистра.Имя) <> Неопределено Тогда
				ИменаДочернихГрупп.Добавить(ИмяГруппы + "." + МетаданныеРегистра.Имя);
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаДочернихГрупп;
КонецФункции

Функция ИменаГруппОбъектовМетаданныхПоддерживаюшихПредставления()
	ИменаГрупп = Новый Соответствие();
	ИменаГрупп.Вставить(ВРег("РегистрыСведений"), Истина);
	ИменаГрупп.Вставить(ВРег("РегистрыРасчета"), Истина);
	ИменаГрупп.Вставить(ВРег("РегистрыНакопления"), Истина);
	ИменаГрупп.Вставить(ВРег("РегистрыБухгалтерии"), Истина);
	
	Возврат ИменаГрупп;
КонецФункции

Функция ИменаПредставленийРегистра(ИмяГруппыРегистров, ИмяРегистра) Экспорт
	ИменаПредставленийРегистра = Новый Массив();
	
	ИменаОбработокПоПодсистемам = ИменаОбработокИсполняемыхПредставленийПоПодсистемам();
	ИменаОбработок = ИменаОбработокПоПодсистемам.Получить(ИмяГруппыРегистров);
	Если ИменаОбработок = Неопределено Тогда
		Возврат ИменаПредставленийРегистра;
	КонецЕсли;
	
	Для Каждого ИмяОбработки Из ИменаОбработок Цикл
		МетаданныеРегистра = Метаданные[ИмяГруппыРегистров].Найти(ИмяРегистра);
		Описание = Обработки[ИмяОбработки].Описание(МетаданныеРегистра.Имя);
		Если Описание <> Неопределено Тогда
			Имя = Обработки[ИмяОбработки].ИмяПредставления();
			ЧастиИмени = СтрРазделить(Имя, ".");
			ИменаПредставленийРегистра.Добавить("ИсполняемоеПредставление." + ЧастиИмени[0] + "." + ИмяРегистра + "." + ЧастиИмени[1]);
		КонецЕсли;	
	КонецЦикла;
	Возврат ИменаПредставленийРегистра;
КонецФункции

#КонецОбласти
