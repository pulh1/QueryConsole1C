
#Область СлужебныеПроцедурыИФункции

// Описание представления по имени.
// 
// Параметры:
//  ПолноеИмяПредставления - Строка
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
Функция ОписаниеПредставленияПоИмени(ПолноеИмяПредставления) Экспорт  
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ОписаниеПредставленияПоИмени(ПолноеИмяПредставления);	
КонецФункции   
 
Функция ИсполнительПредставления(ИмяПредставления) Экспорт
	ОписаниеПредставления = ОписаниеПредставленияПоИмени(ИмяПредставления);
	Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];		
КонецФункции

Функция ГенераторИсполняемогоКода(ОписаниеПредставления) Экспорт
	Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];		
КонецФункции

Функция ГенераторТекстаЗапросаДляСКД(ОписаниеПредставления) Экспорт
	Если ОписаниеПредставления.ДоступноВМеханизмеПредставленийСКД Тогда
		Возврат Обработки[ОписаниеПредставления.ИмяОбработчика];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
 
Функция ИменаПредставленийВходящихВГруппу(ИмяГруппы) Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаПредставленийВходящихВГруппу(ИмяГруппы); 	
КонецФункции

Функция ИменаОбработокИсполняемыхПредставлений() Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаОбработокИсполняемыхПредставлений();	
КонецФункции

Функция ИменаДочернихГрупп(ИмяГруппы) Экспорт
	Возврат ПоставщикИсполняемыхПредставленийПовтИсп.ИменаДочернихГрупп(ИмяГруппы);		
КонецФункции

Процедура ЗаполнитьПоляПоИменам(ОписаниеПредставления)
	Для Каждого Поле Из ОписаниеПредставления.Поля Цикл
		ОписаниеПредставления.ПоляПоИменам.Вставить(ВРег(Поле.Имя), Поле);	
	КонецЦикла;	
КонецПроцедуры	

// Заполнить параметры по именам.
// 
// Параметры:
//  ОписаниеПредставления - см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
Процедура ЗаполнитьПараметрыПоИменам(ОписаниеПредставления)
	Для Каждого Параметр Из ОписаниеПредставления.ОписаниеПараметров Цикл
		ОписаниеПредставления.ПараметрыПоИменам.Вставить(ВРег(Параметр.Имя), Параметр);	
	КонецЦикла;	
КонецПроцедуры	

Функция ГруппыИсполняемыхПредставлений() Экспорт
	Группы = Новый Массив();
	УникальныеГруппы = Новый Соответствие;
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			ЧастиИмени = СтрРазделить(ВложеннаяПодсистема.Имя, "_");
			Если ЧастиИмени.Количество() = 2 Тогда
				ИмяГруппы = ЧастиИмени[1];
			Иначе
				ИмяГруппы = ЧастиИмени[0];
			КонецЕсли;
			Если УникальныеГруппы.Получить(ИмяГруппы) = Неопределено Тогда
				Группы.Добавить(ИмяГруппы);
				УникальныеГруппы.Вставить(ИмяГруппы, Истина);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Группы;
КонецФункции

// Родительские подсистемы.
// 
// Параметры:
//  ИмяРодителя - Строка
// 
// Возвращаемое значение:
//  Массив из ОбъектМетаданныхПодсистема
//
Функция РодительскиеПодсистемы(ИмяРодителя) 
	РодительскиеПодсистемы = Новый Массив();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, Подсистема, ИмяРодителя);	
	КонецЦикла;
	
	Возврат РодительскиеПодсистемы;	
КонецФункции

Функция ПодсистемыВерхнегоУровня()
	ПодсистемыВерхнегоУровня = Новый Массив();
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		Если Подсистема.Имя = "ИсполняемыеПредставления"
			Или СтрЗаканчиваетсяНа(Подсистема.Имя, "_ИсполняемыеПредставления") Тогда
			
			ПодсистемыВерхнегоУровня.Добавить(Подсистема);	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ПодсистемыВерхнегоУровня;
КонецФункции

Процедура ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, ТекущаяПодсистема, ИмяРодителя) 
	Для Каждого Подсистема Из ТекущаяПодсистема.Подсистемы Цикл
		Если Подсистема.Имя = ИмяРодителя
			Или СтрЗаканчиваетсяНа(Подсистема.Имя, "_" + ИмяРодителя) Тогда
			
			РодительскиеПодсистемы.Добавить(Подсистема);
		Иначе
			ЗаполнитьРодительскиеПодсистемы(РодительскиеПодсистемы, Подсистема, ИмяРодителя);		
		КонецЕсли;
	КонецЦикла; 			
КонецПроцедуры

// Описание представления по имени служебный.
// 
// Параметры:
//  ИмяПредставления - Строка
// 
// Возвращаемое значение:
//  см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
Функция ОписаниеПредставленияПоИмениСлужебный(ИмяПредставления) Экспорт  
	ЧастиИмени = СтрРазделить(ИмяПредставления, ".");
	Если ЧастиИмени.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// TODO изюавится от требований к именам обработок
	
	ИменаОбработок = ИменаОбработокИсполняемыхПредставлений();
	
	Если СтрНачинаетсяС(ВРег(ИмяПредставления), ВРег("ИсполняемоеПредставление.РегистрСведений.")) Тогда
		Описание = ПредставленияРегистровСведенийУтилиты.ОписаниеПредставленияПоИмени(ИмяПредставления, ИменаОбработок);
		Если Описание <> Неопределено Тогда
			ЗаполнитьПоляПоИменам(Описание);
			ЗаполнитьПараметрыПоИменам(Описание);
		КонецЕсли;
		Возврат Описание;
	КонецЕсли;	
			
	Если СтрНачинаетсяС(ВРег(ИмяПредставления), ВРег("ИсполняемоеПредставление.РегистрРасчета.")) Тогда
		ЧастиИмени = СтрРазделить(ИмяПредставления, ".");
		ИмяРегистра = ЧастиИмени[ЧастиИмени.ВГраница() - 1];
		
		Описание = Обработки.ПредставлениеРегистрРасчетаБаза.Описание(ИмяРегистра);
		
		ЗаполнитьПоляПоИменам(Описание);
		ЗаполнитьПараметрыПоИменам(Описание);
		Описание.ИмяОбработчика = "ПредставлениеРегистрРасчетаБаза";
		
		Возврат Описание;
	КонецЕсли;		
	
	Для Каждого ИмяОбработки Из ИменаОбработок Цикл
		ОбработкаМетаданные = Метаданные.Обработки[ИмяОбработки];
		Если ВРег(ОбработкаМетаданные.Имя) = ВРег("Представление" + ЧастиИмени[1]) Тогда
			Описание = Обработки[ОбработкаМетаданные.Имя].Описание();
			ЗаполнитьПоляПоИменам(Описание);
			ЗаполнитьПараметрыПоИменам(Описание);
			Описание.ИмяОбработчика = ИмяОбработки;
			Возврат Описание;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции   

Функция ИменаПредставленийВходящихВГруппуСлужебный(ИмяГруппы) Экспорт
	Если ИмяГруппы = "РегистрыСведений" Или ИмяГруппы = "РегистрыРасчета" Тогда
		Возврат Новый Массив();
	ИначеЕсли СтрНачинаетсяС(ИмяГруппы, "РегистрСведений.") Тогда
		ИменаОбработок = ИменаОбработокИсполняемыхПредставлений();
		Возврат ПредставленияРегистровСведенийУтилиты.ИменаПредставленийРегистра(ИмяГруппы, ИменаОбработок);
	ИначеЕсли СтрНачинаетсяС(ИмяГруппы, "РегистрРасчета.") Тогда
		ИменаОбработок = ИменаОбработокИсполняемыхПредставлений();
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ИмяГруппы);
		Результат = Новый Массив();
		Результат.Добавить("ИсполняемоеПредставление.РегистрРасчета." + МетаданныеРегистра.Имя + ".База");
		Возврат Результат;	
	Иначе
	 	ИменаПредставлений = Новый Массив();
	 	РодительскиеПодсистемы = РодительскиеПодсистемы(ИмяГруппы);
	 	Для Каждого Подсистема Из РодительскиеПодсистемы Цикл
			Для Каждого ОбработкаМетаданные Из Подсистема.Состав Цикл 	
				Имя = Обработки[ОбработкаМетаданные.Имя].ИмяПредставления();	
				ИменаПредставлений.Добавить(Имя);
			КонецЦикла;	
		КонецЦикла;
		Возврат ИменаПредставлений;
	КонецЕсли;
КонецФункции

Функция ИменаОбработокИсполняемыхПредставленийСлужебный() Экспорт
	ИменаОбработок = Новый Массив();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			Для Каждого МетаданныеОбработки Из ВложеннаяПодсистема.Состав Цикл
				ИменаОбработок.Добавить(МетаданныеОбработки.Имя);	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаОбработок;
КонецФункции

Функция ИменаОбработокИсполняемыхПредставленийПоПодсистемам() Экспорт
	ИменаОбработокПоПодситемам = Новый Соответствие();
	Для Каждого Подсистема Из ПодсистемыВерхнегоУровня() Цикл
		Для Каждого ВложеннаяПодсистема Из Подсистема.Подсистемы Цикл
			ИменаОбработок = Новый Массив();
			ИменаОбработокПоПодситемам.Вставить(ВложеннаяПодсистема.Имя, ИменаОбработок);
			Для Каждого МетаданныеОбработки Из ВложеннаяПодсистема.Состав Цикл
				ИменаОбработок.Добавить(МетаданныеОбработки.Имя);	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаОбработокПоПодситемам;
КонецФункции

Функция ИменаДочернихГруппСлужебный(ИмяГруппы) Экспорт
	Если ИмяГруппы <> "РегистрыСведений" 
		И ИмяГруппы <> "РегистрыРасчета"  Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ИменаДочернихГрупп = Новый Массив();
	
	ОбработкиРегистров = Новый Массив();
	Для Каждого Подсистема Из РодительскиеПодсистемы(ИмяГруппы) Цикл
		Для Каждого МетаданныеОбработки Из Подсистема.Состав Цикл
			ОбработкиРегистров.Добавить(Обработки[МетаданныеОбработки.Имя]); 		
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого МетаданныеРегистра Из Метаданные[ИмяГруппы] Цикл
		Для Каждого Обработка Из ОбработкиРегистров Цикл
			Если Обработка.Описание(МетаданныеРегистра.Имя) <> Неопределено Тогда
				ИменаДочернихГрупп.Добавить(МетаданныеРегистра.ПолноеИмя());
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИменаДочернихГрупп;
КонецФункции

#КонецОбласти
