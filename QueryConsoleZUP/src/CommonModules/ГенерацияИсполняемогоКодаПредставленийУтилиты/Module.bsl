#Область СлужебныеПроцедурыИФункции

Функция СтрокаПрисвоенияПараметровПеременной(ИмяПеременной, ИмяПараметра, ПараметрыВыполнения, Знач Табуляции = "", УчитыватьЗначениеПоУмолчанию = Ложь) Экспорт
	Параметр = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Если Не УчитыватьЗначениеПоУмолчанию Тогда
			Возврат  "";
		КонецЕсли;
		
		Описание = ПоставщикИсполняемыхПредставлений.ОписаниеПредставленияПоИмени(ПараметрыВыполнения.ИмяИсполняемогоПредставления);
		ОписаниеПараметра = Описание.ПараметрыПоИменам.Получить(ВРег(ИмяПараметра));
		Если ОписаниеПараметра <> Неопределено
			И ОписаниеПараметра.ЗначениеПоУмолчанию <> Неопределено Тогда
		
			Строка = ИмяПеременной + " = " + ПримитивноеЗначениеВСтроку(ОписаниеПараметра.ЗначениеПоУмолчанию) + ";";
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли Параметр.ЭтоПараметрЗапроса Тогда
		Строка = ИмяПеременной + " = " + Параметр.Значение + ";";
	Иначе
		Строка = ИмяПеременной + " = " + ПримитивноеЗначениеВСтроку(Параметр.Значение) + ";";
	КонецЕсли;
	
	Возврат Табуляции + Строка;
КонецФункции

Функция СтрокаПрисвоенияЗначения(ИмяПеременной, Значение, Знач Табуляции = "") Экспорт
	Строка = ИмяПеременной + " = " + ПримитивноеЗначениеВСтроку(Значение) + ";";
	
	Возврат Табуляции + Строка;
КонецФункции

Процедура КодПрисвоенияПараметровВТекстовыйДокумент(ТекстовыйДокумент, ПараметрыВыполнения, ОписаниеПредставления, 
													СоответствиеИмен, Знач Таблцляции = "", УчитыватьЗначениеПоУмолчанию = Ложь) Экспорт
	
	Для Каждого ОписаниеПараметра Из ОписаниеПредставления.ОписаниеПараметров Цикл
		Если Не СоответствиеИмен.Свойство(ОписаниеПараметра.Имя) Тогда
			Продолжить;
		КонецЕсли;
			
		Строка = СтрокаПрисвоенияПараметровПеременной(
			СоответствиеИмен[ОписаниеПараметра.Имя], 
			ОписаниеПараметра.Имя,
			ПараметрыВыполнения,
			Таблцляции,
			УчитыватьЗначениеПоУмолчанию);
		
		Если Не ПустаяСтрока(Строка) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Строка);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ПримитивноеЗначениеВСтроку(Значение) Экспорт
	Если Значение = Неопределено Тогда
		Возврат "Неопределено";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Строки = СтрРазделить(Значение, Символы.ПС, Истина);
		Если Строки.Количество() > 1 Тогда
			МассивСтрокРезультат = Новый Массив();
			МассивСтрокРезультат.Добавить("""" + Строки[0]);
			Для Индекс = 1 По Строки.ВГраница() Цикл
				МассивСтрокРезультат.Добавить("|" + Строки[Индекс]);
			КонецЦикла;
			МассивСтрокРезультат[МассивСтрокРезультат.ВГраница()] = МассивСтрокРезультат[МассивСтрокРезультат.ВГраница()] + """";
			Возврат СтрСоединить(МассивСтрокРезультат, Символы.ПС);
		Иначе
			Возврат """" + Значение + """";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧН=0; ЧГ=;");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Если Значение Тогда
			Возврат "Истина";
		Иначе
			Возврат "Ложь";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		ГодСтрокой = Формат(Год(Значение), "ЧЦ=4; ЧДЦ=0; ЧВН=; ЧГ=;");
		МесяцСтрокой = Формат(Месяц(Значение), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=;");
		ДеньСтрокой = Формат(День(Значение), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=;");
		ЧасСтрокой = Формат(Час(Значение), "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=;");
		МинутаСтрокой = Формат(Минута(Значение), "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=;");
		СекундаСтрокой = Формат(Секунда(Значение), "ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=; ЧГ=;");
		
		Возврат "'" + ГодСтрокой + МесяцСтрокой + ДеньСтрокой + ЧасСтрокой + МинутаСтрокой + СекундаСтрокой + "'";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура ВывестиМультиСтрокуВТекстовыйДокумент(ТекстовыйДокумент, Строка, Табуляции) Экспорт
	Строки = СтрРазделить(Строка, Символы.ПС, Истина);
	Для Каждого Строка Из Строки Цикл
		ТекстовыйДокумент.ДобавитьСтроку(Табуляции + Строка);
	КонецЦикла;
КонецПроцедуры

Процедура КодЗаполненияКоллекцииИндексовВТекст(ТекстовыйДокумент, ИмяКоллекцииИндексов, ПараметрыВыполнения, ТекущиеТабуляции) Экспорт
	Для Каждого Поле Из ПараметрыВыполнения.Индексы Цикл
		Строка = ИмяКоллекцииИндексов + ".Добавить(" + """" + Поле + """);";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	КонецЦикла; 	
КонецПроцедуры

Процедура КодЗаполненияПсевдонимовПолейВТекст(ТекстовыйДокумент, ИмяКоллекцииПсевдонимов, ПараметрыВыполнения, ТекущиеТабуляции) Экспорт
	Для Каждого КлючЗначение Из ПараметрыВыполнения.ПсевдонимыПолей Цикл
		Строка = ИмяКоллекцииПсевдонимов + ".Вставить(" + """" + КлючЗначение.Ключ + """," + """" + КлючЗначение.Значение +   """ );";
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеТабуляции + Строка);
	КонецЦикла; 	
КонецПроцедуры

// Пустое значение типа в выражение строкой.
// 
// Параметры:
//  Тип - Тип
// 
// Возвращаемое значение:
// 	- Строка 
Функция ПустоеЗначениеТипаВВыражениеСтрокой(Тип) Экспорт
	Если Тип = Тип("Дата") Тогда
		Возврат "ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	ИначеЕсли Тип = Тип("Строка") Тогда
		 Возврат ПримитивноеЗначениеВСтроку("");
	ИначеЕсли Тип = Тип("Число") Тогда 
		Возврат "0";
	ИначеЕсли Тип = Тип("Булево") Тогда 
		Возврат "ЛОЖЬ";
	КонецЕсли;
	
	МетаданныеТипа =  Метаданные.НайтиПоТипу(Тип); 
	Если МетаданныеТипа <> Неопределено Тогда
		Возврат "ЗНАЧЕНИЕ("  + МетаданныеТипа.ПолноеИмя() + ".ПУСТАЯССЫЛКА)";
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
	
// Модель запроса для СКД.
// 
// Параметры:
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  ОписаниеПредставления - см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
// 
// Возвращаемое значение:
// 		см. ЭлементыМоделиЗапроса.НовыйПакетЗапросов 
Функция МодельЗапросаДляСКД(ПараметрыВыполнения, ОписаниеПредставления) Экспорт
	МАКСИМАЛЬНОЕ_ЧИСЛО_ТИПОВ = 5;
	
	Модель = МодельЗапросаУтилиты.СоздатьПакетЗапросов();
	Построитель = МодельЗапросаУтилиты.СоздатьПостроительМодели(Модель);
	
	Если ПараметрыВыполнения.ОписаниеВТФильтр <> Неопределено Тогда
		Построитель.ДобавитьИсточник(ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ, ПараметрыВыполнения.ОписаниеВТФильтр.ИмяВТ);
	КонецЕсли;
	
	ТипыИспользуемыхПолей = ТипыИспользуемыхПолейПредставления(ПараметрыВыполнения, ОписаниеПредставления);
	
	Для Каждого Поле Из ТипыИспользуемыхПолей Цикл
		НомерТипа = 1;
		ВыраженияПоля = Новый Массив();
		Для Каждого Тип Из Поле.Типы Цикл
			ВыраженияПоля.Добавить(ПустоеЗначениеТипаВВыражениеСтрокой(Тип));
			
			Если НомерТипа = МАКСИМАЛЬНОЕ_ЧИСЛО_ТИПОВ Тогда
				Прервать;
			КонецЕсли;	
			НомерТипа = НомерТипа + 1;
		КонецЦикла;
		
		Если ВыраженияПоля.Количество() = 1 Тогда
			Построитель.ДобавитьПолеВЗапрос(ВыраженияПоля[0], Поле.Поле);	
		Иначе
			МассивСтрок = Новый Массив();
			МассивСтрок.Добавить("ВЫБОР");
			Для Каждого ТекущееВыражение Из ВыраженияПоля Цикл
				МассивСтрок.Добавить("КОГДА ИСТИНА ТОГДА " + ТекущееВыражение);	
			КонецЦикла;
			МассивСтрок.Добавить("КОНЕЦ");
			Выражение = СтрСоединить(МассивСтрок, Символы.ПС);
			Построитель.ДобавитьПолеВЗапрос(Выражение, Поле.Поле);
		КонецЕсли;	
	КонецЦикла;
	Построитель.УстановитьИмяВременнойТаблицы(ПараметрыВыполнения.ИмяВТРезультат);
	Если ПараметрыВыполнения.ТолькоРазрешенные Тогда
		ВыражениеПараметра = ПримитивноеЗначениеВСтроку("ТолькоРазрешенные") + " = ИСТИНА";
		
		Построитель.ДобавитьОтбор(ВыражениеПараметра);
	КонецЕсли;
	
	Для Каждого Отбор Из ПараметрыВыполнения.Отборы Цикл
		ПутьКПолюСтрокой = ПримитивноеЗначениеВСтроку(СтрСоединить(Отбор.ПутьКПолю, ".")); 
	
		Если Отбор.ЗначениеОтбора.ЭтоПараметрЗапроса Тогда
			Значение = "&" + Отбор.ЗначениеОтбора.Значение;
		Иначе
			Значение = ПримитивноеЗначениеВСтроку(Отбор.ЗначениеОтбора.Значение);
		КонецЕсли;	
		
		Построитель.ДобавитьОтбор(ПутьКПолюСтрокой + " = " + Значение);
	КонецЦикла;
	
	Для Каждого Поле Из ПараметрыВыполнения.Индексы Цикл
		Построитель.ДобавитьИндекс(Поле);
	КонецЦикла;
	
	Возврат Модель;
КонецФункции

// Установить параметра представления в модель запроса для СКД.
// 
// Параметры:
//  ПостроительМодели - см. Обработка.ПостроительМоделиЗапроса
//  ПараметрыВыполнения - см. ЭлементыМоделиИсполненияПредставлений.НовыйПараметрыВыполненияПредставления
//  ОписаниеПредставления - см. ЭлементыМоделиОписанияПредставлений.НовыйОписаниеПредставления
//  СоответствиеИмен - Структура Из КлючИЗначение
Процедура УстановитьПараметраПредставленияВМодельЗапросаДляСКД(ПостроительМодели, ПараметрыВыполнения, ОписаниеПредставления, СоответствиеИмен) Экспорт
	Для Каждого ОписаниеПараметра Из ОписаниеПредставления.ОписаниеПараметров Цикл
		Если Не СоответствиеИмен.Свойство(ОписаниеПараметра.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ПараметрыВыполнения.ЗначенияПараметровКонстант.Получить(ОписаниеПараметра.Имя);
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеПараметра.ЭтоПараметрЗапроса Тогда
			ЗначениеСтрокой = "&" + ЗначениеПараметра.Значение;		
		Иначе
			ЗначениеСтрокой = ПримитивноеЗначениеВСтроку(ЗначениеПараметра.Значение);	
		КонецЕсли;
		
		ВыражениеПараметра = 
			ПримитивноеЗначениеВСтроку(СоответствиеИмен[ОписаниеПараметра.Имя]) 
			+ " = " + ЗначениеСтрокой;
		
		ПостроительМодели.ДобавитьОтбор(ВыражениеПараметра);
	КонецЦикла;
КонецПроцедуры

Функция ТипыИспользуемыхПолейПредставления(ПараметрыВыполнения, ОписаниеПредставления)
	ТипыИспользуемыхПолей = Новый Массив();
	Для Каждого Поле Из ОписаниеПредставления.Поля Цикл
		Если ПараметрыВыполнения.ИспользуемыеПоля.Получить(ВРег(Поле.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыПоля = Новый Массив();
		Если Поле.ТипЗначения = Неопределено Тогда
			ТипыПоля.Добавить(Тип("Строка"));
		Иначе
			Для Каждого Тип Из Поле.ТипЗначения.Типы() Цикл
				Если Тип = МодельЗапросаТипы.ПроизвольныйТип() Тогда
					Продолжить;	
				Иначе
					ТипыПоля.Добавить(Тип);	
				КонецЕсли;
			КонецЦикла;
			Если ТипыПоля.Количество() = 0 Тогда
				ТипыПоля.Добавить(Тип("Строка"));
			КонецЕсли;
		КонецЕсли;
		
		ТипыИспользуемыхПолей.Добавить(Новый Структура("Поле, Типы", Поле.Имя, ТипыПоля));	
	КонецЦикла;	
	
	Возврат ТипыИспользуемыхПолей;
КонецФункции
	
#КонецОбласти